var App = (function(App, window, undefined)
{
	"use strict";
	
	App.Its =
	{
		Handler:
		{
			ftreeClick: function(event)
			{
				if(!event.isLeft)
					return true;
				
				var target = event.target;
				var li;
				
				if(SSP.DOM.isNode(target))
				{
					switch(target.tagName)
					{
						case 'LI':
						{
							li = target;
							
							if(!SSP.Tree.clickedOnExpander(event, li))
								return true;
							else
							{
								if(SSP.DOM.hasClass(li, 'collapsed'))
								{
									if(li.childNodes.length === 2)
									{
										if(!SSP.DOM.hasClass(li, 'loading'))
										{
											SSP.DOM.addClass(li, 'loading');
											
											var id = li.id.split('_');
											var aid = id[1];
											var ids = [];
											
											var parents = SSP.DOM.getChain(li, true);
											
											var tree;
											
											for(var i = 0; i < parents.length; i++)
											{
												if(parents[i].tagName === 'UL' && SSP.DOM.hasClass(parents[i], 'top'))
												{
													tree = parents[i];
													break;
												}
												
												if(parents[i].tagName === 'LI')
												{
													id = parents[i].id.split('_');
													ids.push(id[2]);
												}
											}
											
											ids.reverse();
											
											var match = App.Its.Router.matchCached(window.location.toString(), true);
											
											var url = SSP.Bus.appPath + 'metadata/' + match.context.nick + '/ftree/' + aid + '/' + ids.join('/') + '_';
											url = App.Its.Router.appendNonce(url);
											
											var checked = li.firstChild.firstChild.checked;
											
											var callback = function(data)
											{
												var tmp = SSP.DOM.create('DIV');
												tmp.innerHTML = data;
												
												SSP.DOM.merge(tree.firstChild, tmp.firstChild.firstChild);
												
												SSP.DOM.destroy(tmp);
												
												if(checked)
												{
													li.firstChild.firstChild.checked = true;
													
													var inputs = li.lastChild.getElementsByTagName('INPUT');
													var length = inputs.length;
													
													for(var i = 0; i < length; i++)
														SSP.DOM.trigger(inputs[i], 'click');
												}
											};
											
											SSP.Bus.request(url, callback);
										}
									}
									else
									{
										SSP.DOM.removeClass(li, 'collapsed');
										SSP.DOM.addClass(li, 'expanded');
									}
								}
								else if(SSP.DOM.hasClass(li, 'expanded'))
								{
									SSP.DOM.removeClass(li, 'expanded');
									SSP.DOM.addClass(li, 'collapsed');
								}
							}
						}
						break;
						case 'INPUT':
						{
							if(target.type === 'checkbox')
							{
								var id = target.id.split('_');
								var aid = id[1];
								id = id[3];
								var label = target.parentNode.nextSibling;
								
								var stack = SSP.DOM.byId('input_stack_' + aid);
								var clean = SSP.DOM.byId('input_stack_clean_' + aid);
								var mark_id = 'input_mark_' + aid + '_' + id;
								
								if(target.checked)
								{
									if(!stack.childNodes.length)
										clean.style.display = 'block';
									
									if(!SSP.DOM.byId(mark_id))
									{
										var mark = SSP.DOM.create('DIV');
										mark.id = mark_id;
										mark.innerHTML = label.innerHTML;
										
										stack.appendChild(mark);
									}
								}
								else
								{
									stack.removeChild(SSP.DOM.byId(mark_id));
									
									var parent = target;
									
									do
									{
										parent = parent.parentNode.parentNode.parentNode.parentNode.firstChild;
										
										if(parent.tagName === 'LABEL')
											parent = parent.firstChild;
										
										if(parent.tagName === 'INPUT' && parent.checked)
										{
											id = parent.id.split('_');
											mark_id = 'input_mark_' + aid + '_' + id[3];
											stack.removeChild(SSP.DOM.byId(mark_id));
											parent.checked = false;
										}
									}
									while(parent.tagName === 'INPUT' && parent.type === 'checkbox');
									
									if(!stack.childNodes.length)
										clean.style.display = '';
								}
								
								if(target.parentNode.parentNode.lastChild.tagName === 'UL')
								{
									var inputs = target.parentNode.parentNode.lastChild.getElementsByTagName('INPUT');
									var length = inputs.length;
									
									for(var i = 0; i < length; i++)
										if(inputs[i].checked !== target.checked)
											SSP.DOM.trigger(inputs[i], 'click');
								}
							}
						}
						break;
						case 'A':
						{
							if(SSP.DOM.hasClass(target.parentNode, 'input_stack_clean'))
							{
								var clean = target.parentNode;
								var id = clean.id.split('_');
								var aid = id[3];
								
								var stack = SSP.DOM.byId('input_stack_' + aid);
								stack.innerHTML = '';
								
								var tree = SSP.DOM.byId('ftree_' + aid + '_-1');
								
								if(tree)
								{
									var inputs = tree.getElementsByTagName('INPUT');
									var length = inputs.length;
									
									for(var i = 0; i < length; i++)
										inputs[i].checked = false;
								}
								else
								{
									var number = SSP.DOM.byId('a_' + aid);
									
									if(number)
									{
										number.value = '';
										
										var suggest = SSP.DOM.byId('ftree_suggest_' + aid);
										
										if(suggest)
										{
											suggest.innerHTML = '';
											suggest.style.display = '';
										}
									}
								}
								
								clean.style.display = '';
							}
						}
						break;
						default:
						{
							return true;
						}
					}
				}
			}
			,
			ftreeSuggestValues: {}
			,
			ftreeSuggest: function(event)
			{
				var target = event.target;
				
				var value = SSP.String.trim(target.value);
				
				if(typeof target.oldValue !== 'undefined' && target.oldValue === value)
					return;
				else
					target.oldValue = value;
				
				var aid = target.id.split('_')[1];
				
				if(typeof App.Its.Handler.ftreeSuggestValues[aid] === 'undefined')
					App.Its.Handler.ftreeSuggestValues[aid] = value;
				else
				{
					if(App.Its.Handler.ftreeSuggestValues[aid] === value)
						return true;
					else
						App.Its.Handler.ftreeSuggestValues[aid] = value;
				}
				
				var suggest = SSP.DOM.byId('ftree_suggest_' + aid);
				
				if(value)
				{
					suggest.innerHTML = '<i>Загрузка...</i>';
					suggest.style.display = 'block';
					
					var match = App.Its.Router.matchCached(window.location.toString(), true);
					
					var url = SSP.Bus.appPath
							+ 'metadata/'
							+ match.context.nick
							+ '/number_?'
							+ 'a_' + aid + '='
							+ encodeURIComponent(value);
					url = App.Its.Router.appendNonce(url);
					
					var callback = function(data)
					{
						suggest.innerHTML = data;
						suggest.style.display = 'block';
					};
					
					SSP.Bus.request(url, callback);
				}
				else
				{
					suggest.innerHTML = '';
					suggest.style.display = '';
				}
			}
			,
			ftreeSuggestClick: function(event)
			{
				if(!event.isLeft)
					return true;
				
				var target = event.target;
				
				if(target.tagName === 'A')
				{
					var suggest = target.parentNode;
					var id = suggest.id.split('_');
					var aid = id[2];
					var number = SSP.DOM.byId('a_' + aid);
					
					var stack = SSP.DOM.byId('input_stack_' + aid);
					var clean = SSP.DOM.byId('input_stack_clean_' + aid);
					
					var exists = false;
					var value = target.innerText || target.textContent;
					var length = stack.childNodes.length;
					
					if(!length)
						clean.style.display = 'block';
					else
						for(var i = 0; i < length; i++)
						{
							if(stack.childNodes[i].firstChild.value === value)
							{
								exists = true;
								break;
							}
						}
					
					if(!exists)
					{
						var mark = SSP.DOM.create('DIV');
						var input = SSP.DOM.create('INPUT', {type: 'hidden', value: value, name: 'a_' + aid + '[]'});
						
						mark.appendChild(input);
						mark.innerHTML += value;
						
						stack.appendChild(mark);
					}
					
					suggest.innerHTML = '';
					suggest.style.display = '';
					number.value = App.Its.Handler.ftreeSuggestValues[aid] = '';
				}
			}
			,
			cleanAllMarks: function()
			{
				var stacks = SSP.DOM.byClass('input_stack');
				
				for(var i = 0; i < stacks.length; i++)
				{
					var id = stacks[i].id.split('_');
					var aid = id[2];
					
					var clean = SSP.DOM.byId('input_stack_clean_' + aid);
					clean.style.display = '';
					
					stacks[i].innerHTML = '';
				}
				
				return true;
			}
			,
			searchClick: function(event)
			{
				if(!event.isLeft)
					return true;
				
				var target = event.target;
				
				if(target.tagName !== 'INPUT')
				{
					if(target.tagName === 'LI'
					&& (SSP.DOM.hasClass(target, 'collapsed') || SSP.DOM.hasClass(target, 'expanded')))
						return SSP.Tree.handleClick(event);
					
					while(target.tagName !== 'A')
					{
						target = target.parentNode;
						
						if(!target)
							return true;
					}
				}
				
				if(target.tagName === 'A' && (target.protocol === 'http:' || target.protocol === 'https:'))
				{
					var chain = SSP.DOM.getChain(target, true);
					
					if(SSP.DOM.hasClass(target, 'search_link') || SSP.DOM.hasClass(target, 'search_link_grouped') || SSP.DOM.hasClass(target, 'search_link_child'))
						App.Its.Router.switchSearchUrl(target);
					else if(chain[1] && chain[1].tagName === 'LI' && chain[1].id.indexOf('search_') === 0)
						App.Its.Router.switchSearchUrl(chain[1]);
					else
					{
						for(var i = 0; i < chain.length; i++)
							if(SSP.DOM.hasClass(chain[i], 'recommendation'))
							{
								var label = chain[i].getElementsByTagName('STRONG')[0];
								
								SSP.Bus.statEvent('Search', 'Recommendation', label ? label.innerHTML : '');
								
								App.Its.Router.unsetSearchUrl();
								
								return true;
							}
							else if(chain[i].id === 'l_center')
								return true;
					}
				}
				else if(target.tagName === 'INPUT' && SSP.DOM.hasClass(target, 'basket_all'))
					SSP.Form.checkAll.call(target, 'basket[]');
				
				return true;
			}
			,
			toggleHighlight: function(on)
			{
				var highlight = SSP.Widget('w_search_highlight');
				
				if(on)
					var css = App.Its.Handler.highlightCssOn;
				else
					var css = App.Its.Handler.highlightCssOff;
				
				highlight.setClass('w ' + (on ? 'up' : 'down'));
				
				App.Its.Handler.setDocStyle(css);
			}
			,
			searchHighlightClick: function(event)
			{
				var target = event.target || event.srcElement;
				
				if(target.tagName !== 'A')
					target = target.parentNode;
				
				var highlight = SSP.Widget('w_search_highlight');
				
				if(highlight.hasClass('up'))
				{
					if(target.id === 'search_lamp')
						return App.Its.Handler.toggleHighlight(false);
					else
					{
						App.Its.Handler.docScrolled = true;
						
						var backward = target.id === 'search_hl_prev';
						
						if(backward && !App.Its.Handler.currentHighlight
						|| !backward && App.Its.Handler.currentHighlight === App.Its.Handler.highlights.length - 1)
						{
							App.Its.Handler.scrollDoc(App.Its.Handler.highlights[App.Its.Handler.currentHighlight], false, true);
							return;
						}
						
						var nextHighlight;
						var nextHighlightIndex = backward ? App.Its.Handler.currentHighlight - 1 : App.Its.Handler.currentHighlight + 1;
						
						while(App.Its.Handler.highlights[nextHighlightIndex])
							if(SSP.DOM.isVisible(App.Its.Handler.highlights[nextHighlightIndex]))
							{
								nextHighlight = App.Its.Handler.highlights[nextHighlightIndex];
								break;
							}
							else if(backward)
								nextHighlightIndex--;
							else
								nextHighlightIndex++;
						
						if(nextHighlight)
						{
							var currentHighlight = App.Its.Handler.highlights[App.Its.Handler.currentHighlight];
							
							if(currentHighlight)
								SSP.DOM.removeClass(currentHighlight, 'active');
							
							App.Its.Handler.currentHighlight = nextHighlightIndex;
							
							SSP.DOM.addClass(nextHighlight, 'active');
							App.Its.Handler.scrollDoc(nextHighlight, false, true);
						}
					}
				}
				else if(target.id === 'search_lamp' && App.Its.Handler.highlights.length)
					App.Its.Handler.toggleHighlight(true);
			}
			,
			likeClick: function(event)
			{
				var widget = SSP.Widget('w_review_likelink');
				
				var dbNick = widget.getData('dbnick');
				var docId = widget.getData('doc_id');
				var tabId = widget.getData('tab_id');
				
				var url = SSP.Bus.appPath + 'review/like/' + dbNick + '/' + docId + '/' + tabId + '.json';
				
				var data = {};
				
				if(event.target.tagName === 'A')
				{
					var likedClass = 'liked-by-me';
					var button = event.target;
					
					if(SSP.DOM.hasClass(button, likedClass))
						data.like = -1;
					else
						data.like = 1;
				}
				else
					return;
				
				SSP.Bus.request(
					url,
					{
						success: function(data)
						{
							var total = SSP.DOM.byId('like_total');
							
							var current = total.innerHTML;
							current = SSP.Number.parseInt(current);
							current += data.like;
							
							if(data.like > 0)
								SSP.DOM.addClass(button, likedClass);
							else
								SSP.DOM.removeClass(button, likedClass);
							
							if(current < 0)
								current = 0;
							
							var zeroClass = 'zero';
							
							if(current)
								SSP.DOM.removeClass(total, zeroClass);
							else
								SSP.DOM.addClass(total, zeroClass);
							
							total.innerHTML = current;
						},
						error: function()
						{
							
						}
					},
					data,
					'POST'
				);
			}
			,
			favoriteClick: function(event)
			{
				var widget = SSP.Widget('w_favorite_link');
				
				var dbNick = widget.getData('dbnick');
				var docId = widget.getData('doc_id');
				
				var url = SSP.Bus.appPath + 'favorite/fave/' + dbNick + '/' + docId + '.json';
				
				var data = {};
				
				if(event.target.tagName === 'A')
				{
					var favedClass = 'faved-by-me';
					var button = event.target;
					
					if(SSP.DOM.hasClass(button, favedClass))
						data.fave = -1;
					else
						data.fave = 1;
				}
				else
					return;
				
				SSP.Bus.request(
					url,
					{
						success: function(data)
						{
							if(data.fave > 0)
								SSP.DOM.addClass(button, favedClass);
							else
								SSP.DOM.removeClass(button, favedClass);
						},
						error: function()
						{
							
						}
					},
					data,
					'POST'
				);
			}
			,
			tocButtonClick: (function(event)
			{
				if(!event.isLeft)
					return true;
				
				if(!window.TEMPLATE_NEW)
				{
					if(!this._hidden)
					{
						SSP.Widget('l_toc').setStyle('display', 'none');
						SSP.Widget('l_doc_frame').setStyle('width', '99.5%');
						SSP.DOM.addClass(this, 'toc_hidden');
						this._hidden = true;
					}
					else
					{
						SSP.Widget('l_toc').setStyle('display', '');
						SSP.Widget('l_doc_frame').setStyle('width', '69.3%');
						SSP.DOM.removeClass(this, 'toc_hidden');
						this._hidden = false;
					}
				}
				
				if(App.Its.Handler.listeningResizeForTouch)
					App.Its.Handler.adjustDocFrameForTouch();
			})
			,
			backLinkClick: (function(event)
			{
				history.back();
			})
			,
			printButtonClick: (function(event)
			{
				var url = SSP.String.parseUrl(this).toString();
				var name = 'print';
				var params = 'width=1000,height=700,toolbar=no,location=no,status=no,copyhistory=no,menubar=yes,scrollbars=yes';
				
				SSP.Bus.cancel(event);
				
				try
				{
					window.open(url, name, params);
					
					return false;
				}
				catch(e)
				{
					return true;
				}
			})
			,
			shareClick: function(event)
			{
				if(!event.isLeft && !event.isMiddle)
					return true;
				
				var target = event.target;
				
				if(target.tagName === 'A' && SSP.DOM.hasClass(target, 'share'))
				{
					var url = target.getAttribute('href');
					
					if(App.Its.Router.current)
						var context = App.Its.Router.current.newMatch.context;
					else
						var context = App.Its.Router.matchCached(window.location.toString(), true).context;
					
					SSP.Bus.cancel(event);
					
					if(context.attr[0] && App.Its.Router.hasDocId(context))
					{
						var data =
						{
							dbnick: context.nick
							,docId: context.subj
							,tabId: context.attr[0]
							,service: target.id.split('_')[1]
						};
						
						var callback = data.service === 'fb' ? App.Its.Handler.shareProceed(url) : null;
						
						SSP.Bus.request(SSP.Bus.appPath + 'sharestat.json', callback, data, 'POST');
						
						if(callback)
							return false;
					}
					
					url = App.Its.Handler.replaceShareUrl(url);
					App.Its.Handler.doShare(url);
					
					return false;
				}
			}
			,
			replaceShareUrl: function(url)
			{
				return url.replace(/=http%3A[^&]+/, '=' + encodeURIComponent(App.Its.Router.toInternal(SSP.Bus.windowLocation())));
			}
			,
			shareProceed: function(url)
			{
				return function(data)
				{
					if(data.url)
						url = url.replace(/=http%3A[^&]+/, '=' + encodeURIComponent(data.url));
					else
						url = App.Its.Handler.replaceShareUrl(url);
					
					App.Its.Handler.doShare(url);
				};
			}
			,
			doShare: function(url)
			{
				window.open(url, '_blank');
			}
			,
			navTreeClick: (function(event)
			{
				var target = event.target;
				
				if(target.tagName === 'A')
				{
					if(SSP.Browser.hasTouchScreen)
						setTimeout(function(){target.blur();}, SSP.DOM.timeoutShort);
				}
				
				return true;
			})
			,
			navListClick: (function(event)
			{
				if(!event.isLeft)
					return true;
				
				if(event.target.tagName === 'A')
					SSP.Widget('w_metadata_navlist').select(event.target.parentNode.id);
				
				return true;
			})
			,
			navListReload: (function()
			{
				if(App.Its.Router.current
				&& App.Its.Router.current.oldMatch.context)
				{
					var navList = SSP.Widget('w_metadata_navlist');
					var current = App.Its.Router.current;
					
					if(App.Its.Router.hasDocId(current.oldMatch.context))
						navList.select('nav_d' + current.oldMatch.context.subj);
					else if(current.oldMatch.context.mode === 'bookmark' && App.Its.Handler.currentDocId)
						navList.select('nav_d' + App.Its.Handler.currentDocId);
					else if(SSP.Bus.isHistory(current.event)
					&& current.oldMatch.context.mode === 'browse'
					&& (current.newMatch.context.mode === 'browse' || !current.newMatch.context.mode && current.route.name === 'mode')
					&& current.oldMatch.context.attr
					&& current.oldMatch.context.attr.length > 1)
					{
						var id = 'nav_f' + current.oldMatch.context.attr[current.oldMatch.context.attr.length - 1];
						
						if(SSP.DOM.byId(id))
							navList.select(id);
						else if(navList.hasScroll())
							navList.scroll();
					}
					else
					{
						navList.unselect();
						
						if(navList.hasScroll())
							navList.scroll();
					}
				}
			})
			,
			docFrameClick: (function(event)
			{
				if(!event.isLeft || event.ctrlKey)
					return true;
				
				try
				{
					App.User.syncTemplateCookie();
				}
				catch(e)
				{
					
				}
				
				var target = event.target;
				var contentDocument = SSP.DOM.getDocument(this);
				
				var popup = SSP.Widget('popup');
				if(popup.node.parentNode.style.display === 'block')
				{
					popup.clean();
					popup.node.className = '';
					SSP.Widget('w_popup').hide();
				}
				
				if(target.tagName !== 'A')
				{
					var parents = SSP.DOM.getChain(target, true);
					
					while(parents.length)
					{
						if(parents[0].tagName === 'A')
						{
							target = parents[0];
							break;
						}
						else
							parents.shift();
					}
				}
				
				if(target.tagName === 'A'
				&& target.getAttribute('href') !== null)
				{
					if(typeof target.onclick === 'function' || SSP.DOM.hasClass(target, 'attachment'))
						return true;
					
					var hash = SSP.String.decodeURIComponent(SSP.String.trimHash(target.hash));
					var href = target.getAttribute('href').split('#');
					
					if(href[0])
					{
						if(href[0].match(/^https?:\/\//) && target.hostname.match(/(^|\.)(its\.1c\.([a-z]{2})|solar\.local)$/))
							href = target.pathname;
						else
							href = href[0];
					}
					else
						href = '';
					
					if(!hash && !href)
					{
						SSP.Bus.cancel(event);
						return false;
					}
					
					target.blur();
					
					var pathname;
					
					if(href)
					{
						pathname = target.pathname;
						if(pathname.indexOf('/') !== 0)
							pathname = '/' + pathname;
					}
					
					if(!target.target || target.target === '_self' || target.target === 'w_metadata_doc_frame'
					|| target.target === '_top' && pathname && pathname.indexOf('/db/content/') === 0)
					{
						if(href && SSP.String.ltrim(SSP.String.decodeURIComponent(href), '/') === SSP.String.ltrim(SSP.String.decodeURIComponent(contentDocument.location.pathname), '/'))
							href = '';
						
						if(href
						&& (pathname.indexOf(SSP.Bus.appPath) === 0 || pathname.indexOf('/db/') === 0))
						{
							var href = pathname.split('/');
							href.shift();
							
							if(href[1] === 'content')
							{
								href[1] = href[2]; // dbnick
								href[2] = 'content';
								href.shift();
								
								target.target = '_top';
								target.href = SSP.Bus.appPath + href.join('/') + '_';
								
								if(hash)
									event.receiver = App.Its.Router.receiveAnchor(hash);
							}
						}
						else
						{
							var anchor = SSP.DOM.byName(hash, contentDocument)[0] || SSP.DOM.byId(hash, contentDocument);
							
							if(!anchor && hash === '_top')
								anchor = SSP.DOM.getContainer(contentDocument);
							
							var location = window.location.toString();
							location = location.replace(App.Its.Router.regexpPosition, '');
							
							App.Its.Router.trackDocPosition(App.Its.Handler.anchors.length <= 1);
							
							if(App.Its.Handler.anchors.length <= 1)
								SSP.Bus.track('', location);
							else
							{
								if(location.indexOf('#') === -1)
									location = App.Its.Router.toCanonical(location);
								
								location = location.split('#');
								var params = location[1].split(':');
								
								if(typeof params[2] === 'undefined')
									params[2] = '1'; // tab id
								
								params[3] = hash;
								
								SSP.Bus.track('', location[0] + '#' + params.join(':'));
							}
							
							App.Its.Handler.scrollDoc(anchor);
							
							SSP.Bus.cancel(event);
							
							return false;
						}
					}
					else if(target.target === '_top' && App.Its.Router.matchCanonical(href + '#' + hash))
					{
						App.Its.Router.trackDocPosition();
						
						SSP.Bus.cancel(event);
						SSP.Bus.navigate(href + '#' + hash);
						
						return;
					}
					else if(SSP.DOM.hasClass(target, 'share'))
						return App.Its.Handler.shareClick.call(contentDocument, event);
					else if(SSP.DOM.hasClass(target, 'video'))
					{
						SSP.Bus.cancel(event);
						var url = href.indexOf('/video/') === 0 ? href : '/video/video/show_?path=' + encodeURI(href);
						SSP.DOM.addClass(App.Popup.layout.node, 'video');
						App.Popup.open(url);
					}
					else if(SSP.DOM.hasClass(target, 'image') && popup.node)
					{
						SSP.Bus.cancel(event);
						popup.src('');
						popup.html('');
						SSP.Widget('popup_title').html('');
						
						var img = SSP.DOM.create('IMG', {src: href});
						img.style.display = 'block';
						img.style.margin = '0px auto';
						
						popup.node.appendChild(img);
						
						SSP.Widget('w_popup').show('block');
						SSP.Widget('w_popup').removeClass('loading');
						popup.removeClass('loading');
						popup.node.focus();
						
						return false;
					}
					
					return SSP.Bus.hijack(event);
				}
			})
			,
			docFrameScroll: (function(event)
			{
				if(App.Its.Handler.docScrolled === false)
					App.Its.Handler.docScrolled = true;
				
				if(App.Its.Handler.tracking)
				{
					App.Its.Handler.tracking = false;
					return true;
				}
				
				if(App.Its.Handler.docScrolled)
				{
					var slowBrowser = SSP.Browser.IE || SSP.Browser.Android || SSP.Browser.IOS || SSP.Browser.Firefox && SSP.Browser.Firefox < 57;
					
					if(typeof App.Its.Handler.delayedSync !== 'undefined')
					{
						clearTimeout(App.Its.Handler.delayedSync);
						var timeout = slowBrowser ? SSP.DOM.timeoutShort : SSP.DOM.timeoutTiny;
					}
					else
						var timeout = slowBrowser ? SSP.DOM.timeoutLong : SSP.DOM.timeoutMedium;
					
					App.Its.Handler.delayedSync = setTimeout(App.Its.Handler.syncToc, timeout);
				}
			})
			,
			anchors: []
			,
			highlights: []
			,
			highlightCssOn: window.TEMPLATE_NEW ? '' : '.iss_sch_hl,mark{background-color:cyan!important}.iss_sch_hl.active,mark.active{background-color:yellow!important}'
			,
			highlightCssOff: window.TEMPLATE_NEW ? '.iss_sch_hl,mark{background-color:transparent!important;padding:0}' : '.iss_sch_hl,mark{background-color:transparent!important}'
			,
			tracking: true
			,
			currentDocStyle: undefined
			,
			currentDocId: undefined
			,
			currentAnchor: undefined
			,
			currentHighlight: undefined
			,
			currentPosition: 0
			,
			delayedSync: undefined
			,
			getDocStyle: (function()
			{
				var currentDoc = App.Its.Handler.getDoc();
				var style = SSP.DOM.byId('doc_style', currentDoc);
				
				if(!style)
				{
					style = SSP.DOM.create('STYLE', {id: 'doc_style', type: 'text/css'}, currentDoc);
					var head = currentDoc.head || currentDoc.getElementsByTagName('HEAD')[0];
					head.appendChild(style);
				}
				
				return style;
			})
			,
			setDocStyle: (function(css)
			{
				var style = App.Its.Handler.getDocStyle();
				
				if(style.styleSheet)
					style.styleSheet.cssText = css;
				else
				{
					while(style.firstChild)
						style.removeChild(style.firstChild);
					
					style.appendChild(App.Its.Handler.getDoc().createTextNode(css));
				}
				
				return style;
			})
			,
			normalizeToc: (function(a)
			{
				if(!a || a.canonical)
					return;
				
				var tocId = a.parentNode.id;
				
				var href = a.getAttribute('href').replace(/^https?:\/\/[^\/]+\//, '/');
				
				if(href.indexOf('#') !== 0 && href.indexOf('/') !== 0)
					href = '/' + href;
				
				var contentRoot = '/db/content';
				
				if(href.indexOf('#') === 0 || href.indexOf(contentRoot) === 0)
				{
					a.originalHref = href;
					
					tocId = tocId.split('_');
					tocId.shift();
					var docId = tocId.shift();
					var hash = tocId.join('_');
					
					var match = App.Its.Router.matchCached(window.location.toString(), true);
					
					if(match && match.context && match.context.nick)
					{
						a.canonical = true;
						
						var book = false;
						
						if(!match.context.mode || match.context.mode === 'bookmark')
						{
							var widget = SSP.Widget('w_metadata_toc');
							
							if(SSP.DOM.hasClass(widget.node.firstChild, 'tid'))
								book = widget.getData('book');
						}
						
						if(book)
							a.href = [SSP.Bus.appPath, match.context.nick, '/bookmark/', book, '/', hash.toUpperCase()].join('');
						else
							a.href = [SSP.Bus.appPath, match.context.nick, '/content/', docId, '/1', (hash ? '/' + hash : '')].join('');
					}
				}
				else
					a.canonical = true;
			})
			,
			tocMouseOver: (function(event)
			{
				if(!SSP.Browser.hasTouchScreen)
				{
					var target = event.target;
					
					if(target.tagName === 'A' && !target.canonical)
						App.Its.Handler.normalizeToc(target);
				}
				
				return true;
			})
			,
			tocClick: (function(event)
			{
				var target = event.target;
				
				if(target.tagName === 'A')
				{
					if(SSP.Browser.hasTouchScreen)
						setTimeout(function(){target.blur();}, SSP.DOM.timeoutShort);
					
					if(!target.canonical)
						App.Its.Handler.normalizeToc(target);
				}
				
				return true;
			})
			,
			docScrolled: null
			,
			docFrameDOMContentLoaded: (function()
			{
				try
				{
					SSP.Scroll.mimicByClass('mimic_scroll');
				}
				catch(e)
				{
					//debugger;
				}
				
				if(window.TEMPLATE_NEW)
				{
					SSP.DOM.removeClass(SSP.DOM.byId('top_menu'), 'show-menu');
					App.Sidebar.setMenu(false, false);
				}
				
				var match = App.Its.Router.matchCached(window.location.toString(), true);
				var iframe = SSP.Widget('w_metadata_doc_frame');
				
				if(!match || !match.context.mode || match.context.mode === 'content' || match.context.mode === 'bookmark')
					SSP.Widget('l_content').show();
				
				var phantom = false;
				var toc = SSP.Widget('w_metadata_toc');
				var toc_button = SSP.Widget('w_metadata_toc_button');
				var highlight = SSP.Widget('w_search_highlight');
				var doHighlight = highlight.hasClass('up');
				var tocVisible = SSP.DOM.isVisible(toc_button.node);
				
				try
				{
					var contentDocument = iframe.node.contentWindow.document;
					var src = contentDocument.location.pathname;
					
					if(src !== 'about:blank')
					{
						if(src.charAt(0) !== '/')
							src = '/' + src;
						
						if(!src.match(/^(\/[a-z]{2})?\/db\//))
							phantom = true;
					}
				}
				catch(e)
				{
					phantom = true;
				}
				
				if(phantom)
				{
					iframe.node.contentWindow.location.replace(iframe.node.src);
					return;
				}
				
				if(!iframe.node.contentWindow.document
				|| !iframe.node.contentWindow.document.body)
				{
					if(typeof iframe.waitDoc === 'undefined')
					{
						var waitDoc = (function(){return function()
						{
							var iframe = SSP.Widget('w_metadata_doc_frame');
							
							if(typeof iframe.waitDoc !== 'undefined'
							&& iframe.node.contentWindow.document
							&& iframe.node.contentWindow.document.body)
							{
								clearInterval(iframe.waitDoc);
								delete iframe.waitDoc;
								
								App.Its.Handler.docFrameDOMContentLoaded.call(iframe.node.contentWindow);
							}
						}
						;})();
						
						iframe.waitDoc = setInterval(waitDoc, SSP.DOM.timeoutShort);
					}
					
					return;
				}
				
				SSP.DOM.requestAnimationFrame(function()
				{
					iframe.indicate(false);
				});
				
				try
				{
					var h1 = SSP.DOM.byTag('H1', contentDocument);
					
					if(h1.length === 1 && h1[0].innerHTML === 'Forbidden' || contentDocument.body.children.length === 0)
					{
						var location = iframe.node.contentWindow.location.toString();
						
						if(location.indexOf('.HTM') === -1 && !iframe.node.forbiddenFixed)
						{
							iframe.node.forbiddenFixed = true;
							iframe.node.contentWindow.location.replace(location.replace('.htm', '.HTM'));
						}
						
						return;
					}
				}
				catch(e)
				{
					
				}
				
				if(SSP.Bus.canUseStat())
					iframe.node.contentWindow.onerror = SSP.Bus.statError;
				
				if(!contentDocument.listeningUnload)
				{
					contentDocument.listeningUnload = true;
					try
					{
						SSP.DOM.listen(SSP.DOM.getWindow(contentDocument), 'unload', App.Its.Handler.docFrameUnload);
					}
					catch(e)
					{
						contentDocument.listeningUnload = false;
					}
				}
				
				if(doHighlight)
				{
					App.Its.Handler.doHighlight();
				}
				else
				{
					App.Its.Handler.highlights = [];
					App.Its.Handler.currentHighlight = undefined;
				}
				
				App.Its.Handler.toggleHighlight(doHighlight);
				
				if(tocVisible && (toc.loading || !toc.node.firstChild))
				{
					if(typeof iframe.waitToc === 'undefined')
					{
						var waitToc = (function(){return function()
						{
							var toc = SSP.Widget('w_metadata_toc');
							var iframe = SSP.Widget('w_metadata_doc_frame');
							
							if(typeof iframe.waitToc !== 'undefined'
							&& !toc.loading
							&& toc.node.firstChild
							&& iframe.node.contentWindow.document
							&& iframe.node.contentWindow.document.body)
							{
								clearInterval(iframe.waitToc);
								delete iframe.waitToc;
								
								if(typeof iframe.waitDoc === 'undefined')
								{
									clearInterval(iframe.waitDoc);
									delete iframe.waitDoc;
								}
								
								toc.indicate(false);
								
								App.Its.Handler.docFrameDOMContentLoaded.call(iframe.node.contentWindow);
							}
						}
						;}());
						
						iframe.waitToc = setInterval(waitToc, SSP.DOM.timeoutShort);
					}
					
					return;
				}
				else
					toc.indicate(false);
				
				if(tocVisible && !toc.node.firstChild.canonical)
					App.Its.Handler.normalizeToc(toc.node.getElementsByTagName('A')[0]);
				
				App.Its.Router.focusIframe(iframe);
				
				var title = SSP.Widget('w_metadata_doc_title').node.firstChild;
				
				if(!title.title)
				{
					title.title = contentDocument.title;
					title.innerHTML = SSP.String.escapeHtml(contentDocument.title);
				}
				
				var currentHash;
				
				if(match && match.context)
				{
					if(match.context.mode === 'content' && match.context.attr[1] && App.Its.Router.hasDocId(match.context))
						currentHash = match.context.attr[1].toLowerCase();
					else if(match.context.mode === 'bookmark' && match.context.attr[0])
						currentHash = match.context.attr[0].toUpperCase();
				}
				
				var explicitHash = false;
				
				if(currentHash && !doHighlight)
				{
					var src = iframe.src().split('#');
					
					if(src.length === 1 || !src[1].length)
					{
						src.push(currentHash);
						App.Its.Handler.scrollDoc(currentHash);
					}
					else
					{
						explicitHash = src[1];
						App.Its.Handler.tracking = true;
						App.Its.Handler.scrollDoc(explicitHash);
						App.Its.Handler.tracking = false;
					}
				}
				
				if(!contentDocument.listeningPopup && App.Popup)
				{
					App.Popup.init(contentDocument);
					contentDocument.listeningPopup = true;
				}
				
				if(!contentDocument.listeningClick)
				{
					contentDocument.listeningClick = true;
					try
					{
						SSP.DOM.listen(contentDocument.body, 'click', App.Its.Handler.docFrameClick, true);
					}
					catch(e)
					{
						contentDocument.listeningClick = false;
					}
				}
				
				if(!contentDocument.listeningTouch)
				{
					contentDocument.listeningTouch = true;
					try
					{
						if(SSP.Browser.IOS || SSP.Bus.cookie('TOUCH_EMUL'))
						{
							var contentWindow = iframe.node.contentWindow;
							
							contentWindow.mouseX = 0;
							contentWindow.mouseY = 0;
							
							if(SSP.Browser.IOS)
							{
								SSP.DOM.listen(contentDocument.body, 'touchstart', App.Its.Handler.docFrameTouchStart);
								SSP.DOM.listen(contentDocument.body, 'touchmove', App.Its.Handler.docFrameTouchMove);
							}
							else
							{
								SSP.DOM.listen(contentDocument.body, 'mousedown', App.Its.Handler.docFrameMouseStart);
								SSP.DOM.listen(contentDocument.body, 'mouseup', App.Its.Handler.docFrameMouseStop);
							}
							
							App.Its.Handler.adjustDocFrameForTouch(true);
							App.Its.Handler.listeningScrollForTouch = true;
							
							if(!App.Its.Handler.listeningResizeForTouch)
							{
								SSP.DOM.listen(window, 'resize', App.Its.Handler.adjustDocFrameForTouch);
								App.Its.Handler.listeningResizeForTouch = true;
							}
						}
					}
					catch(e)
					{
						contentDocument.listeningTouch = false;
					}
				}
				
				if(match && match.context
				&& (match.context.nick === 'calchlp' || match.context.nick === 'calcip' || match.context.nick === 'finecalc'))
					SSP.DOM.simulateDocumentAll(contentDocument);
				
				App.Its.Handler.anchors = [];
				App.Its.Handler.currentDocId = undefined;
				App.Its.Handler.currentAnchor = undefined;
				App.Its.Handler.currentPosition = 0;
				
				App.Its.Handler.tracking = true;
				
				var position = match && match.context && match.context.offs ? match.context.offs : undefined;
				
				App.Its.Handler.docScrolled = null;
				
				setTimeout((function(){return function(){
					if(App.Its.Handler.docScrolled === null)
						App.Its.Handler.docScrolled = false;
				}})(), contentDocument.readyState === 'complete' ? 0 : SSP.DOM.timeoutShort);
				
				var updatePosition = false;
				
				if(tocVisible)
				{
					var docId;
					var bookId;
					var tocSub;
					var tocSubId;
					
					App.Its.Handler.currentDocId = SSP.Widget('l_doc_frame').getData('doc');
					
					try
					{
						var tocMixed = SSP.DOM.hasClass(toc.node.firstChild, 'mixed');
						var tocTid = SSP.DOM.hasClass(toc.node.firstChild, 'tid');
					}
					catch(e)
					{
						
					}
					
					if(match && match.context && match.context.mode === 'content' && App.Its.Router.hasDocId(match.context))
					{
						docId = match.context.subj;
						tocSub = SSP.DOM.byId('toc_' + docId);
						
						if(!tocSub)
						{
							docId = match.context.subj.split(',')[0];
							tocSub = SSP.DOM.byId('toc_' + docId);
						}
					}
					else
					{
						tocSub = toc.selected && (!match || !match.context || match.context.mode !== 'bookmark')
							   ? SSP.DOM.byId(toc.selected)
							   : toc.node.firstChild.firstChild;
						
						docId = tocSub.id.split('_')[1];
						
						if(match && match.context && match.context.mode === 'bookmark')
							bookId = match.context.subj;
						
						if(tocMixed && tocTid && App.Its.Handler.currentDocId && docId !== App.Its.Handler.currentDocId)
						{
							docId = App.Its.Handler.currentDocId;
							var exact = 'toc_' + docId;
							var prefix = exact + '_';
							var children = tocSub.getElementsByTagName('LI');
							
							for(var i = 0; i < children.length; i++)
								if(children[i].id === exact || children[i].id.indexOf(prefix) === 0)
								{
									tocSub = children[i];
									break;
								}
						}
					}
					
					if(tocSub)
					{
						if(tocMixed)
							tocSubId = tocSub.id;
						
						App.Its.Handler.currentAnchor = 0;
						
						var tocAnchors = tocSub.getElementsByTagName('A');
						var href, hash, hashInToc = false;
						
						var firstHash = bookId && tocAnchors.length ? SSP.String.decodeURIComponent(tocAnchors[0].pathname.split('/').pop()) : '';
						
						App.Its.Handler.anchors.push({hash: firstHash, anchor: contentDocument.body});
						
						for(var i = 1; i < tocAnchors.length; i++)
						{
							if(tocMixed && !tocTid)
							{
								var parentId = tocAnchors[i].parentNode.id;
								
								if(parentId.indexOf(tocSubId) === -1
								|| parentId !== tocSubId && parentId.indexOf(tocSubId + '_') === -1)
									continue;
							}
							
							if(tocAnchors[i].canonical
							|| !tocAnchors[i].hash
							|| tocAnchors[i].hash === '#')
							{
								href = tocAnchors[i].pathname.split('/');
								hash = SSP.String.decodeURIComponent(href.pop());
							}
							else
								hash = SSP.String.decodeURIComponent(tocAnchors[i].hash);
							
							if(hash.charAt(0) === '#')
								hash = hash.substring(1);
							
							App.Its.Handler.anchors.push({hash: hash, anchor: undefined});
							
							if(hash === currentHash)
							{
								App.Its.Handler.currentAnchor = i;
								tocSub = tocAnchors[i].parentNode;
								hashInToc = true;
							}
						}
						
						if(!doHighlight
						|| !App.Its.Handler.highlights.length
						|| App.Its.Handler.anchors.length === 1
						|| tocMixed && (!explicitHash || explicitHash === '_top'))
						{
							if(toc.selected !== tocSub.id)
								toc.select(tocSub.id);
						}
						
						if(App.Its.Handler.anchors.length > 1)
						{
							if(tocMixed && explicitHash && !SSP.Browser.IE && typeof position === 'undefined'
							|| doHighlight && App.Its.Handler.highlights.length)
							{
								App.Its.Handler.currentPosition = 0;
								App.Its.Handler.syncToc(doHighlight || !explicitHash || explicitHash === '_top');
							}
							else
							{
								if(!explicitHash || explicitHash === '_top')
									App.Its.Handler.currentPosition = 0;
								else
									updatePosition = true;
								
								if(typeof position !== 'number' && explicitHash && explicitHash !== '_top' && !hashInToc)
								{
									App.Its.Handler.syncDoc(currentHash, position);
									App.Its.Handler.currentPosition = App.Its.Handler.getDocContainer().scrollTop;
									updatePosition = false;
									
									App.Its.Handler.syncToc(match && match.context && match.context.mode === 'bookmark');
								}
								else if(position)
									App.Its.Handler.syncDoc(currentHash, position);
								else
									SSP.DOM.requestAnimationFrame(function()
									{
										App.Its.Handler.syncDoc(currentHash, position);
									});
							}
							
							App.Its.Handler.tracking = false;
							
							if(!App.Its.Handler.listeningScrollForTouch && !contentDocument.listeningScroll)
							{
								contentDocument.listeningScroll = true;
								try
								{
									SSP.DOM.listen(iframe.node.contentWindow, 'scroll', App.Its.Handler.docFrameScroll);
								}
								catch(e)
								{
									contentDocument.listeningScroll = false;
								}
							}
						}
						else
						{
							if(!explicitHash || explicitHash === '_top')
								App.Its.Handler.currentPosition = 0;
							else
								updatePosition = true;
						}
					}
				}
				
				setTimeout(
					(function(){return function()
					{
						var callback = function()
						{
							if(App.Its.Handler.docScrolled === false)
							{
								App.Its.Handler.docScrolled = true;
								SSP.DOM.cancel(App.Its.Handler.getWindow(), 'scroll', callback);
							}
						};
						
						if(!App.Its.Handler.docScrolled)
						{
							if(typeof position === 'number')
								App.Its.Handler.syncDoc(null, position);
							
							SSP.DOM.listen(App.Its.Handler.getWindow(), 'scroll', callback);
						}
					}
					})(position),
					contentDocument.readyState === 'complete' && typeof position === 'number' ? 0 : SSP.DOM.timeoutShort
				);
				
				if(typeof position === 'number')
					App.Its.Handler.syncDoc(null, position);
				
				var imgs = SSP.DOM.byTag('IMG', contentDocument);
				var imgsLength = imgs.length;
				var hasResizableImages = false;
				
				if(window.TEMPLATE_NEW
				&& imgsLength)
				{
					for(var i = 0; i < imgsLength; i++)
					{
						var img = imgs[i];
						var imgParent = img.parentNode;
						
						if(imgParent.tagName === 'P'
						&& (imgParent.childNodes.length === 1 || SSP.DOM.hasClass(imgParent, 'pic_image') || SSP.DOM.hasClass(imgParent, 'Picture'))
						&& !SSP.DOM.hasClass(img, 'enlargeble'))
						{
							var hasResizableImages = true;
							SSP.DOM.addClass(img, 'enlargeble');
							img.addEventListener('click', App.Its.Handler.resizableImageClick, false);
						}
					}
					
					if(!SSP.Browser.hasTouchScreen)
					{
						if(hasResizableImages)
							SSP.DOM.listen(iframe.node.contentWindow, 'resize', App.Its.Handler.adjustResizableImagesCursor, false, true);
						
						SSP.DOM.trigger(iframe.node, 'resize');
						SSP.DOM.trigger(iframe.node.contentWindow, 'resize');
					}
				}
				
				var supportsLazyLoad = 'loading' in HTMLImageElement.prototype;
				
				try
				{
					var supportsScrollAnchoring = window.CSS ? CSS.supports('overflow-anchor: auto') : false;
				}
				catch(e)
				{
					var supportsScrollAnchoring = false;
				}
				
				if(supportsLazyLoad || !supportsScrollAnchoring)
				{
					var imgOnLoad = (function(){return function()
					{
						if(!this.parentNode)
							return;
						
						var iframe = App.Its.Handler.getFrame();
						
						if(this.needsHeightAdjust)
						{
							var parentOffsetHeight = this.parentNode.offsetHeight;
							var heightDiff = parentOffsetHeight - this.parentNode.loadingHeight;
							
							if(heightDiff)
							{
								var adjustIfTrailingBlock = 0;
								
								if(!App.Its.Handler.docScrolled
								&& (typeof position === 'number' || explicitHash && explicitHash !== '_top'))
								{
									if(typeof position === 'number')
										App.Its.Handler.syncDoc(null, position);
									else if(explicitHash && explicitHash !== '_top')
									{
										var contentDocument = App.Its.Handler.getDoc();
										var scrollto = SSP.DOM.byName(explicitHash, contentDocument)[0] || SSP.DOM.byId(explicitHash, contentDocument);
										
										if(scrollto)
											SSP.DOM.scroll(scrollto, true, false, true);
									}
								}
								else if(heightDiff > 0)
								{
									var container = SSP.DOM.getContainer(iframe.contentWindow.document);
									
									var scrolledItem = SSP.DOM.getScrolledItemAndOffset(this);
									var offsetTop = scrolledItem.offsetTop;
									
									if(offsetTop < container.scrollTop
									|| container.scrollTop >= container.offsetHeight - container.clientHeight)
										container.scrollTop += heightDiff;
									else if(this.offsetHeight < container.clientHeight
									&& container.scrollTop >= container.offsetHeight - container.clientHeight - this.offsetHeight)
										adjustIfTrailingBlock = heightDiff
								}
								
								if(adjustIfTrailingBlock)
								{
									var parent = this.parentNode;
									
									while(parent.tagName !== 'BODY'
									&& !parent.nextElementSibling
									&& parent.parentNode)
										parent = parent.parentNode;
									
									if(parent.nextElementSibling)
										container.scrollTop += adjustIfTrailingBlock;
								}
								
								this.parentNode.loadingHeight = parentOffsetHeight;
							}
						}
						
						if(!SSP.Browser.hasTouchScreen)
						{
							SSP.DOM.trigger(iframe, 'resize');
							SSP.DOM.trigger(iframe.contentWindow, 'resize');
						}
					}
					})(explicitHash, position);
					
					for(var i = 0; i < imgsLength; i++)
					{
						var img = imgs[i];
						
						if(!img.complete)
						{
							if(!img.getAttribute('height')
							|| SSP.DOM.hasClass(img, 'enlargeble'))
							{
								img.needsHeightAdjust = true;
								img.parentNode.loadingHeight = img.parentNode.offsetHeight;
							}
							
							if(!SSP.Browser.hasTouchScreen
							|| img.needsHeightAdjust)
								img.onload = imgOnLoad;
						}
					}
				}
				
				setTimeout(
					(function(){return function()
					{
						try
						{
							if(updatePosition)
								App.Its.Handler.currentPosition = App.Its.Handler.getDocContainer().scrollTop;
							
							App.Its.Handler.syncToc(false);
						}
						catch(e)
						{
							
						}
						
						if(!App.Its.Handler.docScrolled)
						{
							try
							{
								if(doHighlight)
									App.Its.Handler.doHighlight();
								else
									App.Its.Handler.syncDoc(hash, position);
							}
							catch(e)
							{
								
							}
							
							if(App.Its.Handler.getDoc().readyState !== 'complete')
								setTimeout(
									function()
									{
										try
										{
											if(updatePosition)
												App.Its.Handler.currentPosition = App.Its.Handler.getDocContainer().scrollTop;
											
											App.Its.Handler.syncToc(false);
										}
										catch(e)
										{
											
										}
										
										if(!App.Its.Handler.docScrolled)
										{
											if(doHighlight)
												App.Its.Handler.doHighlight();
											else
												App.Its.Handler.syncDoc(hash, position);
										}
									},
									SSP.DOM.timeoutLong
								);
						}
					}
					})(hash, position, doHighlight, updatePosition),
					contentDocument.readyState === 'complete' ? 0 : SSP.DOM.timeoutMedium
				);
			})
			,
			docFrameUnload: (function()
			{
				App.Its.Handler.docScrolled = null;
				App.Its.Handler.currentPosition = 0;
				
				var iframe = SSP.Widget('w_metadata_doc_frame');
				
				if(iframe.node
				&& iframe.node.contentWindow
				&& iframe.node.contentWindow.document
				&& iframe.node.contentWindow.document.documentElement)
					iframe.node.contentWindow.document.documentElement.className = 'loading';
			})
			,
			doHighlight: function()
			{
				var doc = App.Its.Handler.getDoc();
				App.Its.Handler.currentHighlight = 0;
				
				if(!doc || !doc.body)
					App.Its.Handler.highlights = [];
				else
				{
					App.Its.Handler.highlights = SSP.DOM.byTag('mark', doc);
					
					if(!App.Its.Handler.highlights.length)
						App.Its.Handler.highlights = SSP.DOM.byClass('iss_sch_hl', doc);
				}
				
				var currentHighlight;
				var currentHighlightIndex = 0;
				
				while(App.Its.Handler.highlights[currentHighlightIndex])
					if(SSP.DOM.isVisible(App.Its.Handler.highlights[currentHighlightIndex]))
					{
						currentHighlight = App.Its.Handler.highlights[currentHighlightIndex];
						break;
					}
					else
						currentHighlightIndex++;
				
				if(currentHighlight)
				{
					App.Its.Handler.currentHighlight = currentHighlightIndex;
					
					SSP.DOM.addClass(currentHighlight, 'active');
					App.Its.Handler.scrollDoc(currentHighlight, false, true);
				}
			}
			,
			findAnchorNode: (function(name)
			{
				var iframe = SSP.Widget('w_metadata_doc_frame');
				var contentDocument = iframe.node.contentWindow.document;
				
				var anchorNode = SSP.DOM.byName(name, contentDocument)[0] || SSP.DOM.byId(name, contentDocument) || contentDocument.anchors.namedItem(name);
				
				if(anchorNode === null)
					anchorNode = SSP.DOM.byName(name.toLowerCase(), contentDocument)[0] || SSP.DOM.byId(name.toLowerCase(), contentDocument) || contentDocument.anchors.namedItem(name.toLowerCase());
				
				return anchorNode;
			})
			,
			scrollDoc: (function(item, reload, ifNeeded)
			{
				var iframe = SSP.Widget('w_metadata_doc_frame');
				
				if(!item)
					item = iframe.node.contentWindow.document.body;
				else if(!SSP.DOM.isNode(item))
					item = App.Its.Handler.findAnchorNode(item);
				
				if(item === null)
					return;
				
				if(item.tagName === 'A' && SSP.DOM.hasClass(item, 'bookmark'))
				{
					var anchors = iframe.node.contentWindow.document.getElementsByTagName('A');
					
					for(var i = 0; i < anchors.length; i++)
						if(anchors[i].id && SSP.DOM.hasClass(anchors[i], 'bookmark'))
						{
							if(anchors[i] === item)
								item = iframe.node.contentWindow.document.body
							
							break;
						}
				}
				
				if(reload)
				{
					var src = iframe.src().split('#');
					
					if(src.length > 1)
						src = [src[0]];
					
					if(!App.Its.Handler.listeningScrollForTouch
					&& item.tagName !== 'BODY')
						src[1] = item.name || item.id;
					
					iframe.reload(src.join('#'));
					
					if(!App.Its.Handler.listeningScrollForTouch)
						return;
				}
				
				SSP.DOM.requestAnimationFrame(function()
				{
					if(!App.Its.Handler.listeningScrollForTouch)
					{
						if(ifNeeded)
							SSP.DOM.scroll(item, App.Its.Handler.getFrame(), true, true);
						else
							SSP.DOM.scroll(item, true, false, true);
					}
					else
					{
						var offsetTop;
						
						if(item && item.tagName !== 'BODY' && item.tagName !== 'HTML')
							offsetTop = item.offsetTop;
						
						var scrolledItem = SSP.DOM.getScrolledItemAndOffset(item);
						var scrolled = scrolledItem.item;
						
						if(!offsetTop || scrolledItem.offsetTop)
							offsetTop = scrolledItem.offsetTop;
						
						iframe.node.contentWindow.mouseX = 0;
						iframe.node.contentWindow.mouseY = offsetTop;
						
						iframe.node.parentNode.scrollLeft = 0;
						iframe.node.parentNode.scrollTop = offsetTop;
						
						App.Its.Handler.docFrameScroll();
					}
				});
			})
			,
			resizableImageClick: function(event)
			{
				App.Its.Handler.toggleEnlarge(event.target, event.clientX, event.clientY);
			}
			,
			adjustResizableImagesCursor: function()
			{
				var contentDocument = App.Its.Handler.getDoc();
				
				var imgs = SSP.DOM.byClass('enlargeble', contentDocument);
				var imgsLength = imgs.length;
				
				for(var i = 0; i < imgsLength; i++)
				{
					var img = imgs[i];
					var naturalWidth = img.naturalWidth || img.getAttribute('width');
					
					if(naturalWidth !== null)
					{
						if(naturalWidth > img.width
						|| SSP.DOM.hasClass(img, 'enlarged'))
							img.style.cursor = '';
						else
							img.style.cursor = 'default';
					}
				}
			}
			,
			adjustDocFrameForTouch: function(syncScroll)
			{
				var iframe = SSP.Widget('w_metadata_doc_frame');
				
				if(iframe.node && SSP.DOM.contains(iframe.node))
				{
					var container = SSP.DOM.getContainer(iframe.node.contentWindow.document);
					
					var scrollLeft = container.scrollLeft;
					var scrollTop = container.scrollTop;
					
					container = null;
					
					if(syncScroll && (scrollLeft || scrollTop))
					{
						iframe.node.contentWindow.mouseX = scrollLeft;
						iframe.node.contentWindow.mouseY = scrollTop;
					}
					
					iframe.node.scrolling = 'no';
					iframe.node.style.width = '100%';
					iframe.node.style.height = '100%';
					
					setTimeout(
						function()
						{
							try
							{
								iframe.node.style.width = iframe.node.contentWindow.document.body.scrollWidth + 'px';
								iframe.node.style.height = iframe.node.contentWindow.document.body.scrollHeight + 'px';
								
								if(syncScroll && (scrollLeft || scrollTop))
								{
									iframe.node.parentNode.scrollLeft = scrollLeft;
									iframe.node.parentNode.scrollTop = scrollTop;
								}
							}
							catch(e)
							{
								console.log(e);
							}
						},
						0
					);
				}
			}
			,
			docFrameTouchStart: function(event)
			{
				var contentWindow = SSP.Widget('w_metadata_doc_frame').node.contentWindow;
				
				contentWindow.mouseX = event.targetTouches[0].pageX;
				contentWindow.mouseY = event.targetTouches[0].pageY;
			}
			,
			docFrameTouchMove: function(event)
			{
				if(App.Its.Handler.docScrolled === null)
					App.Its.Handler.docScrolled = true;
				
				SSP.Bus.cancel(event);
				var iframe = SSP.Widget('w_metadata_doc_frame');
				var box = iframe.node.parentNode;
				var contentWindow = iframe.node.contentWindow;
				box.scrollLeft = box.scrollLeft + contentWindow.mouseX - event.targetTouches[0].pageX;
				box.scrollTop = box.scrollTop + contentWindow.mouseY - event.targetTouches[0].pageY;
				
				App.Its.Handler.docFrameScroll();
			}
			,
			docFrameMouseStart: function(event)
			{
				var iframe = SSP.Widget('w_metadata_doc_frame');
				var contentWindow = iframe.node.contentWindow;
				var contentDocument = contentWindow.document;
				
				contentWindow.mouseX = event.clientX;
				contentWindow.mouseY = event.clientY;
				
				SSP.DOM.listen(contentDocument.body, 'mousemove', App.Its.Handler.docFrameMouseMove);
			}
			,
			docFrameMouseStop: function(event)
			{
				var iframe = SSP.Widget('w_metadata_doc_frame');
				var contentDocument = iframe.node.contentWindow.document;
				SSP.DOM.cancel(contentDocument.body, 'mousemove', App.Its.Handler.docFrameMouseMove);
			}
			,
			docFrameMouseMove: function(event)
			{
				if(App.Its.Handler.docScrolled === null)
					App.Its.Handler.docScrolled = true;
				
				SSP.Bus.cancel(event);
				var iframe = SSP.Widget('w_metadata_doc_frame');
				var box = iframe.node.parentNode;
				var contentWindow = iframe.node.contentWindow;
				box.scrollLeft = box.scrollLeft + contentWindow.mouseX - event.clientX;
				box.scrollTop = box.scrollTop + contentWindow.mouseY - event.clientY;
				
				App.Its.Handler.docFrameScroll();
			}
			,
			getAnchor: (function(offset)
			{
				var currentDoc = App.Its.Handler.getDoc();
				
				if(App.Its.Handler.anchors[offset] && currentDoc.anchors)
				{
					if(typeof App.Its.Handler.anchors[offset].anchor === 'undefined')
					{
						var hash = App.Its.Handler.anchors[offset].hash;
						var hashLower = hash.toLowerCase();
						var hashUpper = hash.toUpperCase();
						
						var anchor = currentDoc.anchors.namedItem(hash) || currentDoc.anchors.namedItem(hashLower) || currentDoc.anchors.namedItem(hashUpper);
						
						if(anchor)
							App.Its.Handler.anchors[offset].anchor = anchor;
						else if(offset === 0) // body
							App.Its.Handler.anchors[offset].anchor = {};
						else
							App.Its.Handler.anchors[offset].anchor = SSP.DOM.byId(hash, currentDoc) || SSP.DOM.byId(hashLower, currentDoc) || SSP.DOM.byId(hashUpper, currentDoc) || undefined;
					}
					
					return App.Its.Handler.anchors[offset].anchor;
				}
			})
			,
			getHash: (function(offset)
			{
				if(App.Its.Handler.anchors[offset])
					return App.Its.Handler.anchors[offset].hash;
			})
			,
			getFrame: (function()
			{
				return SSP.DOM.byId('w_metadata_doc_frame');
			})
			,
			getWindow: (function()
			{
				var iframe = SSP.DOM.byId('w_metadata_doc_frame');
				return iframe ? iframe.contentWindow : null;
			})
			,
			getDoc: (function()
			{
				var iframe = SSP.DOM.byId('w_metadata_doc_frame');
				return iframe ? iframe.contentWindow.document : null;
			})
			,
			getDocContainer: (function()
			{
				if(!App.Its.Handler.listeningScrollForTouch)
					return SSP.DOM.getContainer(App.Its.Handler.getDoc());
				else
					return SSP.Widget('w_metadata_doc_frame').node.parentNode;
			})
			,
			getDocPosition: (function()
			{
				var documentElement = App.Its.Handler.getDocContainer();
				
				return documentElement && documentElement.scrollTop
					 ? Math.round(0x7fffffff * documentElement.scrollTop / documentElement.scrollHeight)
					 : 0;
			})
			,
			syncDoc: (function(name, position)
			{
				try
				{
					var documentElement = App.Its.Handler.getDocContainer();
					
					if(!documentElement)
						return;
				}
				catch(e)
				{
					return;
				}
				
				if(name)
				{
					try
					{
						var match = App.Its.Router.current
								  ? App.Its.Router.current.newMatch
								  : App.Its.Router.matchCached(window.location.toString(), true);
						
						if(match && match.context.mode === 'bookmark')
							name = name.toUpperCase();
						else
							name = name.toLowerCase();
						
						var nameLower = name.toLowerCase();
					}
					catch(e)
					{
						
					}
					
					var currentAnchor = App.Its.Handler.currentAnchor;
					var anchor = App.Its.Handler.getAnchor(currentAnchor);
					
					if(anchor)
					{
						if(anchor.name !== name
						&& (!anchor.name || anchor.name.toLowerCase() !== nameLower))
						{
							var scrollTop = documentElement.scrollTop;
							var foundNamed = false;
							
							if(anchor.offsetTop < scrollTop)
							{
								do
								{
									currentAnchor++;
									
									anchor = App.Its.Handler.getAnchor(currentAnchor);
									
									if(!anchor)
										break;
									
									if(anchor.name === name || anchor.name && anchor.name.toLowerCase() === nameLower)
									{
										foundNamed = true;
										break;
									}
								}
								while(anchor.offsetTop < scrollTop);
								
								if(!foundNamed && anchor && anchor.offsetTop >= scrollTop + SSP.Widget('w_metadata_doc_frame').node.offsetHeight)
								{
									currentAnchor--;
									
									anchor = App.Its.Handler.getAnchor(currentAnchor);
								}
							}
							else if(currentAnchor)
							{
								do
								{
									currentAnchor--;
									
									anchor = App.Its.Handler.getAnchor(currentAnchor);
									
									if(!anchor)
										break;
									
									if(anchor.name === name || anchor.name && anchor.name.toLowerCase() === nameLower)
									{
										foundNamed = true;
										break;
									}
								}
								while(anchor.offsetTop > scrollTop);
							}
							
							App.Its.Handler.currentAnchor = currentAnchor;
						}
						else
							App.Its.Handler.scrollDoc(anchor);
					}
				}
				
				if(typeof position === 'number')
					documentElement.scrollTop = position
											  ? Math.round(position * documentElement.scrollHeight / 0x7fffffff)
											  : 0;
			})
			,
			syncToc: (function(track)
			{
				var documentElement = App.Its.Handler.getDocContainer();
				
				if(!documentElement)
				{
					App.Its.Handler.tracking = false;
					return setTimeout(App.Its.Handler.docFrameDOMContentLoaded, SSP.DOM.timeoutLong);
				}
				
				if(typeof track === 'undefined')
					track = true;
				
				var scrollTop = documentElement.scrollTop;
				var currentAnchor = App.Its.Handler.currentAnchor;
				var tocId, hash;
				
				var anchor = App.Its.Handler.getAnchor(currentAnchor);
				
				if(anchor
				&& App.Its.Handler.currentPosition === 0
				&& scrollTop === anchor.offsetTop)
				{
					App.Its.Handler.currentPosition = scrollTop;
					return;
				}
				
				var viewportHeight = SSP.Widget('w_metadata_doc_frame').node.offsetHeight;
				
				if(scrollTop >= App.Its.Handler.currentPosition) // forward
				{
					var nextAnchor = currentAnchor + 1;
					
					anchor = App.Its.Handler.getAnchor(nextAnchor);
					
					if(anchor)
					{
						if(scrollTop + viewportHeight < documentElement.scrollHeight)
						{
							var previousAnchor = anchor;
							
							if(anchor.tagName)
							{
								if(anchor.offsetTop + anchor.offsetHeight < scrollTop)
								{
									do
									{
										nextAnchor++;
										anchor = App.Its.Handler.getAnchor(nextAnchor);
										
										if(!anchor
										|| !anchor.tagName
										|| anchor.offsetTop >= scrollTop + viewportHeight
										|| scrollTop - previousAnchor.offsetTop <= anchor.offsetTop - scrollTop)
										{
											nextAnchor--;
											anchor = previousAnchor;
											break;
										}
										else
											previousAnchor = anchor;
									}
									while(anchor.offsetTop + anchor.offsetHeight < scrollTop);
								}
								else
								{
									var previousAnchor = App.Its.Handler.getAnchor(nextAnchor - 1);
									
									if(scrollTop - previousAnchor.offsetTop <= anchor.offsetTop - scrollTop)
									{
										nextAnchor--;
										anchor = previousAnchor;
									}
								}
							}
						}
						else
						{
							nextAnchor = App.Its.Handler.anchors.length - 1;
							anchor = App.Its.Handler.getAnchor(nextAnchor);
						}
						
						if(anchor && anchor.offsetTop < scrollTop + viewportHeight)
						{
							App.Its.Handler.currentAnchor = nextAnchor;
							
							tocId = 'toc_' + App.Its.Handler.currentDocId;
							
							if(anchor.tagName !== 'BODY')
								hash = App.Its.Handler.getHash(nextAnchor);
						}
					}
				}
				else if(currentAnchor && anchor) // backward
				{
					if((anchor.offsetTop ? anchor.offsetTop + anchor.offsetHeight : 0) >= scrollTop)
					{
						var nextAnchor = anchor;
						var previousAnchor = currentAnchor - 1;
						
						anchor = App.Its.Handler.getAnchor(previousAnchor);
						
						if(anchor)
						{
							while(anchor.offsetTop && (anchor.offsetTop ? anchor.offsetTop + anchor.offsetHeight : 0) >= scrollTop)
							{
								previousAnchor--;
								nextAnchor = anchor;
								anchor = App.Its.Handler.getAnchor(previousAnchor);
								
								if(!anchor)
									break;
							}
							
							if(anchor && nextAnchor.offsetTop + nextAnchor.offsetHeight < scrollTop + viewportHeight / 2)
								if(previousAnchor < currentAnchor - 1 && scrollTop > anchor.offsetTop
								|| nextAnchor.offsetTop - scrollTop < scrollTop - (anchor.offsetTop ? anchor.offsetTop + anchor.offsetHeight : 0))
								{
									previousAnchor++;
									anchor = nextAnchor;
								}
							
							if(anchor)
								if((anchor.offsetTop ? anchor.offsetTop + anchor.offsetHeight : 0) >= scrollTop
								|| nextAnchor.offsetTop + nextAnchor.offsetHeight >= scrollTop + viewportHeight / 2)
								{
									App.Its.Handler.currentAnchor = previousAnchor;
									
									tocId = 'toc_' + App.Its.Handler.currentDocId;
									
									if(anchor.tagName !== 'BODY')
										hash = App.Its.Handler.getHash(previousAnchor);
								}
						}
					}
				}
				
				var toc = SSP.Widget('w_metadata_toc');
				
				if(!tocId
				&& App.Its.Handler.currentPosition !== 0
				&& App.Its.Handler.currentAnchor !== 0
				&& toc.selected === 'toc_' + App.Its.Handler.currentDocId)
				{
					hash = App.Its.Handler.getHash(currentAnchor);
					
					if(hash)
					{
						tocId = 'toc_' + App.Its.Handler.currentDocId;
						track = false;
					}
				}
				
				if(tocId)
				{
					var match = App.Its.Router.matchCached(window.location.toString(), true);
					var trackHash = false;
					
					if(App.Its.Router.isDocument(match.context))
					{
						var url = window.location.protocol
								+ '//'
								+ window.location.hostname
								+ SSP.Bus.appPath
								+ match.context.nick
								+ '/'
								+ match.context.mode
								+ '/'
								+ match.context.subj;
						
						if(match.context.mode === 'content')
							url += '/1';
						else if(!hash)
							hash = App.Its.Handler.getHash(0);
						
						trackHash = true;
					}
					else if(!match.context.mode)
					{
						var url = window.location.protocol
								+ '//'
								+ window.location.hostname
								+ SSP.Bus.appPath
								+ match.context.nick;
						
						if(hash)
							url += '/content/'
								+ App.Its.Handler.currentDocId
								+ '/1';
						
						trackHash = true;
					}
					
					if(trackHash)
					{
						if(hash)
						{
							tocId += '_' + hash.toLowerCase();
							url += '/' + hash;
						}
						
						if(track)
							SSP.Bus.track('', App.Its.Router.toCanonical(url), 'GET', true, true);
					}
					
					if(track
					|| !toc.selected
					|| match.context.mode !== 'content'
					|| !match.context.subj
					|| !match.context.attr
					|| !match.context.attr[1])
						var select = true;
					else
						var select = toc.selected !== tocId;
					
					if(select)
						toc.select(tocId, void 0, false, toc.selected === tocId);
				}
				
				App.Its.Handler.currentPosition = scrollTop;
			})
			,
			listeningBasket: false
			,
			documentInFocus: true
			,
			basketFocusChecker: function()
			{
				if(SSP.DOM.hasFocus())
				{
					if(!App.Its.Handler.documentInFocus)
					{
						App.Its.Handler.documentInFocus = true;
						App.Its.Handler.refreshBasket();
					}
				}
				else
					App.Its.Handler.documentInFocus = false;
			}
			,
			refreshBasket: function()
			{
				var widget = SSP.Widget('w_basket_count');
				
				if(widget.node
				&& widget.node.style.display !== 'none')
					widget.refresh();
			}
			,
			listenBasket: function(listen)
			{
				if(listen)
				{
					if(!App.Its.Handler.listeningBasket)
					{
						App.Its.Handler.listeningBasket = setInterval(App.Its.Handler.basketFocusChecker, SSP.DOM.timeoutLong);
					}
				}
				else
				{
					if(App.Its.Handler.listeningBasket)
					{
						clearInterval(App.Its.Handler.listeningBasket);
						App.Its.Handler.listeningBasket = false;
					}
				}
			}
			,
			addToBasket: function(dbnick, docIds, reset)
			{
				if(typeof docIds === 'string' || typeof docIds === 'number')
					docIds = [docIds];
				
				var basket = [];
				
				for(var i = 0; i < docIds.length; i++)
					basket.push(dbnick + '_' + docIds[i]);
				
				var callback =
				{
					success: function(data)
					{
						SSP.Bus.receive(data, SSP.Bus.OK);
					}
					,
					error: SSP.Bus.router.handleError
				};
				
				SSP.Bus.request(SSP.Bus.appPath + 'basket/add?bus', callback, {basket: basket, reset: reset ? 1 : 0}, 'POST');
			}
			,
			reviewShow: function()
			{
				SSP.Widget('popup').addCleaner(
					function()
					{
						mceEnable('review[review]', false);
						mceCleanup();
					},
					true
				);
				
				try
				{
					var match = App.Its.Router.matchCached(window.location.toString(), true);
					
					if(match.context.mode === 'bookmark')
						var anchor = match.context.attr[0];
					else
						var anchor = match.context.attr[1];
					
					if(anchor)
						SSP.DOM.byId('review[anchor]').value = anchor;
				}
				catch(e)
				{
					
				}
				
				var selected = SSP.DOM.getSelectedHtml(SSP.DOM.byId('w_metadata_doc_frame').contentWindow);
				
				if(selected)
					App.Its.Handler.reviewSetSelectedText(selected);
				
				SSP.DOM.listen(SSP.DOM.byId('review'), 'submit', App.Its.Handler.reviewSubmit);
			}
			,
			reviewSetSelectedText: function(selected)
			{
				require('tinyMCE', function(tinyMCE)
				{
					try
					{
						var id = 'review[review]';
						var editor = tinyMCE.get(id);
						
						if(!editor)
						{
							var callback = (function(){return function(manager, editor)
							{
								if(editor.id === id)
								{
									var oninit = function(editor)
									{
										try
										{
											App.Its.Handler.reviewSetSelectedTextInEditor(editor, selected);
										}
										catch(e)
										{
											console.log(e);
										}
										
										editor.onInit.remove(oninit);
										tinyMCE.onAddEditor.remove(callback);
									};
									
									editor.onInit.add(oninit);
								}
							}
							})(id, selected);
							
							tinyMCE.onAddEditor.add(callback);
						}
						else
							App.Its.Handler.reviewSetSelectedTextInEditor(editor, selected);
					}
					catch(e)
					{
						
					}
				});
			}
			,
			reviewSetSelectedTextInEditor: function(editor, selected)
			{
				var header = '### Выделенный текст:';
				var content = editor.getContent();
				
				if(content.indexOf(header) !== -1)
					content += '<p><i><b>########</b></i></p>';
				else
					content += (content ? '' : '<p>&nbsp;</p><p>&nbsp;</p>') + '<p><i><b>' + header + '</b></i></p>';
				
				editor.setContent(content + '<div>' + mceClean(selected, editor.id) + '</div>');
			}
			,
			reviewSubmit: function(event)
			{
				var callback = function(data)
				{
					SSP.DOM.cancel(SSP.DOM.byId('review'), 'submit', App.Its.Handler.reviewSubmit);
					
					if(!data)
					{
						if(window.TEMPLATE_NEW)
							location.reload();
						else
							App.Popup.close();
					}
					else
					{
						App.Popup.widget.clean();
						App.Popup.widget.reload(undefined, data);
						App.Popup.widget.indicate(false);
						App.Popup.widget.scroll();
					}
				};
				
				App.Popup.widget.indicate(true);
				SSP.Bus.request(event.target.action + '_', callback, SSP.Form.values(event.target), 'POST');
				SSP.Bus.cancel(event);
			}
			,
			listenSearchFilter: function()
			{
				var form = SSP.DOM.byId('search_filter_form');
				SSP.DOM.listen(form, 'submit', function(event){return SSP.Bus.hijack(event)});
				
				var inputs = form.getElementsByTagName('INPUT');
				
				for(var i = 0; i < inputs.length; i++)
					if(inputs[i].type !== 'hidden')
						SSP.DOM.listen(inputs[i], 'change', App.Its.Handler.searchFilterChange);
				
				var selects = form.getElementsByTagName('SELECT');
				
				for(var i = 0; i < selects.length; i++)
					SSP.DOM.listen(selects[i], 'change', App.Its.Handler.searchFilterChange);
				
				var form2 = SSP.DOM.byId('search_filter_form_2');
				
				if(form2)
				{
					SSP.DOM.listen(form2, 'submit', function(event){return SSP.Bus.hijack(event)});
					
					var inputs = form2.getElementsByTagName('INPUT');
					
					for(var i = 0; i < inputs.length; i++)
						if(inputs[i].type !== 'hidden')
							SSP.DOM.listen(inputs[i], 'change', App.Its.Handler.searchFilterChange);
				}
			}
			,
			searchFilterChange: function(event)
			{
				var form = this.form;
				var values = SSP.Form.values(form).attributes || {};
				var existingHidden = null;
				var inputs = form.getElementsByTagName('INPUT');
				
				for(var i = 0; i < inputs.length; i++)
					if(inputs[i].name === 'attribute')
					{
						existingHidden = inputs[i];
						break;
					}
				
				var matches = this.name.match(/^attributes\[([^\[\]]+)\]/);
				var attribute = matches[1];
				var otherAttributes = false;
				
				if(typeof values[attribute] === 'undefined' || values[attribute] === '')
					for(var otherAttribute in values)
						if(SSP.Object.hasOwn(values, otherAttribute))
							if(values[otherAttribute] !== '')
							{
								otherAttributes = true;
								attribute = otherAttribute;
								break;
							}
				
				if(!existingHidden)
				{
					var hidden = SSP.DOM.create('INPUT', {name: 'attribute', type: 'hidden'});
					hidden.value = attribute;
					form.appendChild(hidden);
					existingHidden = hidden;
				}
				else if(otherAttributes || typeof values[existingHidden.value] === 'undefined' || values[existingHidden.value] === '')
					existingHidden.value = attribute;
				else if(existingHidden.value === attribute)
					for(var otherAttribute in values)
						if(otherAttribute !== attribute
						&& SSP.Object.hasOwn(values, otherAttribute)
						&& values[otherAttribute] !== '')
						{
							var inputName = 'attributes[' + otherAttribute + ']';
							var inputNameMultiple = inputName + '[]';
							
							for(var i = 0; i < form.elements.length; i++)
							{
								var input = form.elements[i];
								
								if(input.name === inputName || input.name === inputNameMultiple)
									SSP.Form.clear(input);
							}
						}
				
				var values = SSP.Form.values(form);
				var allEmpty = true;
				
				if(values.attributes)
					for(var attribute in values.attributes)
						if(SSP.Object.hasOwn(values.attributes, attribute)
						&& values.attributes[attribute])
						{
							allEmpty = false;
							break;
						}
				
				if(allEmpty)
				{
					var destroy = [];
					
					for(var i = 0; i < form.elements.length; i++)
					{
						var input = form.elements[i];
						
						if(input.type !== 'checkbox' && input.type !== 'radio')
							destroy.push(input);
					}
					
					for(var i = 0; i < destroy.length; i++)
						SSP.DOM.destroy(destroy[i]);
				}
				
				SSP.DOM.trigger(form, 'submit');
			}
			,
			setSearchGroupCount: function(group, count)
			{
				if(!App.Its.Handler.doSetSearchGroupCount(group, count))
				{
					var callback = function()
					{
						if(App.Its.Handler.doSetSearchGroupCount(group, count, true))
							clearInterval(interval);
					};
					
					var interval = setInterval(callback, SSP.DOM.timeoutMedium);
				}
			}
			,
			doSetSearchGroupCount: function(group, count, ifNotSet)
			{
				var searchGroupId = 'search_group_' + group;
				var searchGroup = SSP.DOM.byId(searchGroupId);
				
				if(searchGroup)
				{
					var searchGroupSpans = searchGroup.getElementsByTagName('SPAN');
					
					for(var j = 0; j < searchGroupSpans.length; j++)
						if(SSP.DOM.hasClass(searchGroupSpans[j], 'search_count'))
						{
							if(!ifNotSet
							|| searchGroupSpans[j].innerHTML === '')
							{
								if(window.TEMPLATE_NEW)
									count = SSP.String.trim(count, '()');
								
								if(window.TEMPLATE_NEW && count !== '')
									searchGroupSpans[j].innerHTML = '(' + count + ')';
								else
									searchGroupSpans[j].innerHTML = count;
								
								if(count !== '')
									count = SSP.Number.parseInt(count);
								
								var commonEmptyClass = 'search_group_empty';
								var groupEmptyClass = commonEmptyClass + '_' + group;
								
								if(count)
								{
									SSP.DOM.removeClass(searchGroup, commonEmptyClass);
									SSP.DOM.removeClass(searchGroup, groupEmptyClass);
								}
								else if(count !== '')
								{
									SSP.DOM.addClass(searchGroup, commonEmptyClass);
									SSP.DOM.addClass(searchGroup, groupEmptyClass);
								}
							}
							
							break;
						}
					
					return true;
				}
				else
					return false;
			}
			,
			initWebPush: function(panelId)
			{
				if(App.WebPush.available())
				{
					var doc = App.Its.Handler.getDoc();
					var panel = doc.getElementById(panelId);
					
					if(panel)
					{
						var message = doc.getElementById('webpush_message');
						var button = doc.getElementById('webpush_button');
						var spoiler = doc.getElementById('webpush_spoiler');
						var info = doc.getElementById('webpush_info');
						var help = doc.getElementById('webpush_help');
						
						if(Notification.permission === 'default')
						{
							button.disabled = true;
							button.style.color = '#a0a0a0';
							
							navigator.serviceWorker.ready.then(function(registration)
							{
								button.onclick = App.Its.Handler.webPushButtonClick;
								button.disabled = false;
								button.style.color = '';
							});
						}
						else
							button.onclick = App.Its.Handler.webPushButtonClick;
						
						spoiler.innerHTML = 'Что это такое?';
						info.innerHTML = 'Push-уведомления – это краткие всплывающие уведомления, '
									   + 'которые будут появляться на экране вашего компьютера '
									   + 'и сообщать о самых важных и интересных новостях, публикуемых '
									   + 'на сайте ' + location.hostname + ' в течение дня.';
						
						var spoil = function()
						{
							info.style.display = 'block';
							return false;
						};
						
						spoiler.onclick = spoil;
						
						if(Notification.permission === 'granted')
							navigator.serviceWorker.ready.then(function(registration)
							{
								registration.pushManager.getSubscription().then(function(pushSubscription)
								{
									App.Its.Handler.webPushToggleView(message, button, help, pushSubscription, panel);
								});
							});
						else
							App.Its.Handler.webPushToggleView(message, button, help, null, panel);
						
						if(Notification.permission === 'granted'
						&& !document.cookie.match('WEBPUSH=0'))
							App.WebPush.init();
					}
				}
			}
			,
			webPushToggleView: function(message, button, help, pushSubscription, panel, helpText)
			{
				if(Notification.permission === 'granted' && pushSubscription)
				{
					message.innerHTML = 'Уведомления включены';
					message.style.color = '';
					message.style.fontWeight = '';
					button.innerHTML = 'Выключить';
					help.style.display = 'none';
				}
				else
				{
					message.innerHTML = 'Уведомления выключены';
					message.style.color = '#f00';
					message.style.fontWeight = 'bold';
					button.innerHTML = 'Включить';
					
					if(panel)
						panel.style.display = 'block';
					
					if(helpText)
					{
						help.innerHTML = helpText;
						help.style.display = 'block';
					}
				}
			}
			,
			webPushButtonClick: function()
			{
				var doc = App.Its.Handler.getDoc();
				var button = doc.getElementById('webpush_button');
				var help = doc.getElementById('webpush_help');
				
				if(button.innerHTML === 'Включить')
				{
					if(Notification.permission === 'denied')
					{
						var helpText = 'Разблокируйте получение уведомлений для сайта ' + location.hostname + ' в настройках браузера и нажмите кнопку "Включить" еще раз';
						var helpHrefPrefix = '<a href="/img/help/webpush/';
						var helpHrefSuffix = '" class="image" target="_blank">Подробнее...</a>';
						var img;
						
						switch(SSP.Browser.name)
						{
							case 'Chrome':
							{
								if(SSP.Browser.OperaWebkit)
									img = 'push_unblock_op.png';
								else if(SSP.Browser.Yandex)
									img = 'push_unblock_yb.png';
								else
									img = 'push_unblock_ch.png';
							}
							break;
							case 'Firefox':
							{
								img = 'push_unblock_ff.png';
							}
							break;
						}
						
						if(img)
						{
							help.innerHTML = helpText + '. ' + helpHrefPrefix + img + helpHrefSuffix;
							help.style.display = 'block';
						}
						else
							window.alert(helpText);
					}
					else
					{
						App.WebPush.init(App.Its.Handler.webPushRegistration);
						
						if(Notification.permission === 'default')
						{
							help.innerHTML = 'Подтвердите получение уведомлений';
							help.style.display = 'block';
						}
					}
				}
				else
					App.WebPush.unsubscribe(App.Its.Handler.webPushRegistration);
			}
			,
			webPushRegistration: function()
			{
				navigator.serviceWorker.ready.then(function(registration)
				{
					registration.pushManager.getSubscription().then(function(pushSubscription)
					{
						var doc = App.Its.Handler.getDoc();
						var message = doc.getElementById('webpush_message');
						var button = doc.getElementById('webpush_button');
						var help = doc.getElementById('webpush_help');
						
						if(Notification.permission === 'default' && !pushSubscription)
						{
							button.disabled = true;
							button.style.color = '#a0a0a0';
							var helpText = 'Вы не подтвердили получение уведомлений. Обновите страницу и нажмите кнопку "Включить" еще раз.';
							App.Its.Handler.webPushToggleView(message, button, help, pushSubscription, null, helpText);
						}
						else
						{
							App.Its.Handler.webPushToggleView(message, button, help, pushSubscription);
							
							SSP.Bus.statEvent('push', 'subscription', pushSubscription ? 'subscribe' : 'unsubscribe');
						}
					});
				});
			}
			,
			toggleEnlarge: function(element, x, y)
			{
				var doc = element.ownerDocument;
				var scrolling = doc.scrollingElement || doc.documentElement || doc.body;
				var content_layout = SSP.DOM.byId('l_content');
				var iframe = SSP.Widget('w_metadata_doc_frame').node;
				var enlarged = element.getAttribute('_enlarged') === 'on';
				
				var cr, relative_y, factor;
				
				cr = element.getBoundingClientRect();
				relative_y = y - cr.top;
				
				cr = element.parentElement.getBoundingClientRect();
				
				if(cr.width && element.naturalWidth)
					factor = element.naturalWidth / cr.width;
				else
					factor = 1;
				if(factor < 1)
					factor = 1;
				
				if(SSP.DOM.hasClass(element, 'enlarged'))
				{
					SSP.DOM.removeClass(element, 'enlarged');
					
					scrolling.scrollTop -= relative_y * (1 - 1/factor);
					
					if(SSP.DOM.hasClass(content_layout, 'hide-toc') && content_layout.getAttribute('_restore') === 'on')
					{
						content_layout.setAttribute('_restore', 'off');
						SSP.DOM.removeClass(content_layout, 'hide-toc');
						
						if(App.Its.Handler.listeningResizeForTouch)
							App.Its.Handler.adjustDocFrameForTouch();
					}
					
					setTimeout(function()
					{
						// unfix body width
						doc.body.style.width = '';
					}, SSP.Browser.hasTouchScreen ? 50 : 350); // transition duration 0.3s
				}
				else
				{
					// fix body width
					doc.body.style.width = doc.body.offsetWidth+'px';
					
					scrolling.scrollTop += relative_y * (factor - 1);
					
					SSP.DOM.addClass(element, 'enlarged');
					
					if(iframe.clientWidth < 1030 && !SSP.DOM.hasClass(content_layout, 'hide-toc'))
					{
						content_layout.setAttribute('_restore', 'on');
						SSP.DOM.addClass(content_layout, 'hide-toc');
						
						if(App.Its.Handler.listeningResizeForTouch)
							App.Its.Handler.adjustDocFrameForTouch();
					}
				}
				
				SSP.DOM.trigger(iframe, 'resize');
				SSP.DOM.trigger(iframe.contentWindow, 'resize');
			}
		}
		,
		Router:
		{
			modes:
			{
				browse:
				{
					tab: 'w_main_tabclassifier',
					layout: 'l_classifier'
				}
				,
				content:
				{
					tab: 'w_main_tabdocument',
					layout: 'l_content'
				}
				,
				bookmark:
				{
					tab: 'w_main_tabdocument',
					layout: 'l_content'
				}
				,
				search:
				{
					tab: 'w_main_tabsearch',
					layout: 'l_search'
				}
				,
				extsearch:
				{
					tab: 'w_main_tabextendedsearch',
					layout: 'l_extended_search'
				}
			}
			,
			init: (function()
			{
				this.regexp = new RegExp(
					'^' +
					window.location.protocol +
					'//' +
					window.location.hostname +
					'/*' +
					SSP.Bus.appPath +
					'/*([a-z0-9]+)(?:\\?[^:/#]+)?(?:/+(' +
					SSP.Bus.modes.join('|') +
					'))?(?:/+([^/]+)(.*)|/+)?$',
					'i'
				);
				
				this.regexpCanonical = new RegExp(
					'^' +
					window.location.protocol +
					'//' +
					window.location.hostname +
					'/*' +
					SSP.Bus.appPath +
					'/*([a-z0-9]+)(?:\\?[^:/#]+)?(?:#(' +
					SSP.Bus.modes.join('|') +
					'))?(?::+([^:]+)(.*)|:+)?$',
					'i'
				);
				
				this.regexpPosition = /@[0-9a-f]+[:\/]*$/;
			})
			,
			current: undefined
			,
			selectedTab: undefined
			,
			selectedSearch: undefined
			,
			selectedSearchUrl: undefined
			,
			match: (function(url)
			{
				if(url.charAt(0) === '/')
					url = window.location.protocol + '//' + window.location.hostname + url;
				
				var match = url.match(this.regexp);
				
				if(match && match[1] === 'files')
					match = null;
				else if(!match && url.match(this.regexpPosition))
				{
					var tabDocument = SSP.Widget(this.modes['content'].tab);
					
					if(tabDocument.node && tabDocument.hasClass('active'))
					{
						url = tabDocument.node.getElementsByTagName('A')[0].href + '@' + url.split('@')[1].replace('/', '');
						
						if(url.charAt(0) === '/')
							url = window.location.protocol + '//' + window.location.hostname + url;
						
						match = url.match(this.regexp)
					}
				}
				
				if(match)
				{
					var context = {
						nick:	match[1],
						mode:	match[2],
						subj:	match[3],
						attr:	match[4],
						offs:	undefined
					};
					
					if(context.attr)
					{
						if(context.attr.match(this.regexpPosition))
						{
							context.attr = context.attr.split('@');
							context.offs = parseInt(SSP.String.rtrim(context.attr.pop(), ':'), 16);
							context.attr = context.attr.join('@');
						}
						
						context.attr = context.attr.split('/');
						context.attr.shift();
						
						if(context.mode === 'search')
						{
							if(context.attr.length > 1)
								context.attr = [context.attr.join('/')];
							
							context.attr[0] = context.attr[0].replace(/\?page_num=1$/, '');
						}
						else if(App.Its.Router.hasDocId(context) && context.attr.length > 3)
						{
							var attr = [];
							attr.push(context.attr.shift());
							attr.push(context.attr.shift());
							attr.push(context.attr.join('/'));
							context.attr = attr;
						}
						else if(context.nick === 'content')
						{
							context.mode = context.nick;
							context.nick = context.subj;
							context.subj = context.attr.shift();
						}
						
						if(App.Its.Router.hasDocId(context) && context.attr[1] && !context.attr[1].match(/^TI\d+$/))
							context.attr[1] = context.attr[1].toLowerCase();
					}
					else
						context.attr = [];
					
					return {context: context, match: match, url: url};
				}
				else
					return null;
			})
			,
			matchCanonical: (function(url)
			{
				if(!url.match(/^https?:\/\//))
					url = window.location.protocol + '//' + window.location.hostname + url;
				
				return !!url.match(this.regexpCanonical);
			})
			,
			matchCache:
			{
				internal: {}
				,
				canonical: {}
			}
			,
			matchCached: (function(url, isCanonical)
			{
				if(isCanonical)
				{
					if(typeof App.Its.Router.matchCache.canonical[url] === 'undefined')
					{
						var internalUrl = App.Its.Router.toInternal(url);
						
						if(typeof App.Its.Router.matchCache.internal[internalUrl] === 'undefined')
						{
							var match = App.Its.Router.match(internalUrl);
							App.Its.Router.matchCache.internal[internalUrl] = match;
						}
						else
							var match = App.Its.Router.matchCache.internal[internalUrl];
						
						App.Its.Router.matchCache.canonical[url] = match;
						
						return match;
					}
					else
						return App.Its.Router.matchCache.canonical[url];
				}
				else
				{
					if(typeof App.Its.Router.matchCache.internal[url] === 'undefined')
					{
						var match = App.Its.Router.match(url);
						App.Its.Router.matchCache.internal[url] = match;
						
						return match;
					}
					else
						return App.Its.Router.matchCache.internal[url];
				}
			})
			,
			route: (function(event)
			{
				if(event.from
				&& event.to
				&& event.from.replace(/\/+$/, '').toLowerCase() === event.to.replace(/\/+$/, '').toLowerCase())
				{
					SSP.Bus.cancel(event);
					return null;
				}
				
				var route = {};
				
				var oldMatch = this.match(event.from);
				var newMatch = this.match(event.to);
				
				if(!newMatch && this.matchCanonical(event.to))
				{
					event.history = event.to;
					event.to = this.toInternal(event.to);
					newMatch = this.match(event.to);
				}
				
				if(!oldMatch || !newMatch)
					return true;
				
				try
				{
					App.User.syncTemplateCookie();
				}
				catch(e)
				{
					
				}
				
				if(newMatch.context)
				{
					if(newMatch.context.mode === 'content')
					{
						var directUrlFixer = new RegExp('^(' + window.location.protocol + '//' + window.location.hostname + '/*' + SSP.Bus.appPath + '/*)content/+([^/]+)(/.+)$', 'i');
						event.to = event.to.replace(directUrlFixer, '$1$2/content$3');
						
						if(event.to.indexOf('.htm') !== -1)
							event.to = event.to.replace(/(\?|$)/, '_$1');
						else
							event.to = event.to.replace('?', '_?');
					}
					else if(newMatch.context.mode === 'search')
					{
						if(App.Search.newSearchUsed())
						{
							App.Its.Router.routeNewSearch(event, route, oldMatch, newMatch);
							
							if(SSP.Bus.isCanceled(event))
								return;
						}
						else if(App.Its.Router.switchToSearch(event, route, oldMatch, newMatch))
							return;
						else
						{
							if(newMatch.context.attr
							&& newMatch.context.attr[0])
							{
								var searchAttrs = newMatch.context.attr[0].split('?');
								var searchQuery = newMatch.context.subj + '/' + SSP.String.trim(searchAttrs[0].replace(/\/$/, '')).toLowerCase();
								searchAttrs = searchAttrs[1] || null;
								
								App.Its.Router.currentSearch = searchQuery;
								App.Its.Router.currentSearchAttributes = searchAttrs;
							}
							else
							{
								App.Its.Router.currentSearch = null;
								App.Its.Router.currentSearchAttributes = null;
							}
							
							event.receiver = App.Its.Router.receiveSearch;
						}
					}
				}
				
				App.Its.Router.setCurrent(event, route, oldMatch, newMatch);
				
				for(var name in oldMatch.context)
					if(newMatch.context[name] !== oldMatch.context[name])
					{
						if(typeof newMatch.context[name] === 'string'
						&& typeof oldMatch.context[name] === 'string'
						&& newMatch.context[name].toLowerCase() === oldMatch.context[name].toLowerCase())
							continue;
						else if(newMatch.context[name] instanceof Array
						&& SSP.Array.equals(newMatch.context[name], oldMatch.context[name]))
							continue;
						
						route.name = name;
						break;
					}
				
				if(!route.name && newMatch.context.mode === 'search')
					route.name = 'mode';
				
				if(!SSP.Bus.isHistory(event) && App.Its.Router.isDocument(oldMatch.context))
					App.Its.Router.trackDocPosition();
				
				if(newMatch.context.mode === 'search'
				&& App.Search.newSearchUsed())
					route.name = 'nick';
				
				if(route.name)
				{
					if(route.name !== 'nick'
					&& (newMatch.context.mode !== 'search' || !App.Search.newSearchUsed()))
						event.nonce = App.Its.Router.getNonce();
					
					if(route.name === 'attr' && newMatch.context.mode === 'bookmark' && !oldMatch.context.attr
					|| route.name === 'attr' && newMatch.context.mode === 'search' && newMatch.context.attr && newMatch.context.attr[0] && newMatch.context.attr[0].indexOf('?') === -1)
						route.name = 'mode';
					
					var handler = 'route' + SSP.String.ucfirst(route.name);
					
					if(typeof this[handler] === 'function')
						this[handler](event, route, oldMatch, newMatch);
				}
				
				if(SSP.Bus.isCanceled(event))
				{
					SSP.Bus.runDeferred();
					SSP.Bus.stat();
				}
				else
				{
					event.to = event.to.replace(App.Its.Router.regexpPosition, '');
					event.to = event.to.replace(/\?page_num=1$/, '');
				}
				
				window.deferred.push(function(){try{SSP.Scroll.mimicByClass('mimic_scroll');}catch(e){/*debugger;*/}});
				
				return route;
			})
			,
			setCurrent: (function(event, route, oldMatch, newMatch)
			{
				App.Its.Router.current = {event: event, route: route, oldMatch: oldMatch, newMatch: newMatch};
			})
			,
			base: undefined
			,
			getNonce: (function()
			{
				if(!App.Its.Router.base)
					App.Its.Router.base = SSP.Widget('w_base');
				
				if(App.Its.Router.base)
					return App.Its.Router.base.getData('nonce');
			})
			,
			appendNonce: (function(url)
			{
				var nonce = App.Its.Router.getNonce();
				
				if(nonce)
				{
					if(url.indexOf('?') === -1)
						url += '?';
					else
						url += '&';
					
					url += '_=' + nonce;
				}
				
				return url;
			})
			,
			transform: (function(event)
			{
				if(SSP.Bus.isHistory(event))
				{
					event.history = event.to;
					event.to = this.toInternal(event.to);
				}
				else
				{
					event.history = this.toCanonical(event);
					event.from = this.toInternal(event.from);
				}
			})
			,
			transformStat: (function(url, isReferer)
			{
				try
				{
					if(!isReferer && App.Its.Router.isDocument(App.Its.Router.current.newMatch.context))
					{
						var iframe = SSP.Widget('w_metadata_doc_frame');
						var document = iframe.node.contentWindow.document;
						
						if(SSP.DOM.hasClass(document.documentElement, 'iframe')
						&& SSP.DOM.hasClass(document.body, 'error'))
							url = '/noaccess' + url;
					}
					
					return url.replace(App.Its.Router.regexpPosition, '');
				}
				catch(e)
				{
					
				}
				
				return url;
			})
			,
			toCanonical: (function(url)
			{
				if(url)
				{
					var match = this.match(typeof url === 'string' ? url : url.to);
					
					if(match && match.context)
					{
						var subj = match.context.subj || '';
						var attr = match.context.attr || '';
						
						if(match.context.mode !== 'content' || App.Its.Router.hasDocId(match.context))
							attr = attr ? ':' + attr.join(':') : '';
						else
							attr = attr ? '/' + attr.join('/') : '';
						
						var result = window.location.protocol
								   + '//'
								   + window.location.hostname
								   + SSP.Bus.appPath
								   + match.context.nick;
						
						if(match.context.nick === 'ref')
							result += '/' + match.context.subj;
						else if(match.context.mode)
							result += '#'
									+ match.context.mode
									+ ':'
									+ subj
									+ attr
									+ (match.context.offs ? '@' + match.context.offs.toString(16) : '');
						
						return result;
					}
				}
			})
			,
			toInternal: (function(url)
			{
				if(url)
				{
					var location = SSP.String.parseUrl(url);
					
					var hash = SSP.String.trimHash(location.hash);
					
					if(hash.indexOf('search') === 0)
					{
						hash = hash.split(':');
						hash.shift();
						var section = hash.shift();
						hash = 'search/' + section + '/' + hash.join(':');
					}
					else
						hash = hash.replace(/\:/g, '/');
					
					return location.protocol
						 + '//'
						 + location.hostname
						 + location.pathname
						 + '/'
						 + hash;
				}
			})
			,
			hasDocId: (function(context)
			{
				return context.mode === 'content'
					&& context.subj
					&& context.subj.match(/^-?\d+(?:,\d+)?$/)
					&& (!context.attr.length || !context.attr[context.attr.length - 1].match(/\.htm_(?:\?anchor=.*)?$/));
			})
			,
			hasDocSearch: (function(context)
			{
				return context.mode === 'content'
					&& context.subj
					&& context.subj.match(/^-?\d+(?:,\d+)?$/)
					&& context.attr
					&& typeof context.attr[2] === 'string'
					&& context.attr[2] !== '';
			})
			,
			showTocPreloader: (function()
			{
				try
				{
					SSP.Widget('w_metadata_toc').indicate(true);
				}
				catch(e){}
			})
			,
			focusIframe: (function(iframe)
			{
				if(SSP.Browser.hasTouchScreen
				|| SSP.Browser.Android
				|| SSP.Browser.IOS)
					return;
				
				if(!iframe)
					return;
				
				if(SSP.Browser.IE)
				{
					try
					{
						iframe.node.contentWindow.document.body.focus();
					}
					catch(e){}
				}
				else
				{
					SSP.DOM.requestAnimationFrame(function()
					{
						try
						{
							iframe.node.focus();
						}
						catch(e){}
					});
				}
			})
			,
			trackDocPosition: (function(force)
			{
				var location = SSP.Bus.windowLocation().toString();
				
				var position = App.Its.Handler.getDocPosition();
				
				if(position || force)
				{
					position = '@' + position.toString(16);
					
					if(location.match(App.Its.Router.regexpPosition))
						location = location.replace(App.Its.Router.regexpPosition, position);
					else
						location += position;
				}
				else
					location = location.replace(App.Its.Router.regexpPosition, '');
				
				SSP.Bus.track('', location, 'GET', true, true);
				
				return location;
			})
			,
			isDocument: (function(context)
			{
				return context.mode === 'content' || context.mode === 'bookmark' && context.attr[0];
			})
			,
			firstTabSelected: (function()
			{
				try
				{
					var tabs = SSP.Widget('w_metadata_doc_tabs');
					
					if(tabs && tabs.node)
						return tabs.node.style.display === 'none'
							|| SSP.DOM.hasClass(tabs.node.getElementsByTagName('LI')[0], 'active');
				}
				catch(e)
				{
					
				}
			})
			,
			routeNick: (function(event, route, oldMatch, newMatch)
			{
				App.Its.Router.selectedTab = App.Its.Router.getRememberedTab();
				
				if(App.Its.Router.isDocument(newMatch.context))
				{
					App.Its.Router.optimizeAnchor(event, oldMatch.context, newMatch.context);
					
					if(App.Its.Router.isDocument(oldMatch.context))
						App.Its.Router.showTocPreloader();
					else
						window.deferred.push(App.Its.Router.focusIframe);
				}
			})
			,
			routeMode: (function(event, route, oldMatch, newMatch)
			{
				if(App.Its.Router.isDocument(newMatch.context))
				{
					if(App.Its.Router.isDocument(oldMatch.context))
					{
						App.Its.Router.redirectTo('subj', event, route, oldMatch, newMatch);
						
						return route;
					}
					else
					{
						var iframe = SSP.Widget('w_metadata_doc_frame');
						iframe.indicate(true);
						
						App.Its.Router.checkSelectedTab(event, oldMatch.context, newMatch.context);
						App.Its.Router.optimizeAnchor(event, oldMatch.context, newMatch.context);
						
						window.deferred.push(App.Its.Router.focusIframe);
					}
				}
				
				var navList = SSP.Widget('w_metadata_navlist');
				
				if(newMatch.context.mode === 'browse')
				{
					var selected = true;
					
					if(App.Its.Router.hasDocId(oldMatch.context))
						navList.select('nav_d' + oldMatch.context.subj);
					else if(oldMatch.context.mode === 'bookmark' && oldMatch.context.attr[0] && App.Its.Handler.currentDocId)
						navList.select('nav_d' + App.Its.Handler.currentDocId);
					else
					{
						navList.unselect();
						selected = false;
					}
					
					if(selected)
					{
						var tree = SSP.Widget('w_metadata_navtree');
						
						try
						{
							if(tree.node
							&& tree.node.firstChild.id === 'cl_' + newMatch.context.nick + '_' + newMatch.context.subj)
							{
								var modes = App.Its.Router.modes;
								
								SSP.Widget(modes[oldMatch.context.mode].tab).removeClass('active');
								SSP.Widget(modes[oldMatch.context.mode].layout).hide();
								
								SSP.Widget(modes['browse'].tab).addClass('active');
								SSP.Widget(modes['browse'].layout).show();
								
								if(tree.selected === 'nav_' + newMatch.context.attr[newMatch.context.attr.length - 1])
								{
									if(!SSP.Bus.isHistory(event))
										SSP.Bus.track('', this.toCanonical(newMatch.url));
									
									SSP.Bus.cancel(event);
								}
								else
									App.Its.Router.redirectTo('attr', event, route, oldMatch, newMatch);
							}
						}
						catch(e)
						{
							
						}
					}
					else if(!oldMatch.context.mode || oldMatch.context.mode !== 'bookmark' || oldMatch.context.attr[0])
						App.Its.Router.optimizeNav(event, oldMatch.context, newMatch.context);
				}
				else if(!newMatch.context.mode)
					navList.unselect();
				
				if(newMatch.context.mode === 'extsearch')
				{
					var extSearch = SSP.Widget('w_search_extendedsearch');
					
					if(extSearch.node && !extSearch.isEmpty())
					{
						var form = SSP.DOM.byId('extended_search_form');
						
						if(form && form.action.indexOf(SSP.Bus.appPath + newMatch.context.nick + '/search') !== -1)
						{
							var mode = oldMatch.context.mode;
							
							if(mode)
							{
								var modes = App.Its.Router.modes;
								
								var tab = SSP.Widget(modes[mode].tab);
								var layout = SSP.Widget(modes[mode].layout);
								
								tab.removeClass('active');
								layout.hide();
								
								tab = SSP.Widget(modes['extsearch'].tab);
								layout = SSP.Widget(modes['extsearch'].layout);
								
								tab.addClass('active');
								layout.show();
								
								SSP.Bus.track('', this.toCanonical(newMatch.url), null, null, SSP.Bus.isHistory(event));
								SSP.Bus.cancel(event);
							}
						}
					}
				}
			})
			,
			routeSubj: (function(event, route, oldMatch, newMatch)
			{
				App.Its.Router.checkSelectedTab(event, oldMatch.context, newMatch.context);
				App.Its.Router.optimizeAnchor(event, oldMatch.context, newMatch.context);
				
				if(App.Its.Router.isDocument(oldMatch.context)
				&& App.Its.Router.isDocument(newMatch.context))
				{
					var toc = SSP.Widget('w_metadata_toc');
					
					if(toc.node && toc.node.firstChild && !SSP.DOM.hasClass(toc.node.firstChild, 'mixed'))
						App.Its.Router.showTocPreloader();
				}
			})
			,
			routeAttr: (function(event, route, oldMatch, newMatch)
			{
				var mode = newMatch.context.mode;
				
				if(App.Its.Router.isDocument(newMatch.context))
				{
					var oldAttr = oldMatch.context.attr;
					var newAttr = newMatch.context.attr;
					var anchor;
					var tocId;
					
					var toc = SSP.Widget('w_metadata_toc');
					var iframe = SSP.Widget('w_metadata_doc_frame');
					
					if(mode === 'content')
					{
						if(App.Its.Router.hasDocId(newMatch.context))
						{
							if(oldAttr[0] === newAttr[0] // tab_id
							|| newAttr[0] && (newAttr[0].toString() === '1' || newAttr[0].toString() === 'hdoc') && App.Its.Router.firstTabSelected())
							{
								if(oldAttr[1] === newAttr[1] // anchor
								&& oldAttr[2] !== newAttr[2]) // search
									return route;
								
								anchor = newAttr[1] || '';
								
								if(anchor)
									anchor = decodeURIComponent(anchor.toLowerCase());
								
								tocId = 'toc_' + newMatch.context.subj + (anchor ? '_' + anchor : '');
							}
							else
							{
								if(!App.Its.Router.hasDocId(oldMatch.context))
									App.Its.Router.redirectTo('subj', event, route, oldMatch, newMatch);
								
								return route;
							}
						}
						else
						{
							App.Its.Router.redirectTo('subj', event, route, oldMatch, newMatch);
							
							return route;
						}
					}
					else if(mode === 'bookmark')
					{
						try
						{
							anchor = newAttr[0].toUpperCase();
							
							if(!anchor || !oldAttr[0])
							{
								App.Its.Router.redirectTo('mode', event, route, oldMatch, newMatch);
								
								return route;
							}
							else if(!SSP.DOM.byId(anchor, iframe.node.contentWindow.document) && !SSP.DOM.byId(anchor.toLowerCase(), iframe.node.contentWindow.document))
							{
								App.Its.Router.redirectTo('subj', event, route, oldMatch, newMatch);
								
								return route;
							}
							else
							{
								tocId = toc.node.firstChild.firstChild.id.split('_');
								
								if(App.Its.Handler.currentDocId)
									tocId[1] = App.Its.Handler.currentDocId;
								
								tocId[2] = anchor.toLowerCase();
								tocId = tocId.join('_');
							}
						}
						catch(e)
						{
							return true;
						}
					}
					else
						return true;
					
					App.Its.Handler.tracking = true;
					
					toc.select(tocId.toLowerCase());
					
					App.Its.Router.focusIframe(iframe);
					
					if(!SSP.Bus.isHistory(event))
					{
						App.Its.Handler.scrollDoc(anchor, true);
						SSP.Bus.track('', this.toCanonical(newMatch.url));
					}
					else if(newMatch.context.offs)
						App.Its.Handler.syncDoc(anchor, newMatch.context.offs);
					else
						App.Its.Handler.scrollDoc(anchor, true);
					
					SSP.Bus.cancel(event);
				}
				else if(mode === 'bookmark')
				{
					App.Its.Router.redirectTo('mode', event, route, oldMatch, newMatch);
					
					return route;
				}
				else if(mode === 'browse')
					App.Its.Router.optimizeNav(event, oldMatch.context, newMatch.context);
			})
			,
			routeOffs: (function(event, route, oldMatch, newMatch)
			{
				App.Its.Handler.syncDoc(null, newMatch.context.offs);
				
				SSP.Bus.cancel(event);
			})
			,
			redirectTo: (function(to, event, route, oldMatch, newMatch)
			{
				route.name = to;
				
				var handler = 'route' + SSP.String.ucfirst(route.name);
				
				this[handler](event, route, oldMatch, newMatch);
			})
			,
			optimizeAnchor: (function(event, oldContext, newContext)
			{
				if(App.Its.Router.hasDocId(newContext)
				&& newContext.attr.length > 1
				&& (!SSP.Browser.IE || oldContext.nick === newContext.nick)
				&& (!newContext.attr[1] || newContext.mode !== 'bookmark'))
				{
					if(newContext.attr[1])
					{
						var position;
						
						if(SSP.Bus.isHistory(event))
							position = newContext.offs;
						
						event.receiver = App.Its.Router.receiveAnchor(newContext.attr[1], event.to, position);
					}
					
					var location = window.location;
					var url = location.protocol
							+ '//'
							+ location.hostname
							+ SSP.Bus.appPath
							+ newContext.nick
							+ '/content/'
							+ newContext.subj
							+ '/'
							+ newContext.attr[0];
					
					if(newContext.attr.length > 2)
						url += '/_top/' + newContext.attr[2];
						
					event.to = url;
					event.history = this.toCanonical(event.to);
				}
			})
			,
			optimizeNav: (function(event, oldContext, newContext)
			{
				var tree = SSP.Widget('w_metadata_navtree');
				
				try
				{
					if(tree.node
					&& tree.node.firstChild.id === 'cl_' + newContext.nick + '_' + newContext.subj)
					{
						var nav = SSP.DOM.byId('nav_' + newContext.attr[newContext.attr.length - 1]);
						
						if(nav
						&& (SSP.DOM.hasClass(nav, 'leaf') || nav.getElementsByTagName('UL').length))
						{
							tree.select(nav);
							event.receiver = App.Its.Router.receiveNav;
						}
					}
				}
				catch(e)
				{
					
				}
			})
			,
			checkSelectedTab: (function(event, oldContext, newContext)
			{
				if(!SSP.Bus.isHistory(event)
				&& oldContext.mode
				&& oldContext.mode !== 'search'
				&& App.Its.Router.selectedTab
				&& App.Its.Router.isDocument(newContext)
				&& App.Its.Router.hasDocId(newContext)
				&& (!App.Its.Router.hasDocId(oldContext) || oldContext.subj !== newContext.subj))
					App.Its.Router.selectTab(event, oldContext, newContext);
			})
			,
			selectTab: (function(event, oldContext, newContext)
			{
				var selectedTab = App.Its.Router.selectedTab;
				
				if(newContext.attr[0] !== selectedTab)
				{
					newContext.attr[0] = selectedTab;
					
					var location = window.location;
					var url = location.protocol
							+ '//'
							+ location.hostname
							+ SSP.Bus.appPath
							+ newContext.nick
							+ '/content/'
							+ newContext.subj
							+ '/'
							+ newContext.attr[0];
					
					if(newContext.attr[1])
						url += '/' + newContext.attr[1];
					
					if(newContext.attr[2])
						url += '/' + newContext.attr[2];
					
					event.to = url;
					event.history = this.toCanonical(event.to);
				}
			})
			,
			rememberTab: (function(nick, selectedTab)
			{
				SSP.Bus.cookie('TAB', selectedTab, 'year', SSP.Bus.appPath + nick);
			})
			,
			getRememberedTab: (function()
			{
				return SSP.Bus.cookie('TAB') || undefined;
			})
			,
			switchSearchUrl: function(newUrl)
			{
				var widget = SSP.Widget('w_search_search');
				
				if(newUrl)
				{
					App.Its.Router.unselectSearchUrl();
					
					if(newUrl.tagName === 'A' && !newUrl.id)
						newUrl = newUrl.parentNode;
					
					var id = newUrl.id.split('_');
					App.Its.Router.selectedSearch = id[1];
					App.Its.Router.selectedSearchUrl = id[2];
					
					SSP.Bus.cookie('CLICKED_SEARCH', id[1] + '_' + id[2]);
					
					widget.select(newUrl);
					
					return;
				}
				
				if(!App.Its.Router.selectedSearch)
				{
					var selectedSearch = SSP.Bus.cookie('CLICKED_SEARCH');
					
					if(selectedSearch)
					{
						var id = selectedSearch.split('_');
						
						App.Its.Router.selectedSearch = id[0];
						App.Its.Router.selectedSearchUrl = id[1];
					}
				}
				
				if(App.Its.Router.selectedSearch && App.Its.Router.selectedSearchUrl)
				{
					var selected = SSP.DOM.byId('search_' + App.Its.Router.selectedSearch + '_' + App.Its.Router.selectedSearchUrl);
					
					if(selected)
					{
						widget.select(selected);
						
						if(SSP.DOM.hasClass(selected, 'search_link_child'))
						{
							var tree = selected.parentNode.parentNode;
							
							while(SSP.DOM.hasClass(tree, 'tree'))
							{
								if(SSP.DOM.hasClass(tree.parentNode, 'collapsed'))
								{
									SSP.DOM.removeClass(tree.parentNode, 'collapsed');
									SSP.DOM.addClass(tree.parentNode, 'expanded');
								}
								
								tree = tree.parentNode.parentNode;
							}
						}
						
						SSP.Widget('l_search').scroll(undefined, selected, true, true);
					}
				}
			}
			,
			unselectSearchUrl: function()
			{
				if(App.Its.Router.selectedSearch && App.Its.Router.selectedSearchUrl)
				{
					var selected = SSP.DOM.byId('search_' + App.Its.Router.selectedSearch + '_' + App.Its.Router.selectedSearchUrl);
					
					if(selected)
						SSP.Widget('l_center').unselect(selected);
				}
			}
			,
			unsetSearchUrl: function()
			{
				App.Its.Router.unselectSearchUrl();
				
				App.Its.Router.selectedSearch = App.Its.Router.selectedSearchUrl = undefined;
				
				SSP.Bus.deleteCookie('CLICKED_SEARCH');
			}
			,
			switchToSearch: function(event, route, oldMatch, newMatch)
			{
				if(window.TEMPLATE_NEW)
				{
					SSP.DOM.removeClass(SSP.DOM.byId('top_menu'), 'show-menu');
					App.Sidebar.setMenu(false, false);
				}
				
				var emptySearchRx = new RegExp('^' + window.location.protocol + '//' + window.location.hostname + '/*' + SSP.Bus.appPath + '/*[^/]+/+search/*$');
				var modes = App.Its.Router.modes;
				
				if(newMatch.context.mode
				&& newMatch.context.mode === 'search'
				&& oldMatch.context.mode
				&& oldMatch.context.mode !== 'search'
				&& (SSP.Bus.isHistory(event) || event.type === 'click' && event.to.match(emptySearchRx))
				&& SSP.DOM.byId('w_search_search'))
				{
					SSP.Widget(modes[oldMatch.context.mode].tab).removeClass('active');
					SSP.Widget(modes[oldMatch.context.mode].layout).hide();
					
					SSP.Widget(modes['search'].tab).addClass('active');
					SSP.Widget(modes['search'].layout).show();
					
					if(event.to.match(emptySearchRx)
					&& App.Its.Router.currentSearch)
					{
						event.to = SSP.String.rtrim(event.to, '/') + '/' + App.Its.Router.currentSearch;
						
						if(App.Its.Router.currentSearchAttributes)
							event.to += '?' + App.Its.Router.currentSearchAttributes;
						
						event.history = App.Its.Router.toCanonical(event.to);
					}
					
					App.Its.Router.setCurrent(event, route, oldMatch, newMatch);
					
					SSP.Bus.track(event);
					SSP.Bus.stat();
					SSP.Bus.cancel(event);
					
					if(window.TEMPLATE_NEW)
					{
						SSP.DOM.addClass(SSP.DOM.byId('main_container'), 'sidebar-no-initial');
						SSP.DOM.triggerReflow();
					}
					
					return true;
				}
			}
			,
			routeNewSearch: function(event, route, oldMatch, newMatch)
			{
				if(!App.Its.Router.switchToSearch(event, route, oldMatch, newMatch))
				{
					var searchGroupsWidget = App.Its.Router.getSearchGroupsWidget();
					var searchWidget = SSP.Widget('w_search_search');
					
					if(newMatch.context.subj !== 'history')
					{
						searchWidget.addClass('loading');
						searchWidget.loading = true;
					}
					
					searchWidget.scroll();
					
					if(oldMatch.context.mode !== 'search')
					{
						var modes = App.Its.Router.modes;
						
						for(var mode in modes)
							if(SSP.Object.hasOwn(modes, mode))
							{
								var tabWidget = SSP.Widget(modes[mode].tab);
								
								if(tabWidget)
								{
									if(mode === 'search')
									{
										tabWidget.addClass('active');
										tabWidget.show();
									}
									else
										tabWidget.removeClass('active');
								}
								
								var layoutWidget = SSP.Widget(modes[mode].layout);
								
								if(layoutWidget)
								{
									if(mode === 'search')
										layoutWidget.show();
									else
										layoutWidget.hide();
								}
							}
					}
					
					var searchGroups = SSP.DOM.byClass('search_group');
					var activeSearchGroup = newMatch.context.subj;
					
					if(activeSearchGroup === 'all')
					{
						var activeSearchGroupCookie = SSP.Bus.cookie('SEARCH_GROUP');
						
						if(activeSearchGroupCookie)
							activeSearchGroup = activeSearchGroupCookie;
					}
					
					var activeSearchGroupId = 'search_group_' + activeSearchGroup;
					
					var isFirstSearch = !SSP.Bus.cookie('SEARCH');
					
					if(newMatch.context.attr
					&& newMatch.context.attr[0])
					{
						var newQuery = SSP.String.trim(newMatch.context.attr[0].split('?')[0].replace(/\/$/, '')).toLowerCase();
						
						if(window.TEMPLATE_NEW)
						{
							var sidebarSearchInput = SSP.DOM.byId('sidebar_search_input');
							
							if(sidebarSearchInput && !sidebarSearchInput.value)
								sidebarSearchInput.value = newQuery;
						}
						
						var searchInput = SSP.DOM.byId('search_input');
						
						if(searchInput && !searchInput.value)
							searchInput.value = newQuery;
						
						App.Its.Router.currentSearch = newMatch.context.subj + '/' + newQuery;
						App.Its.Router.currentSearchAttributes = newMatch.context.attr[0].split('?')[1];
					}
					else
					{
						App.Its.Router.currentSearch = null;
						App.Its.Router.currentSearchAttributes = null;
					}
					
					if(oldMatch.context.mode === 'search'
					&& oldMatch.context.subj
					&& newMatch.context.subj
					&& oldMatch.context.subj !== newMatch.context.subj)
						var groupChanged = true;
					else
						var groupChanged = false;
					
					if(oldMatch.context.mode === 'search'
					&& newMatch.context.attr
					&& newMatch.context.attr[0])
					{
						if(oldMatch.context.attr && oldMatch.context.attr[0])
						{
							var oldQuery = SSP.String.trim(oldMatch.context.attr[0].split('?')[0].replace(/\/$/, '')).toLowerCase();
							
							var queryChanged = oldQuery !== newQuery;
							
							if(queryChanged || groupChanged)
								var attrChanged = false;
							else
								var attrChanged = SSP.String.decodeURIComponent(oldMatch.context.attr[0]).replace(/\bpage_num=\d+/, '') !== SSP.String.decodeURIComponent(newMatch.context.attr[0]).replace(/\bpage_num=\d+/, '');
						}
						else
						{
							var queryChanged = true;
							var attrChanged = false;
						}
					}
					else
					{
						var queryChanged = false;
						var attrChanged = false;
					}
					
					for(var i = 0; i < searchGroups.length; i++)
					{
						var searchGroup = searchGroups[i];
						var groupIdMatches = searchGroup.className.match(/search_group_([^_\s]+)(\s|$)/);
						
						if(groupIdMatches)
						{
							if(activeSearchGroupId)
							{
								if(SSP.DOM.hasClass(searchGroup, activeSearchGroupId))
								{
									SSP.DOM.addClass(searchGroup, 'active');
									
									if(isFirstSearch)
										SSP.DOM.addClass(searchGroup, 'blink-bgcolor-5');
								}
								else
									SSP.DOM.removeClass(searchGroup, 'active');
							}
							
							if(queryChanged && !SSP.DOM.hasClass(searchGroup, 'search_group_history'))
							{
								SSP.DOM.removeClass(searchGroup, 'search_group_empty');
								SSP.DOM.removeClass(searchGroup, 'search_group_empty_' + groupIdMatches[1]);
								App.Its.Handler.setSearchGroupCount(groupIdMatches[1], '');
							}
						}
					}
					
					if(attrChanged)
						App.Its.Handler.setSearchGroupCount(activeSearchGroup, '');
					
					if(App.Its.Router.currentSearch !== null
					&& (!newMatch.context.attr || !newMatch.context.attr[0].match(/[\?&]extended=1(&|$)/)))
					{
						route.counts = 0;
						
						if(typeof searchGroupsWidget.currentSearch === 'undefined'
						|| searchGroupsWidget.currentSearch !== null && searchGroupsWidget.currentSearch.indexOf('history/') === 0
						|| queryChanged && newMatch.context.attr && newMatch.context.attr[0]
						|| oldMatch.context.mode !== 'search')
						{
							var queryWithAttrs = newMatch.context.attr[0].split('?');
							
							if(!SSP.Browser.IE)
								queryWithAttrs[0] = queryWithAttrs[0].replace(/%/g, '%25');
							
							queryWithAttrs[0] += '_';
							
							var groupsUrl = SSP.Bus.appPath + 'search/groups/' + activeSearchGroup + '/' + queryWithAttrs.join('?');
							
							if(queryWithAttrs[1])
								groupsUrl += '&dbnick=' + newMatch.context.nick;
							else
								groupsUrl += '?dbnick=' + newMatch.context.nick;
							
							var currentSearch = App.Its.Router.currentSearch;
							
							var groupsCallback = (function(){return function(data)
							{
								if(App.Its.Router.currentSearch === currentSearch)
								{
									var searchGroupCount = '';
									var searchLoading = SSP.Widget('w_search_search').hasClass('loading');
									var activeSearchGroup = currentSearch.split('/')[0];
									
									if(activeSearchGroup === 'all')
										activeSearchGroup = App.Its.Router.getActiveSearchGroup();
									
									if(!searchLoading && activeSearchGroup !== 'all')
									{
										var activeSearchGroupId = 'search_group_' + activeSearchGroup;
										var searchGroup = SSP.DOM.byId(activeSearchGroupId);
										
										if(searchGroup)
										{
											var searchGroupSpans = searchGroup.getElementsByTagName('SPAN');
											
											for(var j = 0; j < searchGroupSpans.length; j++)
												if(SSP.DOM.hasClass(searchGroupSpans[j], 'search_count'))
												{
													searchGroupCount = searchGroupSpans[j].innerHTML;
													break;
												}
										}
									}
									
									var searchGroupsWidget = SSP.Widget('w_search_groups');
									searchGroupsWidget.reload(null, data);
									searchGroupsWidget.loading = false;
									searchGroupsWidget.removeClass('loading');
									
									if(isFirstSearch)
									{
										if(activeSearchGroup === 'all')
											activeSearchGroup = App.Its.Router.getActiveSearchGroup();
										
										if(activeSearchGroup !== 'all')
										{
											var activeSearchGroupDiv = SSP.DOM.byId('search_group_' + activeSearchGroup);
											
											if(activeSearchGroupDiv)
												SSP.DOM.addClass(activeSearchGroupDiv, 'blink-bgcolor-5');
										}
									}
									
									if(!searchLoading && searchGroupCount !== '')
										App.Its.Handler.setSearchGroupCount(activeSearchGroup, searchGroupCount);
								}
							}
							;})(currentSearch, isFirstSearch);
							
							SSP.Bus.postRequest(groupsUrl, groupsCallback);
						}
					}
					
					searchGroupsWidget.currentSearch = App.Its.Router.currentSearch;
				}
			}
			,
			getActiveSearchGroup: function()
			{
				var activeSearchGroupCookie = SSP.Bus.cookie('SEARCH_GROUP');
				
				if(activeSearchGroupCookie)
					return activeSearchGroupCookie;
				
				var searchGroups = SSP.DOM.byClass('search_group');
				
				for(var i = 0; i < searchGroups.length; i++)
					if(SSP.DOM.hasClass(searchGroups[i], 'active'))
					{
						var groupIdMatches = searchGroups[i].className.match(/search_group_([^_\s]+)(\s|$)/);
						
						if(groupIdMatches)
							return groupIdMatches[1];
					}
			}
			,
			receive: (function(data, status, location)
			{
				var hideIframePreloader = false;
				
				if(App.Its.Router.isDocument(App.Its.Router.current.newMatch.context))
				{
					if(data.w_metadata_doc_tabs
					&& data.w_metadata_doc_tabs[SSP.Bus.STYLE]
					&& data.w_metadata_doc_tabs[SSP.Bus.STYLE].display !== 'none')
					{
						var selectedTab;
						
						if(status === SSP.Bus.OK)
							selectedTab = App.Its.Router.current.newMatch.context.attr[0];
						else
						{
							var match = App.Its.Router.matchCached(location);
							
							if(match && match.context)
								selectedTab = match.context.attr[0];
						}
						
						var numeric = selectedTab.toString().match(/^[0-9]+$/);
						
						if(!numeric)
						{
							if(App.Its.Router.selectedTab !== selectedTab)
								App.Its.Router.rememberTab(App.Its.Router.current.newMatch.context.nick, selectedTab);
							
							App.Its.Router.selectedTab = selectedTab;
						}
					}
				}
				
				if(window.TEMPLATE_NEW)
				{
					SSP.DOM.removeClass(SSP.DOM.byId('top_menu'), 'show-menu');
					App.Sidebar.setMenu(false, false);
				}
				
				var query;
				
				try
				{
					query = window.TEMPLATE_NEW ? SSP.DOM.byId('sidebar_search_input').value : SSP.DOM.byId('search_input').value;
				}
				catch(e)
				{
					
				}
				
				var result = SSP.Bus.receive(data, status, location);
				
				if(query)
				{
					try
					{
						if(window.TEMPLATE_NEW)
						{
							var sidebarSearchInput = SSP.DOM.byId('sidebar_search_input');
							
							if(!sidebarSearchInput.value)
								sidebarSearchInput.value = query;
						}
						
						var searchInput = SSP.DOM.byId('search_input');
						
						if(!searchInput.value)
							searchInput.value = query;
					}
					catch(e)
					{
						
					}
				}
				
				if(App.Its.Router.current.newMatch.context.mode === 'search')
					App.Its.Router.switchSearchUrl();
				else if(hideIframePreloader)
					SSP.Widget('w_metadata_doc_frame').indicate(false);
				
				return result;
			})
			,
			receiveAnchor: (function(anchor, redirect, position)
			{
				return (function(data, status, location)
				{
					try
					{
						var esc = SSP.String.escapeRegExp(anchor);
						var rx = new RegExp('(/+content/+-?\d+/+' + esc + ')/+' + esc + '/?$');
						var noAnchor = false;
						
						if(status === SSP.Bus.OK)
						{
							if(redirect)
							{
								noAnchor = esc.indexOf('/') === -1 && redirect.match(rx);
								
								if(noAnchor)
									redirect = redirect.replace(rx, '$1');
								
								status = SSP.Bus.FOUND;
								location = redirect;
							}
							
							var match = App.Its.Router.matchCached(location);
							
							if(match && match.context && match.context.attr && match.context.attr[2])
								window.deferred.push(App.Its.Handler.doHighlight);
						}
						else if(status === SSP.Bus.FOUND)
						{
							var match = App.Its.Router.matchCached(location);
							
							if(match && match.context && App.Its.Router.hasDocId(match.context))
							{
								noAnchor = anchor === match.context.attr[0];
								
								location = window.location.protocol
										 + '//'
										 + window.location.hostname
										 + SSP.Bus.appPath
										 + match.context.nick
										 + '/content/'
										 + match.context.subj
										 + '/'
										 + match.context.attr[0]
										 + '/'
										 + (noAnchor ? '_top' : anchor);
								
								if(match.context.attr[2])
								{
									location += '/' + match.context.attr[2];
									window.deferred.push(App.Its.Handler.doHighlight);
								}
								
								if(position)
									location += '@' + position.toString(16);
								
								location = location.replace(/\/+_top$/, '');
							}
						}
						
						if(!noAnchor
						&& data.w_metadata_doc_frame[SSP.Bus.ATTR].src.indexOf('#') === -1)
							data.w_metadata_doc_frame[SSP.Bus.ATTR].src += '#' + anchor;
						
						SSP.Widget('w_metadata_doc_frame').indicate(false);
					}
					catch(e){}
					
					return App.Its.Router.receive(data, status, location);
				});
			})
			,
			receiveNav: (function(data, status, location)
			{
				if(data.w_metadata_navtree)
				{
					var src = data.w_metadata_navtree[SSP.Bus.ATTR].src;
					delete data.w_metadata_navtree;
					
					SSP.Widget('w_metadata_navtree').src(src);
				}
				
				return App.Its.Router.receive(data, status, location);
			})
			,
			getSearchGroupsWidget: function()
			{
				var searchSearch = SSP.DOM.byId('w_search_search');
				
				if(!searchSearch)
				{
					var searchLayout = SSP.DOM.byId('l_search');
					
					searchSearch = SSP.DOM.create('DIV', {id: 'w_search_search', className: 'w'});
					searchLayout.appendChild(searchSearch);
					
					if(SSP.Bus.widgets.w_search_search)
						SSP.Bus.widgets.w_search_search.node = searchSearch;
					
					SSP.DOM.listen(searchSearch, 'click', App.Its.Handler.searchClick);
				}
				
				var searchGroups = SSP.DOM.byId('w_search_groups');
				
				if(!searchGroups)
				{
					searchGroups = SSP.DOM.create('DIV', {id: 'w_search_groups', className: 'w loading'});
					searchSearch.parentNode.insertBefore(searchGroups, searchSearch);
					
					if(SSP.Bus.widgets.w_search_groups)
					{
						SSP.Bus.widgets.w_search_groups.node = searchGroups;
						SSP.Bus.widgets.w_search_groups.loading = true;
					}
				}
				
				return SSP.Widget('w_search_groups');
			}
			,
			receiveSearch: function(data, status, location)
			{
				if(data.w_search_groups)
					App.Its.Router.getSearchGroupsWidget();
				
				return App.Its.Router.receive(data, status, location);
			}
			,
			handleError: function(data, status, message)
			{
				if(!this.notrack && this.htmlUrl && this.htmlUrl !== SSP.Bus.location)
					return;
				
				if(this.receiverError && this.method === 'GET' && this.htmlUrl)
				{
					if(SSP.Bus.location === this.htmlUrl && SSP.Bus.windowLocation() === this.htmlUrl)
						window.location.reload();
					else
						window.location.replace(this.htmlUrl);
					
					return;
				}
				
				switch(status)
				{
					case SSP.Bus.NOT_FOUND:
					case SSP.Bus.GONE:
					{
						message = 'Страница не найдена';
					}
					break;
					case SSP.Bus.UNAUTHORIZED:
					case SSP.Bus.FORBIDDEN:
					{
						message = 'Доступ запрещен';
					}
					break;
					case SSP.Bus.REQUEST_TIMEOUT:
					case SSP.Bus.SERVICE_UNAVAILABLE:
					{
						message = 'Сервис временно недоступен';
					}
					break;
					default:
					{
						status = SSP.Bus.INTERNAL_SERVER_ERROR;
						message = 'Внутренняя ошибка сервера';
					}
				}
				
				alert(status + ' ' + message);
				
				var oldContext = App.Its.Router.current.oldMatch.context;
				var newContext = App.Its.Router.current.newMatch.context;
				
				if(oldContext.mode)
				{
					if(status === SSP.Bus.NOT_FOUND && oldContext.nick !== newContext.nick)
						SSP.Bus.navigate(SSP.Bus.appPath + newContext.nick, true);
					else
						history.back();
				}
				else
					SSP.Bus.navigate(SSP.Bus.appPath + oldContext.nick, true);
			}
		}
	};
	
	return App;
}
)(App || {}, window);

