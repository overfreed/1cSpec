var SSP = (function(SSP, window, undefined)
{
	"use strict";
	
	SSP = SSP || {};
	
	SSP.Object =
	{
		FILL_ARRAY:  1,
		FILL_OBJECT: 2,
		
		hasOwn: function(object, property)
		{
			return Object.prototype.hasOwnProperty.call(object, property);
		}
		,
		walk: function(object, callback, own, that)
		{
			if(!SSP.Object.nonEnum)
			{
				var hiddenBug = true;
				
				for(var prop in {toString: true})
					hiddenBug = false;
				
				if(hiddenBug)
					SSP.Object.nonEnum = [
						'toString',
						'toLocaleString',
						'valueOf',
						'hasOwnProperty',
						'isPrototypeOf',
						'propertyIsEnumerable',
						'constructor'
					];
				else
					SSP.Object.nonEnum = [];
			}
			
			if(typeof own === 'undefined')
				own = true;
			
			that = that || object;
			
			for(var key in object)
				if(!own || SSP.Object.hasOwn(object, key))
					callback.call(that, object[key], key);
			
			for(var i = 0; i < SSP.Object.nonEnum.length; i++)
				if(!own || SSP.Object.hasOwn(object, SSP.Object.nonEnum[i]))
					callback.call(that, object[SSP.Object.nonEnum[i]], SSP.Object.nonEnum[i]);
		}
		,
		copy: function(object, deep, own)
		{
			if(typeof own === 'undefined')
				own = true;
			
			if(!deep)
				return SSP.Object.merge({}, object, own);
			else
			{
				switch(typeof object)
				{
					case 'function':
					{
						own = true;
					}
					case 'object':
					{
						if(object)
						{
							if(object instanceof Array)
								return SSP.Array.merge([], object);
							else
							{
								var result = {};
								
								SSP.Object.walk(
									object,
									function(value, key)
									{
										result[key] = SSP.Object.copy(value, deep, own);
									},
									own
								);
								
								return result;
							}
						}
					}
					case 'unknown':
					{
						return null;
					}
					
					return object;
				}
			}
		}
		,
		merge: function(a, b, own)
		{
			if(typeof own === 'undefined')
				own = true;
			
			SSP.Object.walk(
				b,
				function(value, key)
				{
					try
					{
						a[key] = value;
					}
					catch(e)
					{
						
					}
				},
				own
			);
			
			return a;
		}
		,
		pathRx: /[\.\[\]]/
		,
		splitPath: function(path)
		{
			path = path.split(SSP.Object.pathRx);
			var split = [];
			
			for(var i = 0; i < path.length; i++)
				if(path[i] !== '')
					split.push(path[i]);
			
			return split;
		}
		,
		joinPath: function(path, array)
		{
			if(!array)
				return path.join('.');
			else
			{
				array = path.shift();
				return array + (path.length ? '[' + path.join('][') + ']' : '');
			}
		}
		,
		byPath: function(path, parent, fill, scalar)
		{
			var parent = parent || window;
			var key;
			
			if(!(path instanceof Array))
				path = SSP.Object.splitPath(path);
			
			while(path.length)
			{
				key = path.shift();
				
				if(typeof parent[key] === 'object'
				|| typeof parent[key] === 'function' && (!path.length || path[0] === 'prototype' || typeof parent[key][path[0]] !== 'undefined'))
					parent = parent[key];
				else if(key === '*' || key === '?')
				{
					var p = SSP.Object.joinPath(path);
					var result = [];
					
					if(parent instanceof Array)
					{
						for(var i = 0; i < parent.length; i++)
						{
							var val = SSP.Object.byPath(p, parent[i], fill, scalar);
							
							if(key === '*' || typeof val !== 'undefined' && val !== '' && val !== null)
								result.push(val);
						}
					}
					else
					{
						for(var i in parent)
							if(Object.prototype.hasOwnProperty.call(parent, i))
							{
								var val = SSP.Object.byPath(p, parent, fill, scalar)
								
								if(key === '*' || typeof val !== 'undefined' && val !== '' && val !== null)
									result.push(val);
							}
					}
					
					return result;
				}
				else if(fill)
				{
					if(!path.length)
						parent[key] = fill === SSP.Object.FILL_ARRAY ? [] : {};
					else
						parent[key] = SSP.String.isNumeric(key) ? [] : {};
					
					parent = parent[key];
				}
				else if(scalar)
					return parent[key];
				else
					return;
			}
			
			return parent;
		}
		,
		conditions:
		{
			is: '',
			nis: '!',
			eq: '=',
			neq: '!=',
			lt: '<',
			lte: '<=',
			gt: '>',
			gte: '>=',
			betw: '><',
			nbetw: '!><',
			sub: '%',
			nsub: '!%',
			rx: '?',
			nrx: '!?'
		}
		,
		evalCondition: function(a, condition, b)
		{
			if(typeof condition === 'undefined')
				condition = '';
				
			if(typeof condition === 'string')
			{
				var negate = false;
				
				if(condition.charAt(0) === '!')
				{
					condition = condition.substr(1);
					negate = true;
				}
				
				var conditions = SSP.Object.conditions;
				
				if(a instanceof Array)
				{
					var result = false;
					
					for(var i = 0; i < a.length; i++)
						if(SSP.Object.evalCondition(a[i], condition, b))
						{
							result = true;
							break;
						}
					
					return negate ? !result : result;
				}
				else if(b instanceof Array && condition !== conditions.betw)
				{
					var result = false;
					
					for(var i = 0; i < b.length; i++)
						if(SSP.Object.evalCondition(a, condition, b[i]))
						{
							result = true;
							break;
						}
					
					return negate ? !result : result;
				}
				
				if(typeof a === 'undefined')
					a = null;
				
				if(typeof b === 'undefined')
					b = true;
				
				var result;
				
				switch(condition)
				{
					case conditions.is:
					{
						if(typeof b === 'boolean' && typeof a !== 'boolean')
							switch(a)
							{
								case '0':
								case 0:
									a = false;
								break;
								case '1':
								case 1:
									a = true;
								break;
								default:
								{
									if(typeof a === 'object')
										a = !!a;
									else
										a = !b;
								}
							}
						else if(a === '' && b === null || a === null && b === '')
							return !negate;
						
						result = a == b;
					}
					break;
					case conditions.eq:
						result = a === b;
					break;
					case conditions.lt:
						result = a < b;
					break;
					case conditions.lte:
						result = a <= b;
					break;
					case conditions.gt:
						result = a > b;
					break;
					case conditions.gte:
						result = a >= b;
					break;
					case conditions.betw:
						result = a >= b[0] && a <= b[1];
					break;
					case conditions.sub:
						result = a !== null && b !== null && a.toString().toLowerCase().indexOf(b.toString().toLowerCase()) !== -1;
					break;
					case conditions.rx:
						result = typeof a === 'string' && a.match(b);
					break;
				}
				
				return negate ? !result : result;
			}
			else if(typeof condition === 'function')
				return condition.call(window, a, b);
		}
		,
		waiters: []
		,
		wait: function(target, property, condition, callback, timeout)
		{
			var uid = SSP.Object.waiters.length;
			SSP.Object.waiters[uid] = setInterval(
				function()
				{
					if(SSP.Object.evalCondition(target && typeof target === 'object' ? target[property] : undefined, condition))
					{
						clearInterval(SSP.Object.waiters[uid]);
						SSP.Object.waiters[uid] = null;
						
						callback.call(target || window);
					}
				},
				timeout || SSP.DOM.timeoutTiny
			);
		}
		,
		create: function(proto, args, contentWindow)
		{
			if(proto)
			{
				var isConstructor = args instanceof Array || !args && typeof proto === 'function';
				var isString = typeof proto === 'string';
				
				if(!isConstructor && isString)
				{
					if(matches = proto.match(/^(.+)\(\)$/))
					{
						isConstructor = true;
						proto = SSP.Object.byPath(matches[1], contentWindow);
					}
					else
						proto = SSP.Object.byPath(proto, contentWindow);
				}
				else if(proto instanceof Array)
				{
					if(proto.length)
						proto = SSP.Object.byPath(proto, contentWindow);
					else
						proto = null;
				}
				
				if(typeof proto === 'function')
					isConstructor = true;
			}
			
			proto = proto || null;
			
			var Class = function(){};
			Class.prototype = isConstructor ? proto.prototype : proto;
			var object = new Class();
			
			if(isConstructor)
				proto.apply(object, args);
			else if(args)
				throw new SSP.Error('IE!');
			else if(typeof proto.constructor === 'function')
				proto.constructor.call(object);
			
			return object;
		}
	};
	
	SSP.Error = function(message, code, previous)
	{
		this.message = message;
		this.code = typeof code === 'number' ? code : 0;
		this.previous = previous;
	};
	
	SSP.Widget = (function(id, tag, document, proto)
	{
		var widgets = SSP.Bus.widgets;
		var attributes;
		
		if(typeof document === 'string')
		{
			if(SSP.DOM.frames[document])
				document = SSP.DOM.frames[document].document;
			else if(typeof proto === 'undefined')
			{
				proto = document;
				document = undefined;
			}
		}
		
		if(typeof tag === 'object')
		{
			attributes = tag;
			tag = attributes.tagName;
			delete attributes.tagName;
		}
		
		if(this instanceof SSP.Widget)
		{
			if(typeof widgets[id] === 'undefined')
			{
				if(typeof tag === 'undefined')
				{
					this.node = SSP.DOM.byId(id, document);
					
					if(this.node)
						this.tagName = this.node.tagName;
				}
				else
				{
					this.tagName = tag.toUpperCase();
					this.node = SSP.DOM.create(this.tagName, document);
					this.node.id = id;
				}
				
				this.id = id;
				
				if(this.node)
				{
					this.layout = this.hasLayout() ? (this.node.layoutNode || this.node.parentNode) : this.node;
					this.loading = !!SSP.DOM.hasClass(this.layout, 'loading');
				}
				else
					this.loading = true;
				
				this.cleanersBefore = null;
				this.cleanersAfter = null;
				
				widgets[id] = this;
			}
			else
				throw new SSP.Error('Widget with id ' + id + ' already exists');
		}
		else
		{
			document = document || window.document;
			
			if(typeof widgets[id] !== 'undefined' && !SSP.DOM.contains(widgets[id].node, document))
				delete widgets[id];
			
			if(typeof widgets[id] === 'undefined')
			{
				proto = proto || SSP.Widget.protos[id];
				
				widgets[id] = proto
							? SSP.Object.create(proto, id, tag, document, proto)
							: new SSP.Widget(id, tag, document, proto);
			}
		}
		
		if(attributes)
		{
			var style = attributes.style;
			
			if(style)
				delete attributes.style;
			
			SSP.Bus.transform(widgets[id], SSP.Bus.ATTR, attributes);
			
			if(style)
				SSP.Bus.transform(widgets[id], SSP.Bus.STYLE, style);
		}
		
		return widgets[id];
	})
	;
	SSP.Widget.protos = {}
	;
	SSP.Widget.registerProto = (function(id, proto)
	{
		SSP.Widget.protos[id] = proto;
	})
	;
	SSP.Widget.prototype.setNode = (function(node)
	{
		this.node = node;
		this.tagName = node.tagName;
		this.layout = this.hasLayout() ? (this.node.layoutNode || this.node.parentNode) : this.node;
	})
	;
	SSP.Widget.prototype.getAttribute = (function(attr)
	{
		return this.node.getAttribute(attr);
	})
	;
	SSP.Widget.prototype.setAttribute = (function(attr, value)
	{
		var previous;
		
		attr = SSP.DOM.normalizeAttribute(attr);
		
		if(SSP.Bus.useState)
			previous = this.node.getAttribute(attr);
		
		this.node.setAttribute(attr, value);
		
		return previous;
	})
	;
	SSP.Widget.prototype.setClass = (function(className)
	{
		var previous;
		
		if(SSP.Bus.useState)
			previous = this.node.className;
		
		this.node.className = className;
		
		return previous;
	})
	;
	SSP.Widget.prototype.getStyle = (function(style)
	{
		return this.node.style[style];
	})
	;
	SSP.Widget.prototype.setStyle = (function(style, value)
	{
		if(value === null)
			value = '';
		
		var previous;
		
		if(SSP.Bus.useState)
			var previous = this.node.style[style];
		
		this.node.style[style] = value;
		
		return previous;
	})
	;
	SSP.Widget.prototype.getData = (function(key)
	{
		return SSP.DOM.getData(this.node, key);
	})
	;
	SSP.Widget.prototype.setData = (function(key, value)
	{
		return SSP.DOM.setData(this.node, key, value);
	})
	;
	SSP.Widget.prototype.show = (function()
	{
		var display = 'block';
		
		if(this instanceof SSP.Widget)
			return this.setStyle('display', display);
		else
			this.style.display = display;
	})
	;
	SSP.Widget.prototype.hide = (function()
	{
		var display = 'none';
		
		if(this instanceof SSP.Widget)
			return this.setStyle('display', display);
		else
			this.style.display = display;
	})
	;
	SSP.Widget.prototype.src = (function(value)
	{
		if(typeof value === 'undefined')
			switch(this.tagName)
			{
				case 'IFRAME':
				{
					if(typeof this.node.src !== 'undefined'
					&& typeof this._src === 'undefined')
					{
						try
						{
							this._src = SSP.Bus.windowLocation(this.node.contentWindow);
						}
						catch(e)
						{
							this._src = this.node.src;
						}
					}
					
					return this._src;
				}
				break;
				default:
				{
					return this.node.getAttribute('src');
				}
			}
		else
		{
			var previous;
			
			switch(this.tagName)
			{
				case 'IFRAME':
				{
					if(SSP.Bus.useState)
						previous = this._src;
					
					this._src = value;
					
					if(!this.node.src)
						this.node.src = value;
					else
						this.node.contentWindow.location.replace(value);
				}
				break;
				default:
				{
					if(SSP.Bus.useState)
						previous = this.node.getAttribute('src');
					
					this.node.setAttribute('src', value);
				}
			}
			
			return previous;
		}
	})
	;
	SSP.Widget.prototype.setInlineStyle = (function(css)
	{
		if(!this.stylesheet)
		{
			this.stylesheet = SSP.DOM.create('STYLE', {type: 'text/css'});
			SSP.DOM.byTag('HEAD')[0].appendChild(this.stylesheet);
		}
		
		var previous;
		
		if(SSP.Bus.useState)
			previous = SSP.Browser.IE
					 ? this.stylesheet.styleSheet.cssText
					 : this.stylesheet.innerHTML;
		
		if(SSP.Browser.IE)
			this.stylesheet.styleSheet.cssText = css;
		else
			this.stylesheet.innerHTML = css;
		
		return previous;
	})
	;
	SSP.Widget.prototype.html = (function(value, indicate)
	{
		if(typeof value === 'undefined')
			return this.node.innerHTML;
		else
		{
			var previous;
			
			if(SSP.Bus.useState)
				previous = this.node.innerHTML;
			
			var script = 0;
			var style = [];
			var noscriptRx = /<noscript\b[^>]*>((?:.|[\r\n])*?)<\/noscript>/gi;
			var scriptRx = /<script\b[^>]*>((?:.|[\r\n])*?)<\/script>/gi;
			var styleRx = /<style\b[^>]*>((?:.|[\r\n])*?)<\/style>/gi;
			
			if(value.match(noscriptRx))
				value = value.replace(noscriptRx, '');
			
			while(value.match(scriptRx))
			{
				if(script++ > 3)
				{
					SSP.System.console.log('Too much document.writing');
					break;
				}
				
				scriptRx.lastIndex = 0;
				
				var matches;
				var output = [];
				
				var evalFunc = SSP.Object.evalFunc;
				var write = document.write;
				
				document.write = function(string)
				{
					output.push(string);
				};
				
				var scriptEnd = 0;
				var scriptStart;
				
				while((matches = scriptRx.exec(value)) !== null)
				{
					scriptStart = scriptRx.lastIndex - matches[0].length;
					output.push(value.substr(scriptEnd, scriptStart - scriptEnd));
					scriptEnd = scriptRx.lastIndex;
					
					if(window.DEV)
						evalFunc(matches[1]);
					else
						try
						{
							evalFunc(matches[1]);
						}
						catch(e)
						{
							SSP.System.console.log(e);
						}
				}
				
				if(value.length > scriptEnd)
					output.push(value.substr(scriptEnd));
				
				document.write = write;
				
				value = output.join('');
			}
			
			if(value.match(styleRx))
			{
				styleRx.lastIndex = 0;
				
				var matches;
				
				while((matches = styleRx.exec(value)) !== null)
					style.push(matches[1]);
				
				value = value.replace(styleRx, '');
			}
			
			if(SSP.Browser.IE && this.node.tagName === 'SELECT')
			{
				var oldNode = this.node;
				this.node.outerHTML = this.node.outerHTML.replace(this.node.innerHTML + '</SELECT>', value + '</SELECT>');
				this.node = SSP.DOM.byId(this.id, SSP.DOM.getDocument(this.node));
				SSP.DOM.replace(oldNode, this.node);
				oldNode = null;
			}
			else
				this.node.innerHTML = value;
			
			if(this.loading)
			{
				if(typeof indicate === 'undefined')
					indicate = true;
				else
					indicate = !!indicate;
				
				if(indicate)
					this.indicate(false);
			}
			
			if(style.length)
				this.setInlineStyle(style.join(''));
			
			if(script)
				SSP.Bus.runDeferred();
			
			return previous;
		}
	})
	;
	SSP.Widget.prototype.isEmpty = (function()
	{
		return this.node.childNodes.length === 0
			|| this.node.childNodes.length === 1 && this.node.firstChild.tagName === 'SCRIPT';
	})
	;
	SSP.Widget.prototype.reload = (function(args, data, reflow)
	{
		if(!(args instanceof Array))
			args = [args];
		
		var src = args[0];
		var oldSrc;
		
		if(SSP.Bus.useState)
			oldSrc = this.node.src;
		
		switch(this.tagName)
		{
			case 'IFRAME':
			{
				if(typeof this._src === 'undefined')
				{
					try
					{
						this._src = SSP.Bus.windowLocation(this.node.contentWindow);
					}
					catch(e){}
				}
				
				if(this._src)
				{
					oldSrc = this._src;
					
					var oldLoc = SSP.String.parseUrl(this._src);
					delete oldLoc.protocol;
					delete oldLoc.hostname;
					delete oldLoc.hash;					
					oldLoc = oldLoc.toString();
					
					var newLoc = SSP.String.parseUrl(src);
					var hash = SSP.String.trimHash(newLoc.hash);
					delete newLoc.protocol;
					delete newLoc.hostname;
					delete newLoc.hash;
					newLoc = newLoc.toString();
				}
				
				if(typeof SSP.DOM.frameFinalizer !== 'undefined')
				{
					clearInterval(SSP.DOM.frameFinalizer);
					delete SSP.DOM.frameFinalizer;
				}
				
				if(!oldLoc || oldLoc !== newLoc)
				{
					var nohash = src.replace(/#.*$/, '');
					
					if(SSP.Browser.IE || !SSP.Browser.name || data === 'undefined')
						data = null;
					
					if(data)
					{
						try
						{
							this._src = src;
							var name = this.node.id || this.node.name;
							
							var contentWindow = this.node.contentWindow;
							var contentDocument = contentWindow.document;
							
							var emptyRx = /^(?:javascript|about):/;
							
							var isEmpty = this.node.src.match(emptyRx)
									   && contentWindow.location.toString().match(emptyRx)
									   && contentDocument.body.children.length === 0;
							
							if(isEmpty)
								var iframe = this.node;
							else
							{
								if(this.node.checker)
									clearInterval(this.node.checker);
								
								this.node.checker = undefined;
								
								SSP.DOM.trigger(contentWindow, 'beforeunload');
								SSP.DOM.trigger(contentWindow, 'unload');
								
								var contentWindowUid = contentWindow.uid;
								var contentDocumentUid = contentDocument.uid;
								
								SSP.DOM.cancelAll(undefined, contentWindow);
								
								var attrs = {
									id: name,
									name: name,
									src: 'javascript:',
									className: this.node.className,
									frameborder: this.node.getAttribute('frameborder'),
									scrolling: this.node.getAttribute('scrolling')
								};
								
								var uid = this.node.uid;
								
								var iframe = SSP.DOM.create('IFRAME', attrs);
								iframe.uid = uid;
								
								SSP.DOM.nodes.top[uid] = iframe;
								
								this.node.parentNode.appendChild(iframe);
								
								var contentWindow = iframe.contentWindow;
								var contentDocument = contentWindow.document;
								
								SSP.DOM.frames[name] = contentWindow;
								
								contentWindow.uid = contentWindowUid;
								SSP.DOM.nodes[name][contentWindowUid] = contentWindow;
								
								contentDocument.uid = contentDocumentUid;
								SSP.DOM.nodes[name][contentDocumentUid] = contentDocument;
							}
							
							if(!isEmpty)
								this.node.style.display = 'none';
							
							var injectBase = false;
							var matches = data.match(/<base\b[^>]*\bhref=["']([^"'>]+)["'][^>]*>/i);
							
							if(matches)
								var base = matches[1];
							else
							{
								var base = src.split('/');
								base.pop();
								base = base.join('/') + '/';
								
								injectBase = true;
							}
							
							data = data.replace(/\b(href=["']?|src=["']?|url\(["']?)([^/"'#&](?!(?:(?:ttps?|tp):\/\/|(?:avascript|ailto|ata):)[^"']*))/gi, '$1' + base + '$2');
							
							iframe.loading = true;
							
							var charset = document.characterSet || document.charset;
							
							if(SSP.Browser.Firefox)
								data = data.replace(/<script(\s+[^>]*\bsrc=)/gi, '<script charset="' + charset + '"$1');
							
							contentDocument.frameEmulated = src;
							contentDocument.open('text/html; charset=' + (charset), true);
							contentDocument.write(data);
							contentDocument.close();
							
							if(injectBase)
								contentDocument.getElementsByTagName('HEAD')[0].appendChild(SSP.DOM.create('BASE', {href: nohash, target: name}, contentDocument));
							
							if(!isEmpty)
							{
								for(var event in SSP.DOM.listeners.top)
									if(SSP.DOM.listeners.top[event][uid])
									{
										var handler = SSP.DOM.listeners.top[event][uid].handler;
										SSP.DOM.listeners.top[event][uid].node = iframe;
										
										if(handler)
										{
											if(this.node.addEventListener)
											{
												this.node.removeEventListener(event, handler, false);
												iframe.addEventListener(event, handler, false);
											}
											else
											{
												this.node.detachEvent('on' + event, handler);
												iframe.attachEvent(event, handler, false);
											}
										}
									}
							
								iframe.checker = this.node.checker;
								iframe.unloader = this.node.unloader;
								
								var node = this.node;
								this.node = iframe;
							}
							
							if(typeof SSP.DOM.frameFinalizer !== 'undefined')
							{
								clearInterval(SSP.DOM.frameFinalizer);
								delete SSP.DOM.frameFinalizer;
							}
							
							var finalizer = (function(){return function()
							{
								if(SSP.DOM.frames[name])
								{
									var contentDocument = SSP.DOM.frames[name].document;
									
									if(!contentDocument)
									{
										if(typeof SSP.DOM.frameFinalizer !== 'undefined')
										{
											clearInterval(SSP.DOM.frameFinalizer);
											delete SSP.DOM.frameFinalizer;
										}
										
										return;
									}
									
									if(!contentDocument.body)
										return;
									else if(typeof SSP.DOM.frameFinalizer !== 'undefined')
									{
										clearInterval(SSP.DOM.frameFinalizer);
										delete SSP.DOM.frameFinalizer;
									}
									
									var iframe = SSP.DOM.frames[name].frameElement;
									var contentWindow = SSP.DOM.frames[name];
									
									if(hash && contentDocument)
									{
										if(hash)
										{
											var scrollto = SSP.DOM.byName(hash, contentDocument)[0] || SSP.DOM.byId(hash, contentDocument);
											
											if(scrollto)
												SSP.DOM.requestAnimationFrame(function()
												{
													SSP.DOM.scroll(scrollto, true, false, true);
												});
										}
									}
									
									if(iframe && contentDocument)
									{
										if(window.DEV)
										{
											SSP.DOM.trigger(iframe, 'readystatechange');
											SSP.DOM.trigger(iframe, 'DOMContentLoaded');
										}
										else
											try
											{
												SSP.DOM.trigger(iframe, 'readystatechange');
												SSP.DOM.trigger(iframe, 'DOMContentLoaded');
											}
											catch(ee)
											{
												SSP.System.console.log(ee);
											}
									}
								}
							};
							})(hash, name);
							
							SSP.DOM.frameFinalizer = setInterval(finalizer, SSP.DOM.timeoutTiny);
							
							if(!isEmpty)
								node.parentNode.removeChild(node);
							
							var that = this;
							
							SSP.DOM.requestAnimationFrame(function()
							{
								that.indicate(false);
							});
						}
						catch(e)
						{
							
						}
					}
					
					if(!data || typeof e !== 'undefined')
					{
						try
						{
							if(this.node.src.match(/^javascript:/)
							|| this.node.contentWindow.location.toString().match(/^javascript:/))
							{
								if(this.node.checker)
									clearInterval(this.node.checker);
								
								this.node.checker = undefined;
								
								if(SSP.Browser.Chrome)
									this.node.unloader();
								else
									SSP.DOM.listen(this.node.contentWindow, 'unload', this.node.unloader);
							}
						}
						catch(ee)
						{
							
						}
						
						this.src(src);
						
						if(this.node.contentDocument)
							this.node.contentDocument.frameEmulated = false;
						
						var node = this.node;
						
						node.loading = true;
						
						SSP.Bus.listenFrame(node);
					}
				}
				else
				{
					if(hash)
					{
						var anchor = SSP.DOM.byName(hash, this.node.contentWindow.document)[0] || SSP.DOM.byId(hash, this.node.contentWindow.document);
						
						if(anchor)
						{
							this._src = src;
							SSP.DOM.scroll(anchor, true, false, true);
						}
						else
							this.src(src);
					}
					else
					{
						this._src = src;
						this.node.contentWindow.scrollTo(0, 0);
					}
					
					if(this.node.contentWindow.document
					&& this.node.contentWindow.document.documentElement
					&& this.node.contentWindow.document.documentElement.className === 'loading')
						this.node.contentWindow.document.documentElement.className = '';
					
					this.loading = true;
					this.indicate(false);
				}
			}
			break;
			case 'IMG':
			{
				this.src(src);
			}
			break;
			case 'TITLE':
			{
				document.title = SSP.String.getTextContent(SSP.String.unescapeHtml(data));
				
				SSP.Bus.track(document.title, SSP.Bus.windowLocation(), 'GET', true, true, true);
			}
			break;
			default:
			{
				var nodeSrc = this.node.getAttribute('src');
				
				if(typeof nodeSrc === 'undefined' || nodeSrc !== src || src === null || this.isEmpty())
				{
					if(typeof this.selected !== 'undefined')
						delete this.selected;
					
					this.src(src);
					this.html(data);
					
					if(this.tagName === 'SELECT'
					&& SSP.DOM.Select.isRegistered(this.node))
						SSP.DOM.Select.reload(this.node);
					
					if(reflow)
						SSP.DOM.triggerReflow(this.node);
				}
				else
					this.indicate(false);
			}
		}
		
		return oldSrc;
	})
	;
	SSP.Widget.prototype.refresh = (function(indicate)
	{
		var src = this.src();
		
		if(src && src !== 'null')
		{
			switch(this.tagName)
			{
				case 'IFRAME':
				{
					this.node.contentWindow.location.reload();
				}
				break;
				default:
				{
					var that = this;
					
					if(indicate)
						this.indicate(true);
					
					SSP.Bus.request(src, function(data){
						if(typeof data === 'string')
						{
							that.html(data);
							
							if(indicate)
								that.indicate(false);
						}
					});
				}
			}
		}
	})
	;
	SSP.Widget.prototype.indicate = (function(loading, className, noFreezeLayout)
	{
		if(!this.node)
			return;
		
		loading = !!loading;
		className = className || 'loading';
		
		if(this.loading !== loading
		|| !loading && SSP.DOM.hasClass(this.node.layoutNode || this.layout, className))
		{
			if(!noFreezeLayout && !SSP.DOM.hasClass(this.node, 'nofreezelayout') && !this.hasLayout())
			{
				if(loading)
				{
					this.oldWidth = this.node.style.width;
					this.oldHeight = this.node.style.height;
					
					this.node.style.width = this.node.offsetWidth + 'px';
					this.node.style.height = this.node.offsetHeight + 'px';
					
					if(this.node.tagName === 'SELECT')
					{
						this.node.style.boxSizing = 'border-box';
						this.node.style.MozBoxSizing = 'border-box';
						this.node.style.WebkitBoxSizing = 'border-box';
					}
				}
				else
				{
					if(typeof this.oldWidth !== 'undefined')
					{
						this.node.style.width = this.oldWidth;
						delete this.oldWidth;
					}
					else
						this.node.style.width = '';
					
					if(typeof this.oldHeight !== 'undefined')
					{
						this.node.style.height = this.oldHeight;
						delete this.oldHeight;
					}
					else
						this.node.style.height = '';
					
					if(this.node.tagName === 'SELECT')
					{
						this.node.style.boxSizing = '';
						this.node.style.MozBoxSizing = '';
						this.node.style.WebkitBoxSizing = '';
					}
				}
			}
			
			if(loading)
				SSP.DOM.addClass(this.node.layoutNode || this.layout, className);
			else
				SSP.DOM.removeClass(this.node.layoutNode || this.layout, className);
			
			this.loading = loading;
		}
	})
	;
	SSP.Widget.prototype.clean = (function()
	{
		if(this.cleanersBefore instanceof Array)
		{
			for(var i = 0; i < this.cleanersBefore.length; i++)
			{
				try
				{
					this.cleanersBefore[i].call(this);
				}
				catch(e)
				{
					
				}
			}
			
			this.cleanersBefore = null;
		}
		
		this.html('', false);
		this.src(null);
		
		if(this.cleanersAfter instanceof Array)
		{
			for(var i = 0; i < this.cleanersAfter.length; i++)
			{
				try
				{
					this.cleanersAfter[i].call(this);
				}
				catch(e)
				{
					
				}
			}
			
			this.cleanersAfter = null;
		}
	})
	;
	SSP.Widget.prototype.addCleaner = (function(callback, before)
	{
		if(before)
		{
			if(!(this.cleanersBefore instanceof Array))
				this.cleanersBefore = [];
			
			this.cleanersBefore.push(callback);
		}
		else
		{
			if(!(this.cleanersAfter instanceof Array))
				this.cleanersAfter = [];
			
			this.cleanersAfter.push(callback);
		}
	})
	;
	SSP.Widget.prototype.merge = (function(args, data)
	{
		if(!(args instanceof Array))
			args = [args];
		
		var src = args[0];
		var recurseTags = args[1];
		var breakOnAppend = args[2];
		var oldSrc = this.node.src;
		
		if(typeof this.node.src === 'undefined' || this.node.src !== src || src === null || this.isEmpty())
		{
			this.src(src);
			
			if(this.node.firstChild)
			{
				var tmp = SSP.DOM.create('DIV');
				tmp.innerHTML = data;
				
				SSP.DOM.merge(this.node.firstChild, tmp.firstChild, recurseTags, breakOnAppend, true);
				
				if(breakOnAppend)
					delete this.node.firstChild.appended;
				
				SSP.DOM.destroy(tmp);
			}
			else
				this.node.innerHTML = data;
			
			SSP.DOM.triggerReflow();
		}
	})
	;
	SSP.Widget.prototype.unique = (function(newNodes)
	{
		var oldNode;
		var newNode;
		
		for(var i = 0; i < newNodes.length; i++)
		{
			var newNode = newNodes[i];
			
			if(SSP.DOM.isNode(newNode) && newNode.id)
			{
				oldNode = SSP.DOM.byId(newNode.id);
				
				if(oldNode)
					SSP.DOM.destroy(oldNode);
			}
		}
	})
	;
	SSP.Widget.prototype.append = (function(args, data)
	{
		var tmp = SSP.DOM.create('DIV');
		
		tmp.innerHTML = data;
		
		this.unique(tmp.children);
		
		var old = this.node.innerHTML;
		
		this.node.innerHTML = old + data;
		
		this.scroll(true);
	})
	;
	SSP.Widget.prototype.prepend = (function(args, data)
	{
		var tmp = SSP.DOM.create('DIV');
		
		tmp.innerHTML = data;
		
		this.unique(tmp.children);
		
		var old = this.node.innerHTML;
		
		this.node.innerHTML = data + old;
		
		this.scroll(false);
	})
	;
	SSP.Widget.prototype.scroll = (function(position, child, ifNeeded, alignLeft)
	{
		if(typeof alignLeft === 'undefined')
			alignLeft = true;
		else
			alignLeft = !!alignLeft;
		
		if(typeof position === 'undefined')
			position = false;
		
		if(!ifNeeded && position === true) // scroll bottom
			SSP.DOM.scroll(this.node.layoutNode || this.layout, false, false, alignLeft);
		else if(!ifNeeded && position === false) // scroll top
			SSP.DOM.scroll(this.node.layoutNode || this.layout, true, false, alignLeft);
		else
		{
			if(typeof child === 'string')
				child = this.tagName !== 'IFRAME'
					  ? SSP.DOM.byId(child)
					  : SSP.DOM.byId(this.node.contentWindow.document);
			
			if(!child)
				return;
			
			SSP.DOM.scroll(child, this.node.layoutNode || this.layout, ifNeeded, alignLeft);
		}
	})
	;
	SSP.Widget.prototype.select = (function(child, leafId, collapse, noScroll)
	{
		if(!this.node)
			return;
		
		if(child instanceof Array)
		{
			child = child[0];
			leafId = undefined;
		}
		
		if(typeof child === 'string')
			child = SSP.DOM.byId(child);
		
		if(!child)
			return false;
		
		var widget = this;
		
		if(typeof this.selected !== 'undefined' && typeof leafId === 'undefined')
		{
			if(this.selected === child.id)
			{
				if(!noScroll)
					SSP.DOM.requestAnimationFrame(function()
					{
						if(widget.hasScroll())
						{
							if(SSP.DOM.hasClass(widget.node.firstChild, 'tree'))
								child = child.firstChild;
							
							SSP.DOM.scroll(child, widget.node.layoutNode || widget.layout, true);
						}
					});
				
				return;
			}
			
			var selected = SSP.DOM.byId(this.selected);
			
			if(child.parentNode === selected.parentNode
			&& !SSP.DOM.hasClass(child, 'collapsed'))
			{
				SSP.DOM.removeClass(selected, 'active');
				SSP.DOM.addClass(child, 'active');
				
				if(!noScroll)
					SSP.DOM.requestAnimationFrame(function()
					{
						if(widget.hasScroll())
							SSP.DOM.scroll(child, widget.node.layoutNode || widget.layout, true);
					});
				
				this.selected = child.id;
				
				return true;
			}
			
			var parent = SSP.DOM.findParent(child, selected);
			
			while(parent && parent !== this.node && !parent.id)
				parent = parent.parentNode;
			
			var parentId = parent ? parent.id : undefined;
			parentId = this.unselect(selected, parentId, collapse);
		}
		else
			var parentId = undefined;
		
		if(child)
		{
			if(SSP.DOM.hasClass(child, 'collapsed'))
			{
				SSP.DOM.removeClass(child, 'collapsed');
				SSP.DOM.addClass(child, 'expanded');
			}
			
			SSP.DOM.addClass(child, 'active');
			
			if(typeof leafId === 'undefined')
			{
				leafId = child.id;
				var tree = SSP.DOM.hasClass(this.node.firstChild, 'tree');
			}
			else
				var tree = true;
			
			if(tree
			&& child.parentNode !== this.node
			&& (!parentId || child.parentNode.id !== parentId))
				return this.select(child.parentNode, leafId, void 0, noScroll);
			else
			{
				var leaf = SSP.DOM.byId(leafId);
				
				if(tree && leaf.firstChild)
					leaf = leaf.firstChild;
				
				if(!noScroll)
					SSP.DOM.requestAnimationFrame(function()
					{
						if(widget.hasScroll())
							SSP.DOM.scroll(leaf, widget.node.layoutNode || widget.layout, true);
					});
				
				this.selected = leafId;
				
				return true;
			}
		}
	})
	;
	SSP.Widget.prototype.unselect = (function(child, parentId, collapse)
	{
		if(!this.node)
			return;
		
		if(child && child instanceof Array)
			child = child[0];
		
		if(!child)
		{
			if(this.selected)
				child = SSP.DOM.byId(this.selected);
			else
				return false;
		}
		
		if(typeof child === 'string')
			child = SSP.DOM.byId(child);
		
		if(child)
		{
			if(collapse && SSP.DOM.hasClass(child, 'expanded'))
			{
				SSP.DOM.removeClass(child, 'expanded');
				SSP.DOM.addClass(child, 'collapsed');
			}
			
			SSP.DOM.removeClass(child, 'active');
			
			if(parentId)
				var tree = true;
			else
				var tree = SSP.DOM.hasClass(this.node.firstChild, 'tree');
			
			if(tree
			&& child.parentNode !== this.node
			&& (!parentId || child.parentNode.id !== parentId))
				return this.unselect(child.parentNode, parentId, collapse);
			else
			{
				this.selected = undefined;
				return parentId ? parentId : true;
			}
		}
	})
	;
	SSP.Widget.prototype.hasClass = (function(className)
	{
		return SSP.DOM.hasClass(this.node, className);
	})
	;
	SSP.Widget.prototype.addClass = (function(className)
	{
		return SSP.DOM.addClass(this.node, className);
	})
	;
	SSP.Widget.prototype.removeClass = (function(className)
	{
		return SSP.DOM.removeClass(this.node, className);
	})
	;
	SSP.Widget.prototype.setClass = (function(className)
	{
		this.node.className = className;
	})
	;
	SSP.Widget.prototype.hasLayout = (function()
	{
		if(this.tagName === 'IFRAME')
			return true;
		
		if(this.node.layoutNode)
			return true;
		
		if(SSP.DOM.hasClass(this.node.parentNode, 'l'))
		{
			var style = SSP.DOM.getComputedStyle(this.node);
			
			if(style.overflow === 'auto'
			|| style.overflow === 'scroll'
			|| style.overflowX === 'auto'
			|| style.overflowX === 'scroll'
			|| style.overflowY === 'auto'
			|| style.overflowY === 'scroll')
				return false;
			else
				return true;
		}
		else
			return false;
	})
	;
	SSP.Widget.prototype.hasScroll = (function()
	{
		if(this.tagName === 'IFRAME')
		{
			var documentElement = SSP.DOM.getContainer(this.node.contentWindow.document);
			return documentElement.scrollHeight > documentElement.clientHeight
				|| documentElement.scrollWidth > documentElement.clientWidth;
		}
		else if(this.node.layoutNode)
			return this.node.layoutNode.scrollHeight > this.node.layoutNode.clientHeight
				|| this.node.layoutNode.scrollWidth > this.node.layoutNode.clientWidth;
		else
			return this.layout.scrollHeight > this.layout.clientHeight
				|| this.layout.scrollWidth > this.layout.clientWidth;
	})
	;
	SSP.Widget.prototype.listen = (function(event, callback)
	{
		SSP.DOM.listen(this.node, event, callback);
	})
	;
	SSP.Widget.prototype.cancel = (function(event, callback)
	{
		SSP.DOM.cancel(this.node, event, callback);
	})
	;
	
	SSP.Tree =
	{
		handleClick: (function(event)
		{
			if(!event.isLeft)
				return true;
			
			var target = event.target;
			var li;
			
			if(SSP.DOM.isNode(target))
			{
				if(target.tagName === 'A')
				{
					li = target.parentNode;
				}
				else if(target.tagName === 'LI')
				{
					li = target;
					
					if(!SSP.Tree.clickedOnExpander(event, li))
						return true;
				}
				else
					return true;
				
				if(SSP.DOM.hasClass(li, 'collapsed'))
				{
					if(li.children.length === 1)
					{
						if(!SSP.DOM.hasClass(li, 'loading'))
						{
							SSP.DOM.addClass(li, 'loading');
							
							if(target.tagName === 'LI')
								SSP.DOM.trigger(li.firstChild, 'click');
						}
					}
					else
					{
						SSP.DOM.removeClass(li, 'collapsed');
						SSP.DOM.addClass(li, 'expanded');
					}
				}
				else if(target.tagName === 'LI' && SSP.DOM.hasClass(li, 'expanded'))
				{
					SSP.DOM.removeClass(li, 'expanded');
					SSP.DOM.addClass(li, 'collapsed');
				}
				
				if(target.tagName === 'A')
				{
					var widget;
					
					if(this.id && (widget = SSP.Widget(this.id)))
						widget.select(li, void 0, void 0, true);
				}
			}
		})
		,
		clickedOnExpander: (function(event, li)
		{
			var coords = li.getBoundingClientRect();
			var firstChild = li.firstElementChild || li.firstChild;
			var childCoords = firstChild.getBoundingClientRect();
			var padding = childCoords.left - coords.left;
			
			if(event.clientX > coords.left + padding
			|| event.clientY > coords.top + padding)
				return false;
			else
				return true;
		})
	};
	
	/*@cc_on if(false){ @*/
	SSP.History	= window.history;
	/*@cc_on }else{
	SSP.History	= window.History;
	} @*/
	
	SSP.Bus =
	{
		TAG:	0,
		ATTR:	1,
		STYLE:	2,
		COMMAND:3,
		INLINE:	4,
		EVENT:	5,
		PARENT:	6,
		CHILD:	7,
		BEFORE:	8,
		AFTER:	9,
		PROTO:	10,
		
		OK:						200,
		NO_CONTENT:				204,
		MOVED_PERMANENTLY:		301,
		FOUND:					302,
		NOT_MODIFIED:			304,
		UNAUTHORIZED:			401,
		FORBIDDEN:				403,
		NOT_FOUND:				404,
		REQUEST_TIMEOUT:		408,
		GONE:					410,
		TOO_MANY_REQUESTS:		429,
		INTERNAL_SERVER_ERROR:	500,
		SERVICE_UNAVAILABLE:	503,
		IE9_NO_CONTENT:			1223,
		
		EOT: 'EOT',
		ERR: 'ERR',
		
		initialized: false,
		tracking: true,
		appPath: undefined,
		modes: [],
		router: undefined,
		state: {},
		requests: {},
		widgets: {},
		loadingImg: '/img/loading.gif',
		useHash: false,
		useState: false,
		useStat: true,
		location: undefined,
		
		init: (function(appPath, modes, router, state, loadingImg, useHash, useState)
		{
			if(SSP.History)
				try
				{
					if(SSP.Browser.IE)
					{
						History.isInternetExplorer = {cached: true};
						History.getInternetExplorerMajorVersion = {cached: SSP.Browser.IE};
						History.options.html4Mode = true;
						SSP.History.init();
					}
				}
				catch(e)
				{
					if(console)
						console.log(e);
				}
			
			this.appPath = appPath;
			this.modes = modes;
			this.router = router;
			
			this.router.init();
			
			this.state = state;
			
			if(loadingImg)
				this.loadingImg = loadingImg;
			
			if(SSP.Browser.IE)
				useHash = true;
			else
				useHash = !!useHash;
			
			if(!('onpopstate' in window))
				useHash = true;
			
			this.useHash = useHash;
			this.useState = !!useState;
			
			if(this.useStat && !SSP.Bus.canUseStat())
				this.useStat = false;
			
			var widget;
			
			for(var id in state)
				if(widget = SSP.Widget(id))
				{
					if(widget.node)
					{
						if(typeof state[id][this.EVENT] !== 'undefined')
							this.listenWidget(widget, state[id][this.EVENT]);
						
						if(typeof state[id][this.COMMAND] !== 'undefined')
							for(var command in state[id][this.COMMAND])
								this.command(widget, command, state[id][this.COMMAND][command]);
					}
				}
			
			this.listenFrame(window);
			
			var location = SSP.String.parseUrl(window.location);
			var hash = SSP.String.trimHash();
			
			var statInit = !hash;
			SSP.Bus.initialized = null;
			
			if(this.useHash)
			{
				if(hash)
				{
					if(location.pathname !== hash)
					{
						var callback = function(event)
						{
							event = event || window.event;
							var cancel = SSP.DOM.cancel(window, 'hashchange', callback);
							SSP.Bus.initialized = true;
							SSP.Bus.tracking = false;
						};
						
						SSP.DOM.listen(window, 'hashchange', callback);
						
						location.hash = '';
						
						window.location.replace(location.toString() + '#');
					}
					else
						hash = false;
				}
				
				this.location = SSP.String.trim(SSP.Bus.windowLocation(), '#', SSP.String.TRIM_RIGHT);
			}
			else
			{
				delete location.hash;
				this.location = location.toString();
			}
			
			var iframes = SSP.DOM.byTag('IFRAME');
			for(var i = 0; i < iframes.length; i++)
				if(!SSP.DOM.hasClass(iframes[i], 'nojs'))
					this.listenFrame(iframes[i]);
			
			if(this.useHash && hash)
			{
				location.hash = hash;
				window.location.replace(location.toString());
			}
			else
			{
				if(!this.useHash && hash) // fix for Chrome BFCache (no popstate trigger on pageshow)
				{
					window.location.replace(location.toString() + '#');
					location.hash = hash;
					
					this.initialized = true;
					this.tracking = false;
					
					window.location.replace(location.toString());
				}
				else
				{
					this.initialized = true;
					this.tracking = false;
				}
			}
			
			if(statInit)
			{
				window.deferred.push((function(){return function(){SSP.Bus.referer = window.document.referrer;};})());
				window.deferred.push((function(){return function(){SSP.Bus.stat(void 0, window.document.referrer);};})());
				window.deferred.push((function(){return function(){SSP.Bus.referer = SSP.Bus.location;};})());
			}
		})
		,
		hijack: (function(event)
		{
			if(!SSP.Bus.initialized)
				return true;
			
			event = event || window.event;
			
			if(SSP.Bus.isCanceled(event))
				return false;
			
			var target = event.target || event.srcElement;
			
			if(!target && SSP.Bus.isHistory(event))
				target = window;
			
			var notrack = false;
			
			if(SSP.DOM.isNode(target) && !SSP.Bus.isHistory(event))
			{
				if(target.tagName === 'INPUT' && target.type === 'submit')
					target = target.form;
				else if(target.tagName !== 'A' && target.tagName !== 'FORM')
				{
					var parents = SSP.DOM.getChain(target, true);
					
					while(parents.length)
					{
						if(parents[0].tagName === 'A')
						{
							target = parents[0];
							break;
						}
						else
							parents.shift();
					}
				}
				
				if(SSP.DOM.hasClass(target, 'nojs'))
					return true;
				else if(SSP.DOM.hasClass(target, 'notrack'))
					notrack = true;
				
				switch(target.tagName)
				{
					case 'A':
					{
						if(!event.isLeft
						|| target.protocol === 'mailto:'
						|| target.target === '_blank')
							return true;
						
						var url = target.getAttribute('href');
						var method = 'GET';
						var data = null;
					}
					break;
					case 'FORM':
					{
						if(event.type !== 'submit')
							return true;
						
						var action = SSP.String.parseUrl(target.action);
						var values = SSP.Form.values(target);
						
						if(action.search)
						{
							values = SSP.Array.merge(values, SSP.String.parseStr(action.search));
							delete action.search;
						}
						
						var method = target.method.toUpperCase();
						
						if(method === 'GET')
						{
							var data = null;
							action.search = SSP.String.toUrlComponent(values);
						}
						else
							var data = values;
						
						var url = action.toString();
					}
					break;
					default:
					{
						return true;
					}
				}
				
				var a = SSP.String.parseUrl(url);
				
				if(!a.hostname)
					a.hostname = window.location.hostname;
				
				if(!a.protocol)
					a.protocol = window.location.protocol;
				
				url = a.toString();
				
				if(a.hostname !== window.location.hostname
				|| a.protocol !== window.location.protocol
				|| ('/' + SSP.String.ltrim(a.pathname, '/')).indexOf(SSP.Bus.appPath) !== 0)
					return true;
				
				if(typeof event.from === 'undefined')
					event.from = SSP.Bus.windowLocation();
				
				event.to = url;
				event.method = method;
				event.async = true;
				event.values = data;
			}
			else if(!SSP.Bus.tracking
			&& !target.frameElement
			&& (event.type === 'popstate' || typeof event.explicitOriginalTarget === 'undefined' || target === event.explicitOriginalTarget))
			{
				event.from = SSP.Bus.location;
				
				if(SSP.Bus.useHash)
				{
					var url = SSP.Bus.windowLocation();
					var method = 'GET';
					var async = true;
				}
				else
				{
					if(SSP.Browser.IE)
					{
						var state = SSP.History.getState();
						
						var url = state.url;
						var title = state.title;
						var method = state.method || 'GET';
						var async = typeof state.async === 'undefined' ? true : state.async;
					}
					else
					{
						var state = event.state;
						
						if(state)
						{
							var url = state.url || SSP.Bus.windowLocation();
							var title = state.title;
							var method = state.method || 'GET';
							var async = typeof state.async === 'undefined' ? true : state.async;
						}
						else
						{
							var url = SSP.Bus.windowLocation();
							var title = '';
							var method = 'GET';
							var async = true;
						}
					}
					
					if(title)
						window.document.title = title;
				}
				
				event.to = url;
				event.method = method;
				event.async = async;
			}
			else
				return true;
			
			if(!SSP.Browser.IE)
			{
				if(event.type === 'popstate'
				|| event.type === 'hashchange' && (!SSP.Browser.name || SSP.Browser.Edge))
				{
					if(typeof SSP.Bus.falseHashChange === 'undefined')
						SSP.Bus.falseHashChange = false;
					else
						SSP.Bus.falseHashChange = event.to;
				}
				else if(!event.type && SSP.Bus.falseHashChange === event.to)
				{
					SSP.Bus.falseHashChange = false;
					
					return true;
				}
			}
			
			if(SSP.Bus.router.transform)
				SSP.Bus.router.transform(event);
			
			var referer;
			
			if(!SSP.Bus.referer)
			{
				if(referer = SSP.Bus.cookie('BUS_REFERER'))
				{
					SSP.Bus.referer = referer;
					SSP.Bus.deleteCookie('BUS_REFERER');
				}
				else
					SSP.Bus.referer = window.document.referrer || SSP.Bus.location;
			}
			else
				SSP.Bus.referer = SSP.Bus.location;
			
			if(!notrack)
				SSP.Bus.location = event.to;
			
			if(SSP.Bus.router.route)
			{
				var route = SSP.Bus.router.route(event);
				
				if(SSP.Bus.isCanceled(event))
					return false;
				else if(route === true)
					return true;
				
				if(route)
				{
					if(!data)
						data = {};
					
					data['event'] = route;
				}
			}
			
			if(!notrack && !SSP.Bus.isHistory(event) && SSP.DOM.isNode(target))
			{
				SSP.Bus.track(event);
				
				if(!SSP.Bus.initialized)
				{
					if(typeof event.history !== 'undefined' && event.method === 'GET')
					{
						SSP.Bus.navigate(event.history);
						return false;
					}
					else
						return true;
				}
			}
			
			try
			{
				for(var tid in SSP.Bus.requests)
				{
					if(SSP.Bus.requests[tid].readyState !== 4)
						SSP.XHR.finish(SSP.Bus.requests[tid]);
					
					delete SSP.Bus.requests[tid];
				}
				
				if(event.nonce)
					data[event.nonce] = '';
				
				var url = event.to;
				
				if(!SSP.Browser.IE)
					url = url.replace(/%$/, '%25');
				
				SSP.Bus.syncServer(url, event.method, event.async, data, event.receiver, notrack, event.headers);
			}
			catch(e)
			{
				SSP.Bus.panic(e);
				
				return true;
			}
			
			SSP.Bus.cancel(event);
			
			return false;
		})
		,
		runDeferred: (function()
		{
			if(window.deferred instanceof Array
			&& window.deferred.length)
			{
				if(SSP.DOM.allScriptsAndStylesheetsLoaded())
				{
					for(var i = 0; i < window.deferred.length; i++)
					{
						if(window.DEV)
							window.deferred[i].call(window);
						else
							try
							{
								window.deferred[i].call(window);
							}
							catch(e)
							{
								var reload = false;
								
								SSP.System.console.log(e);
								
								if(reload)
									location.reload();
							}
					}
					
					window.deferred = [];
					
					if(typeof e !== 'undefined')
						try
						{
							SSP.Bus.statError(e.message, e.fileName, e.lineNumber, e.columnNumber, e);
						}
						catch(ee)
						{
							
						}
				}
				else
					SSP.DOM.waitScriptsAndStylesheets(SSP.Bus.runDeferred).call(this);
			}
		})
		,
		indicate: (function(loading, widget)
		{
			if(widget)
				widget.indicate(loading);
			else
			{
				if(loading)
				{
					SSP.DOM.addClass(document.body, 'progress');
					
					if(SSP.Browser.supports.faviconchange)
						SSP.DOM.setFavicon(SSP.Bus.loadingImg);
				}
				else
				{
					if(SSP.Browser.supports.faviconchange)
					{
						var img = '/favicon.ico';
						var faviconStatic = SSP.DOM.byId('favicon_static');
						
						if(faviconStatic && faviconStatic.href)
							img = faviconStatic.href;
						
						SSP.DOM.setFavicon(img);
					}
					
					SSP.DOM.requestAnimationFrame(function()
					{
						SSP.DOM.removeClass(document.body, 'progress');
						SSP.DOM.triggerReflow();
					});
				}
			}
		})
		,
		listenFrame: (function(contentWindow)
		{
			if(contentWindow.type === 'readystatechange')
				contentWindow = this;
			
			if(!SSP.DOM.isWindow(contentWindow))
			{
				var iframe;
				
				if(typeof contentWindow === 'string')
					iframe = SSP.DOM.byId(contentWindow);
				else if(SSP.DOM.isNode(contentWindow))
					iframe = contentWindow;
				else
				{
					contentWindow = contentWindow || window.event;
					iframe = contentWindow.target || contentWindow.srcElement;
				}
				
				contentWindow = iframe.contentWindow;
			}
			else if(contentWindow.frameElement)
				var iframe = contentWindow.frameElement;
			else
				var iframe = false;
			
			try
			{
				var contentDocument = contentWindow.document;
				var name = SSP.DOM.getWindowName(contentWindow);
			}
			catch(e)
			{
				return false;
			}
			
			if(!name)
				return false;
			
			SSP.DOM.frames[name] = contentWindow;
			
			if(!iframe)
			{
				contentWindow.onunload = (function(){return function(){};})();
				
				if(!SSP.Bus.useHash && !SSP.Browser.IE)
				{
					contentWindow.addEventListener('popstate', SSP.Bus.hijack);
					
					if(!SSP.Browser.name
					|| SSP.Browser.Edge)
						contentWindow.addEventListener('hashchange', SSP.Bus.hijack);
				}
				else
				{
					if(SSP.Browser.supports.hashchange)
						SSP.DOM.listen(contentWindow, 'hashchange', SSP.Bus.hijack);
					else
					{
						var checker = (function(){return function()
						{
							if(SSP.DOM.lastCheckedHash !== contentWindow.location.hash)
							{
								SSP.DOM.lastCheckedHash = contentWindow.location.hash;
								
								SSP.Bus.simulateHashChange();
							}
						};
						})(contentWindow);
						
						SSP.DOM.lastCheckedHash = contentWindow.location.hash;
						
						setInterval(checker, SSP.DOM.timeoutMedium);
					}
				}
				
				SSP.DOM.listen(contentDocument.body, 'click', SSP.Bus.hijack);
				
				SSP.DOM.walk(contentDocument.forms, SSP.DOM.listen, ['submit', SSP.Bus.hijack]);
			}
		})
		,
		simulateHashChange: function()
		{
			var event = {type: 'hashchange', target: window};
			
			if(SSP.Bus.initialized)
				SSP.Bus.hijack(event);
			else
				SSP.DOM.trigger(event.target, event.type);
		}
		,
		listenWidget: (function(widget, events)
		{
			if(typeof widget === 'string')
				widget = SSP.Widget(widget);
			
			if(typeof events.listen === 'object')
			{
				var callback;
				
				for(var i = 0; i < events.listen.length; i++)
				{
					if(typeof events.listen[i].callback === 'string')
						callback = SSP.Object.byPath(events.listen[i].callback);
					else
						callback = events.listen[i].callback;
					
					if(typeof callback !== 'function')
						continue;
					
					SSP.DOM.listen(
						widget.node,
						events.listen[i].event,
						callback
					);
				}
			}
			
			if(typeof events.trigger === 'object')
				for(var i = 0; i < events.trigger.length; i++)
					this.setTrigger(
						widget.node,
						events.trigger[i].event,
						events.trigger[i].trigger
					);
		})
		,
		setTrigger: function(widget, event, trigger, args)
		{
			SSP.DOM.listen(widget, event, SSP.Bus.trigger, [trigger, args]);
		}
		,
		syncServer: (function(url, method, async, data, receiver, notrack, headers)
		{
			SSP.Bus.indicate(true);
			
			if(!receiver)
			{
				if(SSP.Bus.router && typeof SSP.Bus.router.receive === 'function')
					receiver = SSP.Bus.router.receive;
				else
					receiver = SSP.Bus.receive;
			}
			
			if(SSP.Bus.router)
				var callback = {
					success: receiver,
					error: SSP.Bus.router.handleError,
					progress: SSP.Bus.router.handleProgress,
					abort: SSP.Bus.router.handleAbort,
					timeout: SSP.Bus.router.handleTimeout
				};
			else
				var callback = receiver;
			
			var request = SSP.Bus.request(
				SSP.String.toUrl(url, 'bus'),
				callback,
				data,
				method,
				async,
				headers
			);
			
			request.htmlUrl = SSP.Bus.location;
			request.notrack = notrack;
			
			return request;
		})
		,
		isHistory: (function(event)
		{
			try
			{
				return event.type === 'hashchange'
					|| event.type === 'popstate'
					|| !event.type;
			}
			catch(e)
			{
				return true;
			}
		})
		,
		track: (function(title, url, method, async, replace)
		{
			SSP.Bus.tracking = true;
			
			if(typeof title === 'object')
			{
				var event = title;
				
				title = event.title;
				url = event.history || event.to;
				method = event.method;
				async = event.async;
				
				if(typeof replace === 'undefined')
					replace = SSP.Bus.isHistory(event);
			}
			
			if(!SSP.Bus.useHash && !SSP.Browser.IE)
			{
				if(!title)
					title = document.title;
				
				var func = replace
						 ? SSP.History.replaceState
						 : SSP.History.pushState;
				
				func.call(
					SSP.History,
					{method: method, async: async, state: this.useState ? this.state : undefined},
					title,
					url
				);
				
				if(SSP.Bus.router && typeof SSP.Bus.router.toInternal === 'function')
					url = SSP.Bus.router.toInternal(url);
				
				SSP.Bus.location = url;
				
				SSP.Bus.tracking = false;
			}
			else
			{
				var windowLocation = SSP.Bus.windowLocation();
				
				var oldPath = windowLocation.split('#')[0];
				var newPath = url.split('#')[0];
				
				if(decodeURIComponent(oldPath) !== decodeURIComponent(newPath))
					SSP.Bus.initialized = false;
				else if(!window.listeningHashchange)
				{
					var callback = function(event)
					{
						event = event || window.event;
						
						if(SSP.Bus.tracking)
						{
							SSP.Bus.cancel(event);
							
							if(window.listeningHashchange === decodeURIComponent(SSP.Bus.windowLocation()))
							{
								var url = window.listeningHashchange;
								
								if(SSP.Bus.router && typeof SSP.Bus.router.toInternal === 'function')
									url = SSP.Bus.router.toInternal(url);
								
								SSP.Bus.location = url;
								
								SSP.Bus.tracking = false;
							}
						}
					};
					
					SSP.DOM.listen(window, 'hashchange', callback);
				}
				
				if(windowLocation !== url)
				{
					if(url.indexOf('#') === -1)
						url += '#';
					
					window.listeningHashchange = url;
					
					if(replace)
						window.location.replace(url);
					else
						window.location = url;
				}
				else
					SSP.Bus.tracking = false;
				
				if(title)
					document.title = SSP.String.getTextContent(SSP.String.unescapeHtml(title));
			}
		})
		,
		canUseStat: (function()
		{
			if(!SSP.Bus.cookie('DNT') || window != window.top)
				return true;
			else
				return false;
		})
		,
		statPlugins:
		{
			ga:
			{
				loaded: false
				,
				active: false
				,
				code: undefined
				,
				slots: {}
				,
				scopes:
				{
					visitor: 1,
					session: 2,
					page:	 3,
					request: 3
				}
				,
				init: function(code)
				{
					SSP.Bus.statPlugins.ga.code = code;
					
					(function(i, s, o, g, r, a, m)
					{
						i['GoogleAnalyticsObject'] = r;
						
						i[r] = i[r] || function()
						{
							(i[r].q = i[r].q || []).push(arguments);
						};
						
						i[r].l = 1 * new Date();
						a = s.createElement(o);
						
						a.onerror = (function()
						{
							return function()
							{
								SSP.Bus.statPlugins.ga.active = false;
							};
						}
						)();
						
						a.src = g;
						
						if(!SSP.Browser.IE)
						{
							a.async = true;
							
							a.onload = (function()
							{
								return function()
								{
									setTimeout(SSP.Bus.statPlugins.ga.initContinue, 0);
								};
							}
							)();
						}
						
						m = s.getElementsByTagName(o)[0];
						m.parentNode.insertBefore(a, m);
						
						if(SSP.Browser.IE)
							SSP.Bus.statPlugins.ga.initContinue();
					})
					(window, window.document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
				}
				,
				initContinue: function()
				{
					ga('create', SSP.Bus.statPlugins.ga.code, 'auto');
					
					SSP.Bus.statPlugins.ga.loaded = true;
				}
				,
				stat: function(url, referer)
				{
					if(SSP.Bus.statPlugins.ga.notFirstHit)
						try
						{
							var performance = window.performance;
							window.performance = null;
							var webkitPerformance = window.webkitPerformance;
							window.webkitPerformance = null;
						}
						catch(e)
						{
							
						}
					
					if(referer && referer !== url)
						ga('set', 'referrer', referer);
					else
						ga('set', 'referrer', null);
					
					ga('send', 'pageview', url);
					
					if(SSP.Bus.statPlugins.ga.notFirstHit)
						try
						{
							window.performance = performance;
							window.webkitPerformance = webkitPerformance;
						}
						catch(e)
						{
							
						}
					
					SSP.Bus.statPlugins.ga.notFirstHit = true;
				}
				,
				event: function(eventClass, eventAction, eventLabel, eventValue)
				{
					if(typeof eventValue === 'undefined')
						eventValue = 0;
					
					ga('send', 'event', eventClass, eventAction, eventLabel, eventValue, {nonInteraction: 1});
				}
				,
				variable: function(key, value, scope)
				{
					if(typeof value === 'undefined')
						value = null;
					
					if(typeof SSP.Bus.statPlugins.ga.slots[key] !== 'undefined')
						ga('set', 'dimension' + SSP.Bus.statPlugins.ga.slots[key], value);
					
					if(scope === 'visitor')
						switch(key)
						{
							case 'utm_source':
							{
								ga('set', 'campaignSource', value);
							}
							break;
							case 'utm_medium':
							{
								ga('set', 'campaignMedium', value);
							}
							break;
							case 'utm_campaign':
							{
								ga('set', 'campaignName', value);
							}
							break;
							case 'utm_content':
							{
								ga('set', 'campaignContent', value);
							}
							break;
						}
				}
			}
			,
			ym:
			{
				loaded: false
				,
				active: false
				,
				code: undefined
				,
				params: {}
				,
				userParams: undefined
				,
				emulated: false
				,
				init: function(code)
				{
					code = SSP.Number.parseInt(code);
					SSP.Bus.statPlugins.ym.code = code;
					
					if(SSP.Browser.Android || SSP.Browser.IOS || SSP.Bus.cookie('YM_EMULATED'))
					{
						SSP.Bus.statPlugins.ym.emulated = true;
						SSP.Bus.statPlugins.ym.loaded = true;
					}
					else
						(function(m, e, t, r, i, k, a)
						{
							if(!SSP.Browser.IE)
								try
								{
									window.RTCPeerConnection = window.mozRTCPeerConnection = window.webkitRTCPeerConnection = null;
								}
								catch(e)
								{
									
								}
							
							if(window.localStorage)
								try
								{
									window.localStorage.setItem('test', 'test');
									window.localStorage.removeItem('test', 'test');
								}
								catch(e)
								{
									
								}
							
							m[i] = m[i] || function()
							{
								(m[i].a = m[i].a || []).push(arguments);
							};
							
							m[i].l = 1 * new Date();
							k = e.createElement(t);
							
							k.onerror = (function()
							{
								return function()
								{
									SSP.Bus.statPlugins.ym.active = false;
								};
							}
							)();
							
							k.src = r;
							
							if(!SSP.Browser.IE)
							{
								k.async = true;
								
								k.onload = (function()
								{
									return function()
									{
										setTimeout(SSP.Bus.statPlugins.ym.initContinue, 0);
									};
								}
								)();
							}
							
							a = e.getElementsByTagName(t)[0];
							a.parentNode.insertBefore(k, a);
							
							if(SSP.Browser.IE)
								SSP.Bus.statPlugins.ym.initContinue();
						})
						(window, document, 'script', '//mc.yandex.ru/metrika/tag.js', 'ym');
				}
				,
				initContinue: function()
				{
					var code = SSP.Bus.statPlugins.ym.code;
					
					if(SSP.Browser.name)
						var slowBrowser = !!(SSP.Browser.Android || SSP.Browser.IOS || SSP.Browser.IE || SSP.Browser.Opera || SSP.Browser.Safari || SSP.Browser.Firefox && SSP.Browser.Firefox < 57);
					else
						var slowBrowser = true;
					
					if(!slowBrowser
					&& SSP.Bus.cookie('YM_SLOW'))
						slowBrowser = true;
					
					var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
					
					if(connection)
						var slowConnection = connection.effectiveType !== '4g' || connection.saveData;
					else
						var slowConnection = false;
					
					var params = {
						id: code,
						defer: true,
						clickmap: !slowBrowser,
						trackLinks: !slowBrowser,
						accurateTrackBounce: true,
						webvisor: !slowBrowser && !slowConnection && !SSP.Bus.statPlugins.ym.webvisorDisabled,
						yaDisableGDPR: true
					};
					
					ym(code, 'init', params);
					
					SSP.Bus.statPlugins.ym.loaded = true;
				}
				,
				stat: function(url, referer)
				{
					var code = SSP.Bus.statPlugins.ym.code;
					
					if(SSP.Bus.statPlugins.ym.userParams)
					{
						if(!SSP.Bus.statPlugins.ym.emulated)
							ym(code, 'userParams', SSP.Bus.statPlugins.ym.userParams);
						
						SSP.Bus.statPlugins.ym.userParams = void 0;
					}
					
					if(SSP.Bus.statPlugins.ym.emulated)
					{
						if(!url.match(/^https?:/))
							url = document.location.protocol + '//' + document.location.hostname + url;
						
						if(referer && !referer.match(/^https?:/))
							referer = document.location.protocol + '//' + document.location.hostname + referer;
						
						var beaconParams = {'page-url': url, 'charset': 'utf-8', 'force-urlencoded': 1};
						
						if(referer && referer !== url)
							beaconParams['page-ref'] = referer;
						
						var img = new Image();
						
						img.src = SSP.String.toUrl('https://mc.yandex.ru/watch/' + code, beaconParams);
					}
					else
					{
						var options = {};
						
						if(referer && referer !== url)
							options.referer = referer;
						else
							options.referer = null;
						
						options.params = SSP.Bus.statPlugins.ym.params;
						
						ym(code, 'hit', url, options);
					}
				}
				,
				variable: function(key, value, scope)
				{
					if(value === null || typeof value === 'undefined')
					{
						if(scope !== 'visitor')
							delete SSP.Bus.statPlugins.ym.params[key];
						else if(SSP.Bus.statPlugins.ym.userParams)
							delete SSP.Bus.statPlugins.ym.userParams[key];
					}
					else if(scope !== 'visitor')
						SSP.Bus.statPlugins.ym.params[key] = value;
					else
					{
						if(!SSP.Bus.statPlugins.ym.userParams)
							SSP.Bus.statPlugins.ym.userParams = {};
						
						SSP.Bus.statPlugins.ym.userParams[key] = value;
					}
				}
			}
			,
			li:
			{
				loaded: true
				,
				active: false
				,
				stat: function(url, referer)
				{
					var img = new Image();
					
					var src = '//counter.yadro.ru/hit?';
					src += 'r' + escape(referer || document.referrer) + ';';
					src += 's' + screen.width + '*' + screen.height + '*' + (screen.colorDepth || screen.pixelDepth) + ';';
					src += 'u' + escape(url) + ';';
					src += Math.random();
					
					img.src = src;
				}
			}
		}
		,
		pendingStat: []
		,
		pendingCustomVarReset: []
		,
		pendingCustomLandingPage: false
		,
		statLoaded: false
		,
		statWaiter: undefined
		,
		initStat: function(plugins, params)
		{
			for(var plugin in plugins)
				if(Object.prototype.hasOwnProperty.call(SSP.Bus.statPlugins, plugin)
				&& SSP.Bus.statPlugins[plugin])
				{
					SSP.Bus.statPlugins[plugin].active = true;
					
					if(typeof SSP.Bus.statPlugins[plugin].init === 'function'
					&& !SSP.Bus.statPlugins[plugin].loaded)
					{
						try
						{
							SSP.Bus.statPlugins[plugin].init(plugins[plugin]);
						}
						catch(e)
						{
							delete plugins[plugin];
							
							SSP.System.console.log(e);
						}
					}
					else
					{
						var any = true;
						delete plugins[plugin];
					}
				}
			
			if(typeof any === 'undefined')
			{
				var any = false;
				
				for(var plugin in plugins)
					if(Object.prototype.hasOwnProperty.call(plugins, plugin))
					{
						any = true;
						break;
					}
			}
			
			if(!any)
				SSP.Bus.useStat = false;
			else
			{
				SSP.Bus.statWaiter = setInterval(
					function()
					{
						var loaded = true;
						
						for(var plugin in plugins)
							if(Object.prototype.hasOwnProperty.call(SSP.Bus.statPlugins, plugin)
							&& SSP.Bus.statPlugins[plugin].active
							&& !SSP.Bus.statPlugins[plugin].loaded)
							{
								loaded = false;
								break;
							}
						
						if(loaded)
						{
							clearInterval(SSP.Bus.statWaiter);
							
							for(var param in params)
								if(Object.prototype.hasOwnProperty.call(params, param))
									SSP.Bus.statVariable(param, params[param].value, params[param].scope);
							
							SSP.Bus.statLoaded = true;
						}
					},
					SSP.DOM.timeoutShort
				);
				
				window.onerror = SSP.Bus.statError;
				
				if(SSP.Bus.initialized === false)
					SSP.Bus.stat(window.location.toString(), document.referrer);
			}
		}
		,
		stat: function(url, referer)
		{
			if(!SSP.Bus.useStat)
				return;
			
			try
			{
				if(SSP.Bus.statLoaded)
				{
					if(!url)
						url = SSP.Bus.location;
					
					url = SSP.Bus.normalize(url);
					
					if(!referer)
						referer = SSP.Bus.referer || window.document.referrer;
					
					if(referer)
						referer = SSP.Bus.normalize(referer);
					
					var orig = url;
					
					if(SSP.Bus.router && typeof SSP.Bus.router.transformStat === 'function')
					{
						url	= SSP.Bus.router.transformStat(url);
						
						if(!url)
							return;
						
						url = SSP.Bus.normalize(url);
						
						if(referer)
						{
							referer = SSP.Bus.router.transformStat(referer, true);
							referer = SSP.Bus.normalize(referer);
						}
					}
					
					if(SSP.Bus.pendingCustomLandingPage)
					{
						SSP.Bus.statVariable(SSP.Bus.pendingCustomLandingPage.param, orig, SSP.Bus.pendingCustomLandingPage.scope);
						SSP.Bus.pendingCustomLandingPage = false;
					}
					
					for(var plugin in SSP.Bus.statPlugins)
						if(Object.prototype.hasOwnProperty.call(SSP.Bus.statPlugins, plugin)
						&& SSP.Bus.statPlugins[plugin]
						&& typeof SSP.Bus.statPlugins[plugin].stat === 'function'
						&& SSP.Bus.statPlugins[plugin].loaded
						&& SSP.Bus.statPlugins[plugin].active)
							try
							{
								SSP.Bus.statPlugins[plugin].stat(url, referer);
								
								if(SSP.Bus.pendingCustomVarReset.length
								&& typeof SSP.Bus.statPlugins[plugin].variable === 'function')
									for(var i = 0; i < SSP.Bus.pendingCustomVarReset.length; i++)
										SSP.Bus.statPlugins[plugin].variable(SSP.Bus.pendingCustomVarReset[i]);
							}
							catch(e)
							{
								SSP.System.console.log(e);
							}
					
					if(SSP.Bus.pendingCustomVarReset.length)
						SSP.Bus.pendingCustomVarReset = [];
				}
				else if(SSP.Bus.canUseStat())
				{
					if(!SSP.Bus.pendingStat.length)
					{
						var condition = function()
						{
							return SSP.Bus.statLoaded;
						};
						
						SSP.Object.wait(null, null, condition, function(){
							for(var i = 0; i < SSP.Bus.pendingStat.length; i++)
								SSP.Bus.stat(SSP.Bus.pendingStat[i].url, SSP.Bus.pendingStat[i].referer);
							SSP.Bus.pendingStat = [];
						}, SSP.DOM.timeoutTiny);
					}
					
					SSP.Bus.pendingStat.push({url: url, referer: referer});
				}
			}
			catch(e)
			{
				SSP.System.console.log(e);
			}
		}
		,
		statEvent: function(eventClass, eventAction, eventLabel, eventValue)
		{
			if(!SSP.Bus.useStat)
				return;
			
			for(var plugin in SSP.Bus.statPlugins)
				if(Object.prototype.hasOwnProperty.call(SSP.Bus.statPlugins, plugin)
				&& SSP.Bus.statPlugins[plugin]
				&& typeof SSP.Bus.statPlugins[plugin].event === 'function'
				&& SSP.Bus.statPlugins[plugin].loaded
				&& SSP.Bus.statPlugins[plugin].active)
					try
					{
						SSP.Bus.statPlugins[plugin].event(eventClass, eventAction, eventLabel, eventValue);
					}
					catch(e)
					{
						SSP.System.console.log(e);
					}
		}
		,
		statVariable: function(key, value, scope)
		{
			if(!SSP.Bus.useStat)
				return;
			
			if(typeof scope === 'undefined')
				scope = 'page';
			else if(scope === 'request')
				SSP.Bus.pendingCustomVarReset.push(key);
			
			for(var plugin in SSP.Bus.statPlugins)
				if(Object.prototype.hasOwnProperty.call(SSP.Bus.statPlugins, plugin)
				&& SSP.Bus.statPlugins[plugin]
				&& typeof SSP.Bus.statPlugins[plugin].variable === 'function'
				&& SSP.Bus.statPlugins[plugin].loaded
				&& SSP.Bus.statPlugins[plugin].active)
					try
					{
						SSP.Bus.statPlugins[plugin].variable(key, value, scope);
					}
					catch(e)
					{
						SSP.System.console.log(e);
					}
		}
		,
		statErrorBlacklistMessage:
		[
			/^Uncaught SyntaxError: Unexpected token /,
			/^Uncaught TypeError: Converting circular structure to JSON/,
			/^Uncaught InvalidStateError: Failed to execute 'send' on 'XMLHttpRequest'/,
			/\bBlocked a frame with origin .+? from accessing\b/,
			/^'document\.head' - .+ null\b/,
			'TypeError: \'open\' called on an object that does not implement interface XMLHttpRequest.',
			'NS_ERROR_XPC_BAD_CONVERT_JS: Could not convert JavaScript argument',
			'NS_ERROR_NOT_INITIALIZED: ',
			'SyntaxError: unterminated string literal',
			'SyntaxError: expected expression, got \'<\'',
			'SyntaxError: illegal character',
			'Uncaught SyntaxError: Unexpected end of input',
			'Uncaught SyntaxError: Invalid or unexpected token',
			'Uncaught exception: DOMException: SYNTAX_ERR',
			'Uncaught TypeError: Illegal invocation',
			'Uncaught InvalidCharacterError: Failed to execute \'btoa\' on \'Window\': The string to be encoded contains characters outside of the Latin1 range.',
			/Bad NPObject as private data/,
			/Error calling method on NPObject/,
			'TypeError: undefined is not an object (evaluating \'__gCrWeb.autofill.extractForms\')',
			'ReferenceError: Can\'t find variable: __gCrWeb',
			'Uncaught ReferenceError: cefQuery is not defined',
			/\b_avast_submit\b/,
			/Синтаксическая ошибка/,
			/Неопределенная ошибка/,
			/Невозможно создание объекта сервером программирования объектов/,
			/Не удается выполнить программу из освобожденного сценария/,
			/В расширениях Интернета произошла внутренняя ошибка/
		]
		,
		statErrorBlacklistFile:
		[
			/(\/[0-9A-F]{32})?\/[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\/main\.js$/,
			/\/zeroclipboard(\.min)?\.js\b/,
			/\/inj_js\/(common|init|mycpm)\.js\b/
		]
		,
		statErrorBlacklistTrace:
		[
			'eval',
			'HTMLScriptElement.eval',
			'Window.eval',
			'Storage.C',
			'Storage.U',
			'getWotReputation'
		]
		,
		statError: function(message, file, line, col, error)
		{
			if(error)
				SSP.System.console.log(error);
			
			if(!SSP.Bus.useStat || SSP.Browser.IE)
				return;
			
			if(message && file && file.indexOf(document.location.protocol + '//' + document.location.hostname + '/') === 0)
			{
				message = unescape(message);
				
				for(var i = 0; i < SSP.Bus.statErrorBlacklistMessage.length; i++)
					if(SSP.Bus.statErrorBlacklistMessage[i] instanceof RegExp)
					{
						if(SSP.Bus.statErrorBlacklistMessage[i].test(message))
							return;
					}
					else if(SSP.Bus.statErrorBlacklistMessage[i] === message)
						return;
				
				for(var i = 0; i < SSP.Bus.statErrorBlacklistFile.length; i++)
					if(SSP.Bus.statErrorBlacklistFile[i] instanceof RegExp)
					{
						if(SSP.Bus.statErrorBlacklistFile[i].test(file))
							return;
					}
					else if(file.indexOf(SSP.Bus.statErrorBlacklistFile[i]) !== -1)
						return;
				
				var dump = {};
				
				if(SSP.Browser.name)
					dump.b = SSP.Browser.name + ' ' + SSP.Browser.version;
				
				dump.e = message;
				
				dump.l = file + '@' + line;
				
				if(col)
					dump.l += ':' + col;
				
				dump.u = document.location.toString();
				
				if(error && error.stack)
				{
					if(typeof error.stack === 'string')
					{
						dump.t = [];
						
						var stack = error.stack.split("\n");
						
						try
						{
							if(SSP.Browser.Firefox)
								for(var i = 0; i < stack.length; i++)
								{
									var item = stack[i].split('@')[0].split('</');
									item = item[1] || item[0];
									
									if(item)
									{
										item = item.replace(/^<+/, '').replace(/[\/<]+$/, '');
										
										if(item)
										{
											item = item.split('/');
											
											for(var j = item.length - 1; j >= 0; j--)
												if(item[j])
													dump.t.push(item[j]);
										}
									}
								}
							else
								for(var i = 0; i < stack.length; i++)
								{
									var item = stack[i].split(' at ');
									
									if(item[1])
									{
										item = item[1].split(' (');
										item = item[1] ? item[0] : '';
										
										if(item)
											dump.t.push(item.replace(/^(Object|Function)\./, ''));
									}
								}
						}
						catch(e)
						{
							dump.t = error.stack;
						}
					}
					else
						dump.t = error.stack;
				}
				else if(SSP.Browser.IE && SSP.Browser.IE < 9)
				{
					dump.t = [];
					
					try
					{
						var caller = arguments.callee.caller;
						
						while(caller)
						{
							dump.t.push(caller.name || caller.toString().match(/^function\s*([^\s(]+)/)[1]);
							caller = caller.caller;
						}
					}
					catch(e)
					{
						
					}
				}
				
				if(dump.t && dump.t instanceof Array)
				{
					if(!dump.t.length)
						delete dump.t;
					else
						for(var i = 0; i < SSP.Bus.statErrorBlacklistTrace.length; i++)
							if(typeof SSP.Bus.statErrorBlacklistTrace[i] === 'string')
							{
								if(dump.t[dump.t.length - 1] === SSP.Bus.statErrorBlacklistTrace[i])
									return;
							}
				}
				
				var action = '(' + SSP.Browser.name + ')';
				var actionPath;
				
				if(file.match(/\.js(\?|_|$)/))
					actionPath = file.replace(/^https?:\/\/[^\/]+/, '').replace(/\.js_?\b.*/, '.js');
				else
					actionPath = file.replace(/^https?:\/\/[^\/]+/, '').replace(/^\/+([^\/]*).*/, '/$1').replace(/#.*$/, '');
				
				if(actionPath)
					action += ' ' + actionPath;
				
				action += ': ' + message;
				
				SSP.Bus.statEvent('JavaScript', action, SSP.JSON(dump));
			}
		}
		,
		normalize: (function(url)
		{
			var hostname = document.location.hostname;
			
			if(url === '/' || url === document.location.protocol + '//' + hostname + '/')
				return '/';
			
			var rx = /^https?:\/\/([^/]+)/;
			var matches = url.match(rx);
			
			if(matches && matches[1] === hostname)
			{
				url = url.replace(rx, '');
				url = SSP.String.rtrim(url.replace(/\/{2,}/g, '/'), '/').toLowerCase();
				url = url.replace(/\/index\.php$/, '');
				
				if(url.indexOf('?') === -1)
					url = url + '/';
			}
			
			return url;
		})
		,
		setTitle: (function(title, frame, separator)
		{
			if(typeof frame !== undefined)
			{
				if(frame instanceof SSP.Widget)
					frame = frame.node;
				
				var frameTitle = frame.contentWindow.document.title;
				
				if(typeof title !== undefined)
				{
					if(typeof separator !== undefined)
					{
						title = title + separator + frameTitle;
						
						separator = undefined;
					}
					else
						title = title + ' :: ' + frameTitle;
				}
				else
					title = frameTitle;
			}
			
			if(typeof separator !== undefined)
			{
				var _title = document.title.split(separator);
				var length = _title.length;
				
				if(length > 1)
					_title[length - 1] = title;
				else
					_title.push(title);
				
				title = _title.join(separator);
			}
			
			if(!SSP.Bus.useHash)
			{
				SSP.Bus.tracking = true;
				SSP.History.replaceState({}, title, SSP.Bus.windowLocation());
				SSP.Bus.tracking = false;
			}
			
			document.title = title;
			
			return title;
		})
		,
		trigger: (function(previous, name, args, contentWindow)
		{
			var node, event;
			
			if(SSP.DOM.isNode(previous) || SSP.DOM.isWindow(previous))
				node = previous;
			else
				node = previous.target || previous.srcElement;
			
			if(args)
			{
				event = args;
				event.type = name;
			}
			else
				event = {type: name};
			
			if(node != previous)
				event.previous = previous;
			
			return SSP.DOM.trigger(node, event);
		})
		,
		cancel: (function(event, preventDefault, stopPropagation)
		{
			event = event || window.event;
			
			event.canceled = true;
			
			preventDefault = typeof preventDefault === 'undefined'
						   ? true
						   : !!preventDefault;
			
			if(preventDefault)
			{
				if(event.preventDefault)
					event.preventDefault();
				else
					event.returnValue = false;
			}
			
			stopPropagation = typeof stopPropagation === 'undefined'
							? false
							: !!stopPropagation;
			
			if(stopPropagation)
			{
				if(event.stopPropagation)
					event.stopPropagation();
				
				event.cancelBubble = true;
			}
			
			return event;
		})
		,
		isCanceled: (function(event)
		{
			return event.defaultPrevented || event.canceled || event.returnValue === false;
		})
		,
		getRequest: function(url, callback, data, async, headers, timeout, decode)
		{
			return SSP.Bus.request(url, callback, data, 'GET', async, headers, timeout, decode);
		}
		,
		headRequest: function(url, callback, data, async, headers, timeout, decode)
		{
			return SSP.Bus.request(url, callback, data, 'HEAD', async, headers, timeout, decode);
		}
		,
		postRequest: function(url, callback, data, async, headers, timeout, decode)
		{
			return SSP.Bus.request(url, callback, data, 'POST', async, headers, timeout, decode);
		}
		,
		request: (function(url, callback, data, method, async, headers, timeout, decode)
		{
			method = method === 'POST' ? 'POST' : 'GET';
			async = typeof async === 'undefined' ? true : !!async;
			headers = headers || {};
			decode = typeof decode === 'undefined' ? true : !!decode;
			
			var onSuccess;
			var onError;
			var onProgress;
			var onAbort;
			var onTimeout;
			
			if(typeof callback === 'function')
				onSuccess = callback;
			else if(callback instanceof Array)
			{
				onSuccess = callback[this.OK];
				delete callback[this.OK];
				onTimeout = callback[this.REQUEST_TIMEOUT];
				delete callback[this.REQUEST_TIMEOUT];
				onError = callback;
			}
			else if(typeof callback === 'object' && callback)
			{
				onSuccess = callback.success;
				onError = callback.error;
				onProgress = callback.progress;
				onAbort = callback.abort;
				onTimeout = callback.timeout;
			}
			
			if(method === 'GET')
			{
				if(data)
					url = SSP.String.toUrl(url, data);
				
				data = null;
			}
			
			var request = SSP.XHR.create();
			request.method = method;
			
			if(SSP.Bus.initialized
			&& SSP.Bus.referer
			&& typeof headers['X-Referer'] === 'undefined')
				headers['X-Referer'] = encodeURI(SSP.Bus.referer);
			
			if(SSP.Browser.name
			&& !SSP.Browser.IE
			&& typeof headers['X-Attachment-Accept'] === 'undefined')
				headers['X-Attachment-Accept'] = 1;
			
			switch(method)
			{
				case 'GET':
				{
					request.open('GET', url, async);
				}
				break;
				case 'POST':
				{
					data = data ? SSP.String.toUrlComponent(data) : null;
					
					request.open('POST', url, async);
					
					if(typeof headers['Content-Type'] === 'undefined')
						headers['Content-Type'] = 'application/x-www-form-urlencoded';
					
					headers['Cache-Control'] = 'private, max-age=0, must-revalidate';
					headers['Pragma'] = 'private';
				}
				break;
			}
			
			request.url = url;
			
			for(var header in headers)
				request.setRequestHeader(header, headers[header]);
			
			request.onreadystatechange = (function(){return function()
			{
				if(!this.prefetched)
				{
					if(this.readyState === this.LOADED || this.readyState === this.INTERACTIVE || this.readyState === this.DONE)
					{
						try
						{
							var link = this.getResponseHeader('Link');
							
							if(link)
							{
								link = link.split(', ');
								
								for(var i = 0; i < link.length; i++)
								{
									var matches = link[i].match((/^<([^>]+)>;\s*rel=(?:prefetch|subresource)$/));
									
									if(matches)
									{
										var prefetch = SSP.XHR.create();
										prefetch.open('GET', matches[1], true);
										prefetch.send();
									}
								}
							}
						}
						catch(e)
						{
							
						}
						
						this.prefetched = true;
					}
				}
				
				if(this.readyState === this.DONE)
				{
					var data, location, message;
					var status = this.status;
					
					if(status === 0)
						status = SSP.Bus.OK;
					else if(status === SSP.Bus.IE9_NO_CONTENT)
						status = SSP.Bus.NO_CONTENT;
					
					try
					{
						var type;
						var contentType = this.getResponseHeader('Content-Type');
						
						if(contentType)
						{
							var matches = contentType.match(/^([^;]+)/i);
							if(matches)
								type = matches[1];
						}
						
						if(this.responseText)
							if(this.responseText.substr(0, 2) === '\x1F\x8B'
							|| decode && this.responseText.match(/^\s*<!DOCTYPE\s+HTML.+:\s+502\s+.+\s*IP[-\s].+/i)) // matching ISA errors
							{
								SSP.XHR.finish(this.tid);
								
								if(SSP.Bus.disableGzip())
								{
									window.location.reload();
									return;
								}
								else
									throw new SSP.Error('GZIP');
							}
						
						if(decode)
						{
							if(type === 'application/json')
							{
								var boundary = this.getResponseHeader('X-Attachment-Boundary') || '/*_!!!LATE_ATTACHMENT_BOUNDARY!!!_';
								
								if(!boundary)
									data = SSP.JSON(this.responseText);
								else
								{
									var split = this.responseText.split(boundary + "\r\n");
									data = SSP.JSON(split.shift());
									
									if(split.length)
										SSP.Bus.processAttachments(split, data);
								}
								
								if(typeof data === 'object'
								&& typeof data.status === 'number'
								&& typeof data.data !== 'undefined')
								{
									status = data.status;
									location = data.location;
									message = data.message;
									data = data.data;
								}
							}
							else if(type === 'text/xml')
							{
								if(typeof this.responseXML === 'string')
									data = SSP.XML(this.responseXML);
								else
									data = this.responseXML;
							}
							else
								data = this.responseText;
						}
						else
							data = this.responseText;
						
						if(status === SSP.Bus.OK
						|| status === SSP.Bus.MOVED_PERMANENTLY
						|| status === SSP.Bus.FOUND
						|| status === SSP.Bus.NOT_MODIFIED)
						{
							if(typeof onSuccess === 'function')
								onSuccess.call(this, data, status, location);
						}
						else if(typeof onError === 'function')
							onError.call(this, data, status, message);
						else if(onError instanceof Array
						&& typeof onError[status] === 'function')
							onError[status].call(this, data, status, message);
						
						SSP.XHR.finish(this.tid);
					}
					catch(e)
					{
						SSP.XHR.finish(this.tid);
						
						this.receiverError = e;
						
						if(typeof onError === 'function')
							onError.call(this, data, status, message);
						else if(onError instanceof Array
						&& typeof onError[status] === 'function')
							onError[status].call(this, data, status, message);
						
						SSP.Bus.statError(e.message, e.fileName || window.location.toString(), e.lineNumber || 0, e.columnNumber || 0, e);
					}
				}
				else if(typeof onProgress !== 'undefined')
				{
					if(typeof onProgress === 'function')
						onProgress.call(this);
					else if(typeof onProgress[this.readyState] === 'function')
						onProgress[this.readyState].call(this);
				}
			};
			})(onSuccess, onError, onProgress, decode);
			
			if(callback && typeof callback === 'object' && typeof callback.abort === 'function')
				request.onabort = (function(){return function()
				{
					onAbort.call(this);
					
					SSP.XHR.finish(this.tid);
				};
				})(onAbort);
			
			request.send(data);
			
			if(typeof timeout !== 'undefined')
			{
				var tid = request.tid;
				
				setTimeout(
					(function(){return function()
					{
						if(SSP.Bus.requests[tid])
							delete SSP.Bus.requests[tid];
						
						if(SSP.XHR.finish(tid))
						{
							if(typeof onTimeout === 'function')
								onTimeout.call(SSP.XHR.getThread(tid));
						}
					};
					})(tid, onTimeout),
					timeout
				);
			}
			
			SSP.Bus.requests[request.tid] = request;
			
			return request;
		})
		,
		processAttachments: function(attachments, data)
		{
			if(data
			&& typeof data === 'object'
			&& data.data
			&& typeof data.data === 'object')
			{
				var withSrc = {};
				var hasSrc = false;
				
				for(var id in data.data)
					if(data.data[id][SSP.Bus.ATTR]
					&& data.data[id][SSP.Bus.ATTR].src
					&& typeof data.data[id][SSP.Bus.INLINE] === 'undefined')
					{
						withSrc[data.data[id][SSP.Bus.ATTR].src.split('#')[0]] = id;
						hasSrc = true;
					}
				
				if(hasSrc)
					for(var i = 0; i < attachments.length; i++)
					{
						var rn = attachments[i].indexOf("\r\n");
						var src = attachments[i].substr(0, rn);
						
						if(withSrc[src])
						{
							var attachment = SSP.String.rtrim(attachments[i].substr(rn + 2));
							
							if(attachment)
								data.data[withSrc[src]][SSP.Bus.INLINE] = attachment;
						}
					}
			}
		}
		,
		rewriteUrl: function(params)
		{
			var url = SSP.String.parseUrl(location.toString());
			
			if(url.search)
				params = SSP.Array.merge(SSP.String.parseStr(url.search), params);
			
			url.search = SSP.String.toUrlComponent(params);
			
			SSP.Bus.navigate(url.toString());
		}
		,
		navigate: function(location, replace, type)
		{
			if(!location.match(/^https?:\/\//))
				location = window.location.protocol + '//' + window.location.hostname + location;
			
			if(!SSP.Bus.initialized)
			{
				if(replace)
					window.location.replace(location);
				else
					window.location = location;
				
				return;
			}
			
			if(SSP.Bus.initialized && SSP.Bus.router && SSP.Bus.router.transform)
			{
				var event = {to: location};
				SSP.Bus.router.transform(event);
				location = event.history;
			}
			
			if(type === 'click' && SSP.Bus.initialized)
			{
				var a = SSP.DOM.create('A');
				a.href = location;
				
				var event = {target: a, type: type, isLeft: true};
				
				SSP.Bus.hijack(event);
			}
			else if(!SSP.Bus.useHash && !SSP.Browser.IE)
			{
				var func = replace
						 ? SSP.History.replaceState
						 : SSP.History.pushState;
				
				func.call(
					SSP.History,
					{method: 'GET', async: true, state: this.useState ? this.state : undefined},
					document.title,
					location
				);
				
				if(typeof event === 'undefined')
					event = {to: location, type: 'popstate'};
				
				SSP.Bus.hijack(event);
			}
			else
			{
				var url = location;
				location = location.split('#');
				var pathname = window.location.pathname;
				if(pathname.charAt(0) !== '/')
					pathname = '/' + pathname;
				
				if(location[0] === window.location.protocol + '//' + window.location.hostname + pathname)
				{
					if(replace)
						window.location.replace(url);
					else
						window.location.hash = location[1];
					
					if(!SSP.Browser.supports.hashchange)
					{
						SSP.Bus.tracking = false;
						
						setTimeout(SSP.Bus.simulateHashChange, 0);
					}
				}
				else if(replace)
					window.location.replace(url);
				else
					window.location = url;
			}
		}
		,
		receive: (function(data, status, location)
		{
			if(typeof data === 'object' && !(data instanceof Array))
			{
				var finalize = true;
				
				switch(status)
				{
					case SSP.Bus.MOVED_PERMANENTLY:
					case SSP.Bus.FOUND:
					{
						if(location.indexOf('http://') !== 0 && location.indexOf('https://') !== 0)
							location = window.location.protocol + '//' + window.location.hostname + location;
						
						SSP.Bus.location = location;
						
						if(SSP.Bus.router.transform)
						{
							var event = {to: location, type: 'click'};
							SSP.Bus.router.transform(event);
							location = event.history;
						}
						
						SSP.Bus.track(document.title, location, 'GET', true, true);
					}
					case SSP.Bus.OK:
					{
						var change = {};
						
						for(var id in data)
						{
							change[id] = {};
							
							var widget = SSP.Widget(id, undefined, undefined, data[id][SSP.Bus.PROTO]);
							
							if(data[id][SSP.Bus.TAG])
								var isFrame = data[id][SSP.Bus.TAG].toUpperCase() === 'IFRAME';
							else
								var isFrame = widget.node && widget.node.tagName === 'IFRAME';
							
							if(isFrame
							&& data[id][SSP.Bus.ATTR]
							&& data[id][SSP.Bus.ATTR].src)
							{
								var frameSrc = data[id][SSP.Bus.ATTR].src;
								var frameInline = data[id][SSP.Bus.INLINE];
								
								if(frameInline)
								{
									if(!widget.node)
										data[id][SSP.Bus.ATTR].src = 'javascript:';
									else
										delete data[id][SSP.Bus.ATTR].src;
									
									delete data[id][SSP.Bus.INLINE];
									
									var frameReloader = (function(frameSrc, frameInline, id){return function()
									{
										SSP.Widget(id).reload(frameSrc, frameInline);
									};
									})(frameSrc, frameInline, id);
									
									setTimeout(frameReloader, 0);
								}
							}
							
							if(!widget.node && typeof data[id][SSP.Bus.TAG] !== 'undefined')
							{
								if(typeof data[id][SSP.Bus.ATTR] === 'undefined')
									data[id][SSP.Bus.ATTR] = {};
								
								data[id][SSP.Bus.ATTR]['id'] = id;
								
								var node = SSP.DOM.create(data[id][SSP.Bus.TAG], data[id][SSP.Bus.ATTR]);
								
								var stdClass = id.split('_')[0];
								
								if(stdClass === 'w' || stdClass === 'l')
									SSP.DOM.addClass(node, stdClass);
								
								SSP.DOM.byId(data[id][SSP.Bus.PARENT]).appendChild(node);
								
								widget.setNode(node);
								
								if(isFrame)
									SSP.Bus.listenFrame(widget.node);
								
								if(data[id][SSP.Bus.EVENT])
									SSP.Bus.listenWidget(widget, data[id][SSP.Bus.EVENT]);
								
								change[id][SSP.Bus.ATTR] = true;
							}
							
							if(widget.node)
							{
								if(typeof change[id][SSP.Bus.ATTR] === 'undefined')
									change[id][SSP.Bus.ATTR] = SSP.Bus.transform(widget, SSP.Bus.ATTR, data[id][SSP.Bus.ATTR]);
								
								change[id][SSP.Bus.STYLE] = SSP.Bus.transform(widget, SSP.Bus.STYLE, data[id][SSP.Bus.STYLE]);
								
								var inline = data[id][SSP.Bus.INLINE];
								
								if(inline)
									change[id][SSP.Bus.INLINE] = {};
								
								if(data[id][SSP.Bus.COMMAND] && !(data[id][SSP.Bus.COMMAND] instanceof Array))
								{
									change[id][SSP.Bus.COMMAND] = {};
									
									for(var command in data[id][SSP.Bus.COMMAND])
									{
										if(data[id][SSP.Bus.COMMAND][command] instanceof Array)
										{
											var args = data[id][SSP.Bus.COMMAND][command];
											var callback = undefined;
										}
										else
										{
											var args = data[id][SSP.Bus.COMMAND][command].args;
											var callback = SSP.Object.byPath(data[id][SSP.Bus.COMMAND][command].callback);
										}
										
										if(inline)
											change[id][SSP.Bus.INLINE][command] = SSP.Bus.useState ? widget.html() : true;
										else if(data[id][SSP.Bus.ATTR] && data[id][SSP.Bus.ATTR].src && data[id][SSP.Bus.ATTR].src !== widget.src())
											finalize = false;
										
										change[id][SSP.Bus.COMMAND][command] = SSP.Bus.command(widget, command, args, inline, callback);
									}
								}
							}
						}
						
						if(finalize)
							SSP.Bus.indicate(false);
						
						if(change && !finalize)
							SSP.DOM.triggerReflow();
						
						SSP.Bus.runDeferred();
						
						SSP.Bus.stat();
						
						if(location)
							SSP.Bus.referer = location;
						
						return change;
					}
				}
			}
			else if(status === SSP.Bus.MOVED_PERMANENTLY || status === SSP.Bus.FOUND)
			{
				window.location.replace(location || data);
				return;
			}
			
			SSP.Bus.panic({message: 'BUS_ERROR', data: data}, status);
		})
		,
		broadcasts: {}
		,
		attach: function(url)
		{
			if(!SSP.Bus.broadcasts[url])
			{
				var broadcast = new EventSource(url);
				
				broadcast.onmessage = (function(){return function(event)
				{
					var data = SSP.JSON(SSP.String.trim(event.data));
					
					SSP.Bus.receive(data, SSP.Bus.OK);
				};
				})();
				
				var closer = (function(){return function(event)
				{
					var data = SSP.JSON(SSP.String.trim(event.data));
					
					SSP.Bus.receive(data, SSP.Bus.OK);
					
					SSP.Bus.detach(url);
				};
				})(url);
				
				broadcast.addEventListener(SSP.Bus.EOT, closer, false);
				
				var onerror = (function(){return function(event)
				{
					var data = SSP.JSON(SSP.String.trim(event.data));
					
					SSP.Bus.receive(data, SSP.Bus.OK);
					
					SSP.Bus.detach(url, true);
				};
				})(url);
				
				broadcast.addEventListener(SSP.Bus.ERR, onerror, false);
				
				SSP.Bus.broadcasts[url] = broadcast;
			}
			
			return SSP.Bus.broadcasts[url];
		}
		,
		detach: function(url, error)
		{
			if(typeof url === 'undefined')
			{
				for(url in SSP.Bus.broadcasts)
					;
			}
			
			if(SSP.Bus.broadcasts[url])
			{
				SSP.Bus.broadcasts[url].onmessage = null;
				
				if(!error && SSP.Bus.broadcasts[url].onclose)
					SSP.Bus.broadcasts[url].onclose.call(SSP.Bus.broadcasts[url]);
				else if(error && SSP.Bus.broadcasts[url].onerror)
					SSP.Bus.broadcasts[url].onerror.call(SSP.Bus.broadcasts[url]);
				
				SSP.Bus.broadcasts[url].onclose = null;
				SSP.Bus.broadcasts[url].onerror = null;
				
				SSP.Bus.broadcasts[url].close();
				delete SSP.Bus.broadcasts[url];
			}
		}
		,
		panic: function(e, code)
		{
			try
			{
				SSP.System.console.log(e);
				
				if(typeof window.onerror === 'function')
					window.onerror.call(window, e.message, e.fileName, e.lineNumber);
			}
			catch(e)
			{
				
			}
			
			var name = typeof code === 'number' ? 'BUSERR_' + code : 'BUSERR';
			
			if(!this.cookie(name))
			{
				this.cookie(name, e.message || 'BUSERR');
				
				window.location.reload();
			}
		}
		,
		disableGzip: function()
		{
			if(!SSP.Bus.cookie('GUNZIP'))
			{
				SSP.Bus.cookie('GUNZIP', 1, undefined, '/', window.location.hostname);
				return true;
			}
			else
				return false;
		}
		,
		create: (function(id, tag, events)
		{
			var widget = new SSP.Widget(id, tag);

			if(typeof events !== 'undefined')
				this.listenWidget(widget, events);
			
			return widget;
		})
		,
		transform: (function(widget, method, args)
		{
			if(args instanceof Array)
				return;
			
			var change = {};
			
			if(method === this.ATTR)
				for(var attr in args)
				{
					if(attr === 'src')
					{
						if(widget.tagName === 'IFRAME' || widget.tagName === 'IMG')
							change[attr] = widget.reload(args[attr]);
					}
					else
						change[attr] = widget.setAttribute(SSP.DOM.normalizeAttribute(attr), args[attr]);
				}
			else if(method === this.STYLE)
				for(var style in args)
					change[style] = widget.setStyle(style, args[style]);
			
			var key;
			
			for(key in change)
			{
				if(!SSP.Bus.useState)
					change = true;
				
				break;
			}	
			
			return change;
		})
		,
		isReloading: (function(command)
		{
			switch(command)
			{
				case 'reload':
				case 'append':
				case 'prepend':
				case 'merge':
				{
					return true;
				}
			}
			
			return false;
		})
		,
		command: (function(widget, command, args, inline, callback)
		{
			if(typeof inline !== 'string')
			{
				var src = args[0];
				var data = args[1];
				var method = args[2] || 'GET';
				var widgetSrc = widget.src();
				
				if(!widgetSrc || (SSP.Bus.isReloading(command) && widgetSrc !== src) || widget.isEmpty())
				{
					if(SSP.Bus.isReloading(command))
					{
						if(src)
						{
							SSP.Bus.indicate(true, widget);
							
							SSP.Bus.request(
								src,
								(function(){return function(data)
								{
									try
									{
										widget[command](args, data);
										
										SSP.Bus.indicate(false, widget);
										
										if(widget.pending)
										{
											for(command in widget.pending)
												widget[command](widget.pending[command]);
											
											delete widget.pending;
										}
										
										if(typeof callback === 'function')
											callback.call(widget);
									}
									catch(e)
									{
										SSP.Bus.panic(e);
									}
								};
								})(command, args, callback),
								data,
								method,
								true,
								undefined,
								undefined,
								false
							);
						}
						else
						{
							widget.src('');
							
							SSP.Bus.indicate(false, widget);
						}
					}
					else
					{
						if(typeof widget.pending === 'undefined')
							widget.pending = {};
						
						widget.pending[command] = args;
					}
				}
				else if(!SSP.Bus.isReloading(command))
				{
					try
					{
						widget[command](args, inline);
						
						if(typeof callback === 'function')
							callback.call(widget);
					}
					catch(e)
					{
						SSP.Bus.panic(e);
					}
				}
				else
					SSP.Bus.indicate(false, widget);
			}
			else
			{
				try
				{
					widget[command](args, inline);
					
					SSP.Bus.indicate(false, widget);
					
					if(typeof callback === 'function')
						callback.call(widget);
				}
				catch(e)
				{
					SSP.Bus.panic(e);
				}
			}
		})
		,
		cookie: (function(name, value, lifetime, path, domain, secure)
		{
			if(typeof value === 'undefined') // get
			{
				var regexp = new RegExp(
					  '(?:^|; )'
					+ name.replace(
						/([\.$?*|{}\(\)\[\]\\\/\+^])/g,
						'\\$1'
					)
					+ '=([^;]*)'
				);
				
				var matches = document.cookie.match(regexp);
				
				if(matches)
					return SSP.String.decodeURIComponent(matches[1]);
				else
					return undefined;
			}
			else // set
			{
				var cookie = value !== null ? [SSP.String.toUrlComponent(value, name)] : [name + '='];
				
				if(typeof lifetime !== 'undefined')
				{
					if(typeof lifetime === 'number')
						cookie.push(lifetime > 0 ? 'max-age=' + lifetime : 'expires=Thu, 01 Jan 1970 00:00:01 GMT');
					else if(typeof lifetime === 'string')
					{
						if(lifetime in SSP.Date.amount)
							cookie.push('max-age=' + SSP.Date.getSeconds(1, lifetime));
						else
							cookie.push('expires=' + lifetime);
					}
					else if(lifetime instanceof Date)
						cookie.push('expires=' + lifetime.toUTCString());
				}
				
				if(typeof path !== 'undefined')
					cookie.push('path=' + path.replace(';', encodeURIComponent(';')));
				else
					cookie.push('path=/');
				
				if(typeof domain !== 'undefined')
					cookie.push(SSP.String.toUrlComponent(domain, 'domain'));
				
				if(secure === true)
					cookie.push('secure');
				
				document.cookie = cookie.join('; ');
			}
		})
		,
		deleteCookie: (function(name, path, domain, secure)
		{
			if(name)
			{
				path = path || '/';
				domain = domain || '.' + window.location.hostname;
				SSP.Bus.cookie(name, '', 0, path, domain, secure);
			}
		})
		,
		windowLocation: (function(contentWindow)
		{
			contentWindow = contentWindow || window;
			var location = contentWindow.location;
			
			if(location.toString() === 'about:blank')
				return 'about:blank';
			else
				return SSP.String.formatUrl(location);
		})
	};
	
	SSP.JSON = (function(data)
	{
		if(typeof data=== 'string')
			return window.JSON.parse(data);
		else
			return window.JSON.stringify(data);
	});
	
	SSP.XML = function(data)
	{
		try
		{
			if(typeof window.DOMParser !== 'undefined')
				return (new window.DOMParser()).parseFromString(data, 'text/xml');
			else
			{
				var node = SSP.DOM.create('XML');
				document.body.appendChild(node);
				var xml = node.XMLDocument;
				document.body.removeChild(node);
				
				xml.async = false;
				xml.loadXML(data);
				
				return xml;
			}
		}
		catch(e)
		{
			return null;
		}
	};
	
	SSP.XHR =
	{
		running: {},
		sleeping: {},
		
		create: (function()
		{
			for(var tid in this.sleeping)
			{
				this.running[tid] = this.sleeping[tid];
				delete this.sleeping[tid];
				
				return this.running[tid];
			}
			
			var request = new window.XMLHttpRequest;
			
			do
			{
				tid = SSP.String.random();
			}
			while(typeof this.running[tid] !== 'undefined'
			   || typeof this.sleeping[tid] !== 'undefined');
			
			request.tid = tid;
			this.running[tid] = request;
			
			return request;
		})
		,
		finish: function(tid)
		{
			if(this.running[tid])
			{
				this.sleeping[tid] = this.running[tid];
				delete this.running[tid];
				
				try
				{
					this.sleeping[tid].abort();
					
					var finalize = true;
					var otherTid;
					
					for(otherTid in this.running)
					{
						finalize = false;
						break;
					}
					
					if(finalize)
						SSP.Bus.indicate(false);
					
					this.sleeping[tid].onreadystatechange = null;
					
					if(this.sleeping[tid]._object)
						this.sleeping[tid]._object.onreadystatechange = new window.Function;
					
					delete this.sleeping[tid]._aborted;
					delete this.sleeping[tid]._async;
					delete this.sleeping[tid].url;
					
					if(SSP.Browser.IE)
					{
						this.sleeping[tid].readyState = this.sleeping[tid].UNSENT;
						this.sleeping[tid].responseText = '';
						this.sleeping[tid].status = 0;
						this.sleeping[tid].statusText = '';
					}
					
					return true;
				}
				catch(e)
				{
					
				}
			}
			else
				return false;
		}
		,
		finishAll: function()
		{
			for(var tid in this.running)
				this.finish(tid);
		}
		,
		getThread: function(tid)
		{
			if(tid in this.sleeping)
				return this.sleeping[tid]
			else
				return this.running[tid]
		}
	};
	
	SSP.DOM =
	{
		document: window.document
		,
		listeners: {}
		,
		nodes: {}
		,
		frames: {top: window}
		,
		uid: 0
		,
		timeoutTiny: 50
		,
		timeoutShort: 100
		,
		timeoutMedium: 250
		,
		timeoutLong: 500
		,
		rxClassCache: {}
		,
		BEFORE:			'before'
		,
		AFTER:			'after'
		,
		BEFOREBEGIN:	'beforebegin'
		,
		AFTERBEGIN:		'afterbegin'
		,
		BEFOREEND:		'beforeend'
		,
		AFTEREND:		'afterend'
		,
		byId: (function(id, document)
		{
			document = document || SSP.DOM.document;
			
			var result = document.getElementById(id);
			
			/*@cc_on
			if(result && !result.id)
				return null;
			@*/
			
			return result;
		})
		,
		byClass: (function(className, document)
		{
			document = document || SSP.DOM.document;
			
			if(document.getElementsByClassName)
				return document.getElementsByClassName(className);
			else
				return SSP.DOM.bySelector('.' + className, document);
		})
		,
		byName: (function(name, document)
		{
			document = document || SSP.DOM.document;
			
			return document.getElementsByName(name);
		})
		,
		bySelector: (function(selector, document)
		{
			document = document || SSP.DOM.document;
			
			if(document.querySelectorAll)
			{
				var result = document.querySelectorAll(selector);
				
				if(selector.match(/^#[a-z][-a-z0-9_]+$/i))
					return result[0];
				else
					return result;
			}
			else
			{
				var matches;
				
				if(matches = selector.match(/^(?:#([a-z][-a-z0-9_]+)|[a-z]+)$/i))
				{
					if(selector.indexOf('#') === 0)
						return SSP.DOM.byId(matches[1]);
					else
						return SSP.DOM.byTag(selector);
				}
				else
				{
					var stylesheet = document.styleSheets[0] || document.createStyleSheet();
					
					stylesheet.addRule(selector, 'tm:p');
					
					var nodes = [];
					var length = document.all.length;
					
					for(var i = 0; i < length; i++)
					{
						var node = document.all[i];
						
						if(node.currentStyle.tm)
							nodes.push(node);
					}
					
					stylesheet.removeRule(stylesheet.rules.length - 1);
					
					return nodes;
				}
			}
		})
		,
		byTag: (function(tagName, parent)
		{
			parent = parent || SSP.DOM.document;
			
			return parent.getElementsByTagName(tagName);
		})
		,
		byPath: (function(path, node, type, document)
		{
			document = document || SSP.DOM.document;
			
			var result = document.evaluate(path, node || document, null, typeof type === 'undefined' ? XPathResult.ANY_TYPE : type, null);
			
			switch(result.resultType)
			{
				case XPathResult.ANY_UNORDERED_NODE_TYPE:
				case XPathResult.FIRST_ORDERED_NODE_TYPE:
				{
					return result.singleNodeValue;
				}
				case XPathResult.UNORDERED_NODE_ITERATOR_TYPE:
				case XPathResult.ORDERED_NODE_ITERATOR_TYPE:
				{
					var nodes = [];
					var item;
					
					while(item = result.iterateNext())
						nodes.push(item);
					
					return nodes;
				}
			}
			
			return result;
		})
		,
		byUid: (function(uid, document)
		{
			var name = SSP.DOM.getWindow(document).name;
			
			return SSP.DOM.nodes[name][uid];
		})
		,
		create: (function(tag, attributes, document)
		{
			document = document || SSP.DOM.document;
			
			tag = tag.toUpperCase();
			
			if(!attributes && (tag === 'IFRAME' || tag === 'INPUT'))
				throw new SSP.Error('IE!');
			
			if(SSP.Browser.IE && SSP.Browser.IE <= 8)
			{
				tag = tag.toLowerCase();
				
				var html = ['<' + tag];
				var attribute;
				
				for(var attr in attributes)
				{
					if(attr === 'style' && typeof attributes[attr] === 'object' && attributes[attr])
					{
						attribute = [];
						for(var style in attributes[attr])
							attribute.push(style + ':' + attributes[attr][style]);
						attribute = attribute.join(';');
					}
					else
						attribute = attributes[attr];
					
					if(attribute === true)
						attribute = attr;
					else if(typeof attribute === 'undefined')
						attribute = '';
					else
						attribute = SSP.String.escapeHtml(attribute);
					
					html.push(SSP.String.escapeHtml(SSP.DOM.normalizeAttribute(attr, true)) + '="' + attribute + '"');
				}
				
				html = html.join(' ') + (tag === 'INPUT' ? '>' : '></' + tag + '>');
				
				return document.createElement(html);
			}
			else
			{
				var node = document.createElement(tag);
				
				if(attributes)
					for(var attr in attributes)
					{
						if(attr === 'style' && typeof attributes[attr] === 'object' && attributes[attr])
						{
							for(var style in attributes[attr])
								node.style[style] = attributes[attr][style];
						}
						else
							node.setAttribute(SSP.DOM.normalizeAttribute(attr), attributes[attr]);
					}
				
				return node;
			}
		})
		,
		normalizeAttribute: (function(attr, reverse)
		{
			if(reverse || !SSP.Browser.IE)
			{
				attr = attr.toLowerCase();
				
				switch(attr)
				{
					case 'classname':
						return 'class';
					case 'htmlfor':
						return 'for';
					default:
						return attr;
				}
			}
			else
				return attr;
		})
		,
		contains: (function(node, document)
		{
			document = document || SSP.DOM.document;
			
			if(typeof document.contains === 'function')
				return document.contains(node);
			else
			{
				while(node && document != node)
					node = node.parentNode;
				
				return node == document;
			}
		})
		,
		destroy: (function(node)
		{
			if(node.parentNode)
			{
				if(typeof node.uid === 'number')
				{
					var name = SSP.DOM.getWindowName(SSP.DOM.getWindow(node));
					
					if(SSP.DOM.nodes[name] && SSP.DOM.nodes[name][uid])
						delete SSP.DOM.nodes[name][uid];
					
					node.uid = undefined;
				}
				
				node.parentNode.removeChild(node);
			}
		})
		,
		merge: (function(node, tmp, recurseTags, breakOnAppend, isTop)
		{
			if(breakOnAppend && isTop && isTop !== true && isTop.appended)
				return;
			
			while(node && tmp)
			{
				var oldLen = node.children.length;
				var newLen = tmp.children.length;
				
				if(oldLen < newLen || isTop === true && node.id !== tmp.id)
				{
					var replace = false;
					
					if(isTop === true && node.id !== tmp.id)
					{
						replace = true;
						node.id = tmp.id;
					}
					
					if(node.className !== tmp.className)
						node.className = tmp.className;
					
					if(oldLen < newLen)
						replace = true;
					
					if(isTop === true)
						isTop = node;
					
					if(replace)
					{
						node.innerHTML = tmp.innerHTML;
						
						if(breakOnAppend)
						{
							isTop.appended = true;
							return;
						}
					}
				}
				else
				{
					if(isTop === true)
						isTop = node;
					
					for(var i = 0; i < newLen; i++)
						if(!recurseTags || tmp.children[i].tagName in recurseTags)
							SSP.DOM.merge(node.children[i], tmp.children[i], recurseTags, breakOnAppend, isTop);
				}
				
				node = SSP.DOM.getNextElementSibling(node);
				tmp = SSP.DOM.getNextElementSibling(tmp);
			}
		})
		,
		getNextElementSibling: (function(node)
		{
			var next = node.nextElementSibling || node.nextSibling;
			
			if(next && next.nodeType === 1)
				return next;
		})
		,
		getPreviousElementSibling: (function(node)
		{
			var previous = node.previousElementSibling || node.previousSibling;
			
			if(previous && previous.nodeType === 1)
				return previous;
		})
		,
		getFirstElementSibling: (function(node)
		{
			if(node.parentNode)
				return node.parentNode.children[0];
		})
		,
		getLastElementSibling: (function(node)
		{
			if(node.parentNode)
				return node.parentNode.children[node.parentNode.children.length - 1];
		})
		,
		moveSibling: (function(node, direction)
		{
			var parent = node.parentNode, target, swapped;
			
			if(direction === SSP.DOM.BEFORE)
			{
				target = SSP.DOM.getPreviousElementSibling(node);
				
				if(!target)
					return;
				else
					swapped = target;
			}
			else if(direction === SSP.DOM.AFTER)
			{
				target = SSP.DOM.getNextElementSibling(node);
				
				if(!target)
					return;
				else
				{
					swapped = target;
					target = SSP.DOM.getNextElementSibling(target);
				}
			}
			else
				return;
			
			parent.removeChild(node);
			
			if(target)
				parent.insertBefore(node, target);
			else
				parent.appendChild(node);
			
			return swapped;
		})
		,
		fragment: (function(document)
		{
			document = document || SSP.DOM.document;
			
			return document.createDocumentFragment();
		})
		,
		isNode: (function(node)
		{
			if(SSP.Browser.Firefox)
				return node instanceof window.HTMLElement
					|| node instanceof window.HTMLDocument;
			else
				try
				{
					return node !== null
						&& typeof node === 'object'
						&& (node.nodeType === 1 || node.nodeType === 9); 
				}
				catch(e)
				{
					
				}
		})
		,
		isWindow: (function(node)
		{
			if(typeof Window === 'function' && node instanceof Window)
				return true;
			
			if(SSP.DOM.isTop(node) || SSP.DOM.isFrame(node))
				return true;
			
			if(Object.prototype.hasOwnProperty.call(node, 'self'))
				return node == node.self;
		})
		,
		isTop: (function(contentWindow)
		{
			try
			{
				return contentWindow == window.top;
			}
			catch(e)
			{
				return false;
			}
		})
		,
		isFrame: (function(contentWindow)
		{
			try
			{
				if(contentWindow.frameElement)
					return true;
			}
			catch(e)
			{
				try
				{
					if(!contentWindow.opener)
						return true;
				}
				catch(ee)
				{
					if(!SSP.DOM.isTop(contentWindow))
						return true;
				}
			}
			
			return false;
		})
		,
		isDocument: (function(node)
		{
			if(typeof Document === 'object')
				return node instanceof Document;
			else
				return node.nodeType === 9;
		})
		,
		hasFocus: (function(contentDocument)
		{
			contentDocument = contentDocument || SSP.DOM.document;
			
			if(contentDocument.hasFocus)
				return contentDocument.hasFocus();
			else
				return !document.hidden;
		})
		,
		rxClass: (function(className)
		{
			className = className.replace(/ /g, '_');
			
			if(typeof SSP.DOM.rxClassCache[className] === 'undefined')
				SSP.DOM.rxClassCache[className] = new RegExp('(^|\\s+)' + className + '(\\s+|$)', 'g');
			else
				SSP.DOM.rxClassCache[className].lastIndex = 0;
			
			return SSP.DOM.rxClassCache[className];
		})
		,
		addClass: (function(node, className)
		{
			if(this.hasClass(node, className))
				return false;
			else
			{
				if(node.classList)
					node.classList.add(className);
				else
					node.className += ' ' + className.replace(/ /g, '_');
				
				return true;
			}
		})
		,
		hasClass: (function(node, className)
		{
			if(node.classList)
				return node.classList.contains(className);
			else
				return node.className && this.rxClass(className).test(node.className);
		})
		,
		toggleClass: (function(node, class1, class2)
		{
			if(class2)
			{
				if(SSP.DOM.hasClass(node, class1))
				{
					SSP.DOM.removeClass(node, class1);
					SSP.DOM.addClass(node, class2);
				}
				else if(SSP.DOM.hasClass(node, class2))
				{
					SSP.DOM.removeClass(node, class2);
					SSP.DOM.addClass(node, class1);
				}
			}
			else
			{
				if(SSP.DOM.hasClass(node, class1))
					SSP.DOM.removeClass(node, class1);
				else
					SSP.DOM.addClass(node, class1);
			}
		})
		,
		removeClass: (function(node, className)
		{
			if(node.className)
			{
				var oldClass = node.className;
				
				if(node.classList)
					node.classList.remove(className);
				else
					node.className = node.className.replace(this.rxClass(className), ' ').replace(/(^ | $)/g, '');
				
				return node.className !== oldClass;
			}
			else
				return false;
		})
		,
		getData: (function(node, key)
		{
			var data = node.getAttribute('data-' + key);
			
			if(data
			&& (data.charAt(0) === '{' || data.charAt(0) === '['))
			{
				try
				{
					data = SSP.JSON(data);
				}
				catch(e)
				{
					return null;
				}
			}
			
			return data;
		})
		,
		setData: (function(node, key, value)
		{
			if(typeof value === 'object' && value)
			{
				try
				{
					value = SSP.JSON(value);
				}
				catch(e)
				{
					return false;
				}
			}
			
			return node.setAttribute('data-' + key, value);
		})
		,
		clone: function(node, incrementIdsDepth, clearInputs, clearHidden, clearEvents)
		{
			var clone = node.cloneNode(true);
			clearInputs = typeof clearInputs === 'undefined' ? true : !!clearInputs;
			clearHidden = !!clearHidden;
			clearEvents = typeof clearEvents === 'undefined' ? true : !!clearEvents;
			
			if(incrementIdsDepth)
			{
				if(typeof incrementIdsDepth !== 'number')
					incrementIdsDepth = SSP.Number.parseInt(incrementIdsDepth);
				
				if(incrementIdsDepth)
				{
					incrementIdsDepth *= 2;
					var newId = SSP.DOM.incrementId(clone.id, incrementIdsDepth);
					SSP.DOM.setIds(clone, newId, incrementIdsDepth);
				}
			}
			
			if(clearInputs)
				SSP.DOM.clearInputs(clone, clearHidden);
			
			if(clearEvents)
			{
				if(clone.uid)
				{
					SSP.DOM.cancel(clone, void 0, void 0, false);
					delete clone.uid;
				}
				
				SSP.DOM.walk(
					clone.getElementsByTagName('*'),
					function(node)
					{
						if(node.uid)
						{
							SSP.DOM.cancel(node, void 0, void 0, false);
							delete node.uid;
						}
					}
				);
			}
			
			return clone;
		}
		,
		replace: function(oldNode, newNode)
		{
			var uid = oldNode.uid;
			
			if(uid)
			{
				SSP.DOM.nodes[uid] = newNode;
				
				var name = SSP.DOM.getWindowName(SSP.DOM.getWindow(newNode));
				
				for(var event in SSP.DOM.listeners[name])
					if(SSP.DOM.listeners[name][event][uid])
					{
						SSP.DOM.listeners[name][event][uid].node = newNode;
						
						var handler = SSP.DOM.listeners[name][event][uid].handler;
						
						if(typeof handler === 'function')
						{
							if(typeof newNode.addEventListener === 'function')
							{
								oldNode.removeEventListener(event, handler, false);
								newNode.addEventListener(event, handler, false);
							}
							else
							{
								oldNode.detachEvent('on' + event, handler);
								newNode.attachEvent('on' + event, handler);
							}
						}
					}
			}
		}
		,
		incrementId: function(id, depth)
		{
			return SSP.Number.parseInt(id.split('[')[depth].split(']')[0]) + 1;
		}
		,
		setIds: function(node, newId, depth)
		{
			if(SSP.DOM.isNode(node))
			{
				switch(node.tagName)
				{
					case 'LABEL':
					{
						if(node.htmlFor)
							node.htmlFor = SSP.DOM.replaceId(node.htmlFor, newId, depth);
					}
					break;
					default:
					{
						if(node.id)
						{
							node.oldId = node.id;
							node.id = SSP.DOM.replaceId(node.id, newId, depth);
						}
						
						var name;
						
						if(name = node.getAttribute('name'))
						{
							node.oldName = name;
							node.setAttribute('name', SSP.DOM.replaceId(name, newId, depth));
						}
					}
				}
				
				SSP.DOM.walk(node.children, SSP.DOM.setIds, [newId, depth]);
			}
		}
		,
		replaceId: function(oldVal, newId, depth)
		{
			if(oldVal.indexOf('[') !== -1)
			{
				oldVal = SSP.Object.splitPath(oldVal);
				oldVal[depth] = newId;
				var root = oldVal.shift();
				return root + '[' + oldVal.join('][') + ']';
			}
			else
			{
				oldVal = oldVal.split('_');
				var type = oldVal.shift();
				oldVal[depth] = newId;
				return type + '_' + oldVal.join('_');
			}
		}
		,
		clearInputs: function(node, clearHidden)
		{
			if(!node || !SSP.DOM.isNode(node))
				return;
			
			clearHidden = !!clearHidden;
			
			switch(node.tagName)
			{
				case 'INPUT':
				{
					switch(node.type)
					{
						case 'radio':
						case 'checkbox':
						{
							node.checked = node.getAttribute('data-explicit') === '1'
										|| node.getAttribute('checked') !== null && node.attributes.checked !== null;
						}
						break;
						case 'button':
						case 'reset':
						case 'submit':
						{
							
						}
						break;
						case 'hidden':
						{
							if(!clearHidden)
								break;
						}
						default:
						{
							node.value = node.getAttribute('data-explicit') || '';
						}
					}
				}
				break;
				case 'SELECT':
				{
					SSP.Form.syncSelect(node, true);
				}
				break;
				case 'TEXTAREA':
				{
					node.innerHTML = node.getAttribute('data-explicit') || '';
				}
				break;
				case 'BUTTON':
				{
					
				}
				break;
				default:
				{
					SSP.DOM.walk(node.children, SSP.DOM.clearInputs, [clearHidden]);
				}
			}
		}
		,
		triggerReflow: (function(node)
		{
			if(node)
			{
				var style = document.createElement('STYLE');
				node.appendChild(style);
				setTimeout(function(){node.removeChild(style);}, 0);
			}
			else
				for(var name in SSP.DOM.frames)
					if(SSP.Object.hasOwn(SSP.DOM.frames, name))
						try
						{
							SSP.DOM.trigger(SSP.DOM.frames[name], 'resize');
						}
						catch(e)
						{
							
						}
		})
		,
		openWindowFromA: function(a)
		{
			return SSP.DOM.openWindow(a.href, a.target);
		}
		,
		openWindow: function(url, target, params, scrMargin)
		{
			url = url || 'about:blank';
			target = target || '_blank';
			params = params || {};
			scrMargin = typeof scrMargin === 'undefined' ? 70 : scrMargin;
			
			var defaultWidth = 800;
			var defaultHeight = 600;
			
			var width = params.width || defaultWidth;
			var height = params.height || defaultHeight;
			
			var scrHeight = (screen.availHeight) ? screen.availHeight - scrMargin * 2 : defaultWidth;
			var scrWidth = (screen.availWidth) ? screen.availWidth : defaultHeight;
			
			if(width > scrWidth)
				width = scrWidth;
			
			var left = (scrWidth - width) / 2 + scrMargin;
			
			if(height > scrHeight)
				height = scrHeight;
			
			var top = (scrHeight - height) / 2 + scrMargin;
			
			if(typeof params.width === 'undefined')
				params.width = width;
			
			if(params.width > scrWidth)
				params.width = scrWidth;
			
			if(typeof params.height === 'undefined')
				params.height = height;
			
			if(params.height > scrHeight)
				params.height = scrHeight;
			
			if(typeof params.left === 'undefined')
				params.left = left;
			
			if(typeof params.top === 'undefined')
				params.top = top;
			
			if(typeof params.resizable === 'undefined')
				params.resizable = 'yes';
			
			if(typeof params.scrollbars === 'undefined')
				params.scrollbars = 'yes';
			
			if(typeof params.menubar === 'undefined')
				params.menubar = 'yes';
			
			var paramArr = [];
			
			for(var key in params)
				paramArr.push(key + '=' + params[key]);

			return window.open(url, target, paramArr.join(','), true);
		}
		,
		submitForm: function(form)
		{
			var result = SSP.DOM.trigger(form, 'submit');
			
			if(result !== false)
				form.submit();
		}
		,
		getDocument: (function(node)
		{
			return SSP.DOM.getWindow(node).document;
		})
		,
		getFrame: (function(contentDocument)
		{
			var contentWindow = this.getWindow(contentDocument);
			
			if(this.isNode(contentWindow.frameElement))
				return contentWindow.frameElement;
			else
				return false;
		})
		,
		getFrameWindow: (function(name)
		{
			if(name === 'top')
				return window;
			
			if(!SSP.DOM.frames[name])
			{
				var iframe = SSP.DOM.byId(name);
				
				if(iframe)
					SSP.Bus.listenFrame(iframe.contentWindow);
			}
			
			return SSP.DOM.frames[name];
		})
		,
		getWindow: (function(node)
		{
			if(this.isWindow(node))
				return node;
			else if(this.isNode(node))
			{
				var contentDocument = node.nodeType === 9
									? node
									: node.ownerDocument;
				
				return contentDocument.defaultView || contentDocument.parentWindow;
			}
			else
				return window;
		})
		,
		setUid: (function(node)
		{
			if(typeof node.uid === 'undefined')
			{
				node.uid = SSP.DOM.uid++;
				
				var name = SSP.DOM.getWindowName(SSP.DOM.getWindow(node));
				
				if(typeof SSP.DOM.nodes[name] === 'undefined')
					SSP.DOM.nodes[name] = {};
				
				SSP.DOM.nodes[name][node.uid] = node;
			}
			
			return node.uid;
		})
		,
		listen: (function(node, event, callback, unshift, debounce)
		{
			if(SSP.DOM.isNode(node) || SSP.DOM.isWindow(node))
			{
				switch(node.tagName)
				{
					case 'IFRAME':
					{
						if(event === 'scroll')
							node = node.contentWindow;
						else if(!SSP.Browser.IE && event === 'DOMContentLoaded')
							event = 'readystatechange';
					}
					break;
					case 'SCRIPT':
					{
						if(event === 'load' && SSP.Browser.IE && SSP.Browser.IE <= 8)
						{
							event = 'readystatechange';
							var _callback = callback;
							callback = function(event)
							{
								if(this.readyState === 'loaded' || this.readyState === 'complete')
									_callback.call(this, event);
							};
							callback.call(node);
						}
					}
					break;
					case 'SELECT':
					{
						if(event === 'change')
						{
							var _callback = callback;
							
							SSP.DOM.listen(node, 'keyup', function(event)
							{
								if(this.length > 1
								&& event.isCursor
								&& this.arrows !== this.selectedIndex)
								{
									this.arrows = this.selectedIndex;
									var result = _callback.call(this, event);
									this.blur();
									this.focus();
									return result;
								}
							});
							
							callback = function(event)
							{
								if(typeof this.arrows === 'number')
								{
									this.arrows = null;
									return true;
								}
								else
									return _callback.call(this, event);
							};
						}
					}
					break;
					case 'INPUT':
					{
						if(event === 'change')
						{
							if(node.type === 'radio' || node.type === 'checkbox')
							{
								SSP.DOM.listen(node, 'click', function(event)
								{
									this.blur();
									this.focus();
								});
							}
							else
							{
								SSP.DOM.listen(node, 'keyup', function(event)
								{
									if(!event.isCursor)
									{
										this.blur();
										this.focus();
									}
								});
							}
						}
					}
					break;
				}
				
				var contentWindow = SSP.DOM.getWindow(node);
				
				var name = SSP.DOM.getWindowName(contentWindow);
				
				if(!SSP.DOM.frames[name])
					SSP.DOM.frames[name] = contentWindow;
				
				if(!SSP.DOM.listeners[name])
				{
					SSP.DOM.listeners[name] = {};
					
					if(!SSP.DOM.isFrame(contentWindow))
					{
						if(SSP.Browser.IE)
							SSP.DOM.listen(contentWindow, 'unload', function(){
								SSP.DOM.garbageCollect(contentWindow);
							});
					}
					else
						SSP.DOM.listen(contentWindow, SSP.Browser.Chrome ? 'beforeunload' : 'unload', (function(){
							return function(event){
								if(event && event.type === 'beforeunload')
								{
									SSP.Bus.cancel(event);
									return true;
								}
							};
						})());
				}
					
				if(!SSP.DOM.listeners[name][event])
					SSP.DOM.listeners[name][event] = {};
				
				var uid = SSP.DOM.setUid(node);
				var bind = false;
				
				if(!SSP.DOM.listeners[name][event][uid])
				{
					SSP.DOM.listeners[name][event][uid] = {node: node, callback: []};
					bind = true;
				}
				
				if(typeof node.addEventListener === 'function' && event === 'DOMContentLoaded')
					var callback = SSP.DOM.waitScriptsAndStylesheets(callback);
				
				if(debounce)
					callback.debounce = true;
				
				if(unshift)
					SSP.DOM.listeners[name][event][uid].callback.unshift(callback);
				else
					SSP.DOM.listeners[name][event][uid].callback.push(callback);
				
				if(typeof node.addEventListener === 'function')
				{
					switch(event)
					{
						case 'readystatechange':
						{
							if(!SSP.Browser.IE && bind)
							{
								var unloader = (function(event, gc)
								{
									var node = SSP.DOM.nodes[name][uid];
									
									if(node)
									{
										if(typeof gc === 'undefined')
											gc = true;
										
										if(gc && SSP.Browser.Chrome)
											SSP.DOM.garbageCollect(node.contentWindow);
										
										node.loading = true;
										
										if(node.checker)
											clearInterval(node.checker);
										
										node.checker = setInterval(checker, SSP.DOM.timeoutShort);
										
										if(event && event.type === 'beforeunload')
										{
											SSP.Bus.cancel(event);
											node.contentWindow.onbeforeunload = undefined;
										}
									}
								});
								
								var checker = (function(){return function()
								{
									var node = SSP.DOM.nodes[name][uid];
									
									if(node)
									{
										node.loading = true;
										
										try
										{
											var location = node.contentWindow.location.toString();
											
											if(location !== 'about:blank')
											{
												var contentDocument = node.contentDocument;
												
												try
												{
													if(window.DEV)
														console.log('iframe ' + contentDocument.readyState + ' ' + location + (contentDocument.body !== null ? ' (body is available)' : ''));
													
													if(contentDocument.layoutIndicationRemoved === void 0
													&& contentDocument.readyState === 'loading'
													&& contentDocument.body !== null
													&& node.id)
													{
														var removeIndication = false;
														var anchor = location.split('#')[1];
														
														if(anchor)
														{
															var anchorNode = contentDocument.getElementById(anchor) || contentDocument.getElementsByName(anchor)[0];
															
															if(anchorNode
															&& anchorNode.scrollIntoView)
															{
																anchorNode.scrollIntoView();
																removeIndication = true;
																console.log('iframe scrolled to anchor');
															}
														}
														else
															removeIndication = true;
														
														if(removeIndication)
														{
															var widget = SSP.Widget(node.id);
															
															if(widget)
															{
																var layout = node.layoutNode || widget.layout;
																
																if(layout
																&& SSP.DOM.hasClass(layout, 'loading'))
																{
																	SSP.DOM.removeClass(layout, 'loading');
																	contentDocument.layoutIndicationRemoved = true;
																	console.log('iframe layout indication removed');
																}
															}
														}
													}
												}
												catch(ee)
												{
													if(window.DEV)
														console.log(ee);
												}
												
												if(contentDocument.readyState !== 'uninitialized'
												&& contentDocument.readyState !== 'loading'
												&& contentDocument.body !== null
												&& (node.src !== 'javascript:' || contentDocument.frameEmulated || typeof contentDocument.frameEmulated === 'undefined'))
												{
													if(!contentDocument.frameEmulated)
														try
														{
															var callback = SSP.DOM.listeners[name][event][uid].callback;
															
															for(var i = 0; i < callback.length; i++)
																if(callback[i] && !SSP.Bus.isCanceled(event))
																	callback[i].call(contentDocument);
														}
														catch(ee)
														{
															if(window.DEV)
																console.log(ee);
														}
													
													node.loading = false;
													
													if(node.checker)
														clearInterval(node.checker);
													
													node.checker = undefined;
													
													console.log('iframe finalized');
													
													setTimeout((function(name, location){
														return function(){ // trying to avoid race condition
															var contentWindow = SSP.DOM.getFrameWindow(name);
															if(contentWindow && contentWindow.frameElement && contentWindow.frameElement.unloader)
															{
																if(SSP.Browser.Chrome)
																	contentWindow.onbeforeunload = contentWindow.frameElement.unloader;
																else
																	SSP.DOM.listen(contentWindow, 'unload', contentWindow.frameElement.unloader);
																if(location !== contentWindow.location.toString() && typeof contentWindow.frameElement.unloader === 'function')
																	contentWindow.frameElement.unloader();
															}
														};
													})(node.name, location), SSP.DOM.timeoutLong);
												}
											}
										}
										catch(e)
										{
											if(window.DEV)
												console.log(e);
										}
									}
								};
								})(name, uid);
								
								node.unloader = unloader;
								
								if(SSP.Browser.Chrome)
									node.contentWindow.onbeforeunload = unloader;
								
								SSP.DOM.listeners[name][event][uid].handler = unloader;
								
								unloader(undefined, false);
								
								return;
							}
						}
						break;
						case 'load':
						{
							if(SSP.DOM.isWindow(node)
							&& SSP.DOM.isFrame(node)
							&& node.document.readyState === 'complete'
							&& !node.document.frameEmulated)
							{
								bind = false;
								
								var callback = SSP.DOM.listeners[name][event][uid].callback;
								
								for(var i = 0; i < callback.length; i++)
									if(callback[i] && !SSP.Bus.isCanceled(event))
										callback[i].call(node);
							}
						}
						break;
					}
					
					if(bind)
					{
						var handler = SSP.DOM.getHandler(name, event, uid);
						SSP.DOM.listeners[name][event][uid].handler = handler;
						return node.addEventListener(event, handler, false);
					}
					else
						return true;
				}
				else
				{
					switch(event)
					{
						case 'DOMContentLoaded':
						{
							if(node.tagName === 'IFRAME')
								var contentWindow = node.contentWindow;
							else
								var contentWindow = SSP.DOM.getFrameWindow(name);
							
							var contentDocument = contentWindow.document;
							
							if(!SSP.DOM.isFrame(contentWindow))
								return SSP.DOM.simulateDOMContentLoaded(node, callback);
							else
							{
								node.loading = true;
								
								var handler = function(event)
								{
									var target;
									
									if(this.tagName === 'IFRAME')
										target = this;
									else
									{
										event = event || window.event;
										target = event.srcElement;
									}
									
									if(!target.loading)
										return false;
									
									if(target.readyState === 'interactive' || target.readyState === 'complete')
									{
										try
										{
											if(target.contentWindow.document)
											{
												target.loading = false;
												
												SSP.DOM.simulateDOMContentLoaded(target.contentWindow.document, callback);
											}
										}
										catch(e)
										{
											
										}
									}
								};
								
								SSP.DOM.listeners[name][event][uid].handler = handler;
								
								if(node.src !== 'about:blank' && node.readyState === 'complete')
								{
									node.loading = false;
									
									SSP.DOM.simulateDOMContentLoaded(node.contentWindow.document, callback);
								}
								
								var result = node.attachEvent('onreadystatechange', handler);
								
								return result;
							}
						}
						break;
						case 'load':
						{
							if(SSP.DOM.isWindow(node) && node.opener)
							{
								var checker = function()
								{
									if(node.location.toString() !== location)
									{
										try
										{
											var body = node.document.body;
											
											if(body !== null)
											{
												clearInterval(window.popupPoll);
												callback.call(node);
											}
										}
										catch(e)
										{
											
										}
									}
								};
								
								var location = node.location.toString();
								window.popupPoll = setInterval(checker, SSP.DOM.timeoutLong);
								
								return true;
							}
						}
						break;
						case 'scroll':
						{
							if(SSP.DOM.isDocument(node))
								node = SSP.DOM.getWindow(node);
						}
						break;
					}
					
					if(bind)
					{
						var handler = SSP.DOM.getHandler(name, event, uid);
						SSP.DOM.listeners[name][event][uid].handler = handler;
						
						if(event === 'wheel')
							event = 'mousewheel';
						
						var result = node.attachEvent('on' + event, handler);
					}
					else
						result = true;
					
					return result;
				}
			}
			else if(node.length)
				return SSP.DOM.walk(node, SSP.DOM.listen, [event, callback]);
		})
		,
		trigger: function(node, event, debounce)
		{
			var contentWindow = SSP.DOM.getWindow(node);
			
			if(!contentWindow)
				return;
			
			var contentDocument = contentWindow.document;
			
			if(!contentDocument)
				return;
			
			if(typeof event === 'string')
			{
				var args = undefined;
				var name = event;
			}
			else
			{
				var args = event;
				var name = event.type;
				delete event.type;
			}
			
			event = undefined;
			
			if(contentDocument.createEvent)
			{
				var type;
				
				switch(name)
				{
					case 'load':
					case 'beforeunload':
					case 'unload':
					case 'abort':
					case 'error':
					case 'select':
					case 'change':
					case 'submit':
					case 'reset':
					case 'resize':
					case 'scroll':
					{
						type = 'HTMLEvents';
					}
					break;
					case 'focus':
					case 'blur':
					{
						type = 'FocusEvents';
					}
					break;
					case 'keydown':
					case 'keyup':
					{
						type = 'KeyboardEvents';
					}
					break;
					case 'click':
					case 'dblclick':
					case 'mousedown':
					case 'mousemove':
					case 'mouseout':
					case 'mouseover':
					case 'mouseup':
					case 'wheel':
					{
						type = 'MouseEvents';
					}
					break;
					break;
					default:
					{
						type = 'CustomEvent';
					}
				}
				
				event = contentDocument.createEvent(type);
				
				event.initEvent(name, true, true);
			}
			else
			{
				event = contentDocument.createEventObject();
				
				event.type = event.eventType = name;
			}
			
			event.eventName = name;
			
			if(typeof args === 'object')
				for(var arg in args)
				try
				{
					event[arg] = args[arg];
				}
				catch(e) {}
			
			SSP.DOM.setUid(node);
			
			if(debounce)
			{
				var windowName = contentWindow.name;
				
				setTimeout(
					(function(){return function()
					{
						SSP.DOM.doTrigger(SSP.DOM.byUid(uid, SSP.DOM.frames[windowName].document), event, name);
					};
					})(uid, event, name, windowName),
					SSP.DOM.timeoutMedium
				);
			}
			else
				return SSP.DOM.doTrigger(node, event, name);
		}
		,
		doTrigger: function(node, event, name)
		{
			if(!node)
				return;
			
			if(node.dispatchEvent)
			{
				switch(event.type)
				{
					case 'readystatechange':
					{
						if(node.tagName === 'IFRAME' && node.name && SSP.DOM.listeners.top[event.type])
						{
							var callback = SSP.DOM.listeners.top[event.type][node.uid].callback;
							
							for(var i = 0; i < callback.length; i++)
								if(callback[i])
									callback[i].call(node);
							
							return;
						}
					}
					break;
				}
				
				return node.dispatchEvent(event);
			}
			else
			{
				switch(name)
				{
					case 'resize':
					{
						var body = SSP.DOM.getDocument(node).body;
						
						var oldHeight = body.style.height;
						
						if(oldHeight)
						{
							body.style.height = body.offsetHeight + 'px';
							body.style.height = oldHeight;
						}
						else
						{
							body.style.height = body.offsetHeight + 'px';
							body.style.height = '';
						}
						
						return;
					}
					break;
					case 'click':
					{
						switch(node.tagName)
						{
							case 'A':
							{
								if(!node.hash || node.hash === '#')
								{
									var uid = SSP.DOM.setUid(node);
									
									node.navigator = (function(){return function(event)
									{
										var target = event.target;
										
										if(target.uid === uid)
										{
											if(SSP.Bus.isCanceled(event))
											{
												SSP.DOM.cancel(this, event.type, target.navigator);
												target.navigator = null;
											}
											else
											{
												var url = SSP.String.parseUrl(target.href);
												var params = SSP.String.parseStr(url.search);
												
												var form = SSP.DOM.create(
													'FORM',
													{
														action: target.href,
														method: 'GET',
														style:
														{
															position: 'absolute',
															top: '-1000px',
															left: '-1000px'
														}
													}
												);
												
												for(var param in params)
													form.appendChild(SSP.DOM.create('INPUT', {type: 'text', name: param, value: params[param]}));
												
												SSP.DOM.getDocument(target).body.appendChild(form);
												form.submit();
											}
										}
									};
									})(uid);
									
									SSP.DOM.listen(SSP.DOM.getDocument(node), name, node.navigator);
								}
								else if(!node.listeningClick)
									SSP.DOM.listen(node, name, function(event){
										window.location = this.href;
									});
							}
							break;
							case 'INPUT':
							{
								if(node.type === 'checkbox' || node.type === 'radio')
									node.checked = !node.checked;
							}
							break;
						}
					}
					break;
					case 'DOMContentLoaded':
					{
						if(SSP.DOM.isFrame(node))
							var contentDocument = node.contentWindow.document;
						else if(SSP.DOM.isWindow(node))
							var contentDocument = node.document;
						else if(SSP.DOM.isDocument(node))
							var contentDocument = node;
						
						var uid = node.uid;
						
						if(!uid && SSP.DOM.isDocument(node))
						{
							var contentWindow = SSP.DOM.getWindow(node);
							uid = contentWindow.uid;
							
							if(!uid)
								uid = contentWindow.frameElement.uid;
						}
						
						if(uid && SSP.DOM.listeners.top[name][uid])
							SSP.DOM.simulateDOMContentLoaded(contentDocument, SSP.DOM.listeners.top[name][uid].callback[0]);
						else
						{
							if(SSP.DOM.isFrame(node))
								var iframe = node;
							else
							{
								var contentWindow = SSP.DOM.getWindow(node);
								var iframe = contentWindow.frameElement;
							}
							
							uid = iframe.uid;
							name = 'readystatechange';
							
							if(uid && SSP.DOM.listeners.top[name][uid])
								SSP.DOM.simulateDOMContentLoaded(contentDocument, SSP.DOM.listeners.top[name][uid].callback[0]);
						}
						
						return;
					}
					break;
				}
				
				var onname = 'on' + name;
				
				try
				{
					return node.fireEvent(onname, event);
				}
				catch(e)
				{
					if(node[name])
						return node[name].call(node, event);
					else if(node[onname])
						return node[onname].call(node, event);
				}
			}
		}
		,
		garbageCollect: (function(contentWindow)
		{
			if(contentWindow.location.toString() !== 'about:blank')
				SSP.DOM.cancelAll(undefined, contentWindow);
		})
		,
		requestAnimationFrame: (function(callback, node)
		{
			var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
			
			if(requestAnimationFrame)
				return requestAnimationFrame.call(window, callback, node);
			else
				setTimeout(
					function()
					{
						callback.call(window, +(new Date));
					},
					1000 / 60
				);
		})
		,
		animationFramesQueue: []
		,
		queueAnimationFrame: (function(callback)
		{
			SSP.DOM.animationFramesQueue.push(callback);
		})
		,
		processAnimationFrames: (function()
		{
			if(SSP.DOM.animationFramesQueue.length)
			{
				var callback = SSP.DOM.animationFramesQueue.shift();
				
				SSP.DOM.requestAnimationFrame(function(now)
				{
					try
					{
						callback.call(window, now);
					}
					catch(e)
					{
					}
					
					SSP.DOM.processAnimationFrames();
				});
			}
		})
		,
		requestIdleCallback: (function(callback, timeout)
		{
			if(window.requestIdleCallback)
			{
				if(!timeout)
					timeout = SSP.DOM.timeoutLong;
				
				return window.requestIdleCallback(callback, {timeout: timeout});
			}
			else
				setTimeout(callback, 0);
		})
		,
		keyCodes:
		{
			 8: 'Backspace',
			 9: 'Tab',
			13: 'Enter',
			16: 'Shift',
			17: 'Control',
			18: 'Alt',
			19: 'Pause',
			20: 'CapsLock',
			27: 'Esc',
			32: 'Spacebar',
			33: 'PageUp',
			34: 'PageDown',
			35: 'End',
			36: 'Home',
			37: 'Left',
			38: 'Up',
			39: 'Right',
			40: 'Down',
			45: 'Insert',
			46: 'Del'
		}
		,
		fixEvent: (function(event)
		{
			if(typeof event.target === 'undefined')
				event.target = event.srcElement;
			
			switch(event.type)
			{
				case 'keydown':
				case 'keyup':
				case 'keypress':
				{
					if(typeof event.key === 'undefined' && SSP.DOM.keyCodes[event.keyCode])
						event.key = SSP.DOM.keyCodes[event.keyCode];
					
					event.isCharacter = event.isCursor = event.isCopy = event.isPaste = event.isCut = event.isDelete = event.isSelect = event.isEscape = event.isEnter = false;
					
					if(!event.altKey)
					{
						if(event.ctrlKey || event.shiftKey)
						{
							if(event.ctrlKey && event.keyCode === 67 // Ctrl+C
							|| event.ctrlKey && event.keyCode === 45) // Ctrl+Insert
								event.isCopy = true;
							else if(event.ctrlKey && event.keyCode === 86 // Ctrl+V
							|| event.shiftKey && event.keyCode === 45) // Shift+Insert
								event.isPaste = true;
							else if(event.ctrlKey && event.keyCode === 88 // Ctrl+X
							|| event.shiftKey && event.keyCode === 46) // Shift+Del
								event.isCut = true;
						}
						
						if(!event.isCopy && !event.isPaste && !event.isCut)
						{
							if(event.keyCode === 8 || event.keyCode === 46 && !event.shiftKey)
								event.isDelete = true;
							else if(event.keyCode === 13)
								event.isEnter = true;
							else if(event.keyCode === 27)
								event.isEscape = true;
							else if(event.keyCode === 33 // PageUp
							|| event.keyCode === 34 // PageDown
							|| event.keyCode === 35 // End
							|| event.keyCode === 36 // Home
							|| event.keyCode === 37 // Left
							|| event.keyCode === 38 // Up
							|| event.keyCode === 39 // Right
							|| event.keyCode === 40) // Down
							{
								event.isCursor = true;
								
								if(event.shiftKey)
									event.isSelect = true;
								
								event['is' + SSP.DOM.keyCodes[event.keyCode]] = true;
							}
							else if(event.keyCode === 32 // Spacebar
							|| event.keyCode >= 48 && event.keyCode <= 90 // 0-9, A-Z
							|| event.keyCode >= 96 && event.keyCode <= 111 // Numpad, Math
							|| event.keyCode === 173 // -_
							|| event.keyCode >= 186 && event.keyCode <= 192 // Punct
							|| event.keyCode >= 219 && event.keyCode <= 222 // Punct
							|| event.keyCode === 0 && event.key) // Non-Latin
								event.isCharacter = true;
						}
					}
				}
				break;
				case 'click':
				case 'dblclick':
				{
					if(typeof event.isLeft === 'undefined')
						event.isLeft = false;
					
					if(typeof event.isRight === 'undefined')
						event.isRight = false;
					
					if(typeof event.isMiddle === 'undefined')
						event.isMiddle = false;
					
					if(SSP.Browser.IE)
						event.isLeft = true;
					else
					{
						switch(event.button)
						{
							case 0:
								event.isLeft = true;
							break;
							case 1:
								event.isMiddle = true;
							break;
							case 2:
								event.isRight = true;
							break;
						}
					}
				}
				break;
				case 'mousedown':
				case 'mouseup':
				case 'mousemove':
				{
					if(typeof event.isLeft === 'undefined')
						event.isLeft = false;
					
					if(typeof event.isRight === 'undefined')
						event.isRight = false;
					
					if(typeof event.isMiddle === 'undefined')
						event.isMiddle = false;
					
					var buttons = SSP.Browser.IE ? event.button : event.buttons;
					if(buttons & 1)
						event.isLeft = true;
					
					if(buttons & 2)
						event.isRight = true;
					
					if(buttons & 4)
						event.isMiddle = true;
				}
				break;
				case 'contextmenu':
				{
					event.isLeft = event.isMiddle = false;
					event.isRight = true;
				}
				break;
			}
			
			return event;
		})
		,
		getHandler: (function(windowName, eventName, uid)
		{
			return (function(event)
			{
				event = event || window.event;
				
				if((!SSP.DOM.listeners[windowName] || !SSP.DOM.listeners[windowName][eventName] || !SSP.DOM.listeners[windowName][eventName][uid])
				&& (SSP.Browser.IE || SSP.Browser.Chrome && eventName === 'beforeunload'))
					return;
				
				var listener = SSP.DOM.listeners[windowName][eventName][uid];
				
				if(listener.paused)
					return false;
				
				SSP.DOM.fixEvent(event);
				
				if(event.isPhantom || event.isMiddle && eventName === 'click')
					return true;
				
				var node = listener.node;
				var callback = listener.callback;
				
				var result = true;
				
				for(var i = 0; i < callback.length; i++)
					if(callback[i])
					{
						if(!callback[i].debounce)
						{
							if(window.DEV)
							{
								if(SSP.Bus.isCanceled(event)
								|| callback[i].call(node, event) === false)
									result = false;
							}
							else
								try
								{
									if(SSP.Bus.isCanceled(event)
									|| callback[i].call(node, event) === false)
										result = false;
								}
								catch(e)
								{
									SSP.System.console.log(e);
								}
						}
						else
						{
							if(typeof callback[i].debounce === 'number')
								clearTimeout(callback[i].debounce);
							
							callback[i].debounce = setTimeout(SSP.DOM.getDebouncer(windowName, eventName, uid, i, event), SSP.DOM.timeoutMedium);
						}
					}
				
				if((SSP.Browser.Chrome && eventName === 'beforeunload') || (!SSP.Browser.Chrome && eventName === 'unload')
				&& SSP.DOM.isFrame(node))
				{
					if(SSP.Browser.Chrome && eventName === 'beforeunload' && result === true)
						result = undefined;
					
					SSP.DOM.garbageCollect(node);
				}
				
				if(typeof e !== 'undefined')
					result = true;
				
				return result;
			});
		})
		,
		getDebouncer: (function(windowName, eventName, uid, i, event)
		{
			if(SSP.Browser.IE)
			{
				var _event = {};
				
				for(var key in event)
					_event[key] = event[key];
				
				event = _event;
			}
			
			return function()
			{
				if(SSP.DOM.listeners[windowName]
				&& SSP.DOM.listeners[windowName][eventName]
				&& SSP.DOM.listeners[windowName][eventName][uid])
				{
					var listener = SSP.DOM.listeners[windowName][eventName][uid];
					var node = listener.node;
					var callback = listener.callback[i];
					
					if(callback)
					{
						if(!SSP.Bus.isCanceled(event))
						{
							if(window.DEV)
								callback.call(node, event);
							else
								try
								{
									callback.call(node, event);
								}
								catch(e)
								{
									SSP.System.console.log(e);
								}
						}
						
						clearTimeout(callback.debounce);
						callback.debounce = true;
					}
				}
			};
		})
		,
		pause: function(node, eventName)
		{
			if(SSP.DOM.isNode(node) || SSP.DOM.isWindow(node))
			{
				var name = SSP.DOM.getWindowName(SSP.DOM.getWindow(node));
				
				if(SSP.DOM.listeners[name]
				&& SSP.DOM.listeners[name][eventName])
				{
					var uid = SSP.DOM.setUid(node);
					var listener = SSP.DOM.listeners[windowName][eventName][uid];
					
					if(listener)
					{
						listener.paused = true;
						
						if(typeof node.removeEventListener === 'function')
							node.removeEventListener(eventName, listener.handler, false);
						else if(node.detachEvent)
							node.detachEvent('on' + eventName, listener.handler);
					}
				}
			}
			else
				return SSP.DOM.walk(node, SSP.DOM.pause, [eventName]);
		}
		,
		unpause: function(node, eventName)
		{
			if(SSP.DOM.isNode(node) || SSP.DOM.isWindow(node))
			{
				var name = SSP.DOM.getWindowName(SSP.DOM.getWindow(node));
				
				if(SSP.DOM.listeners[name]
				&& SSP.DOM.listeners[name][eventName])
				{
					var uid = SSP.DOM.setUid(node);
					var listener = SSP.DOM.listeners[windowName][eventName][uid];
					
					if(listener
					&& listener.paused)
					{
						delete listener.paused;
						
						if(typeof node.addEventListener === 'function')
							node.addEventListener(eventName, listener.handler, false);
						else if(node.attachEvent)
							node.attachEvent('on' + eventName, listener.handler);
					}
				}
			}
			else
				return SSP.DOM.walk(node, SSP.DOM.unpause, [eventName]);
		}
		,
		cancel: (function(node, eventName, callback, remove, name)
		{
			if(SSP.DOM.isNode(node) || SSP.DOM.isWindow(node))
			{
				remove = typeof remove === 'undefined' ? true : !!remove;
				
				try
				{
					if(eventName === 'scroll')
					{
						if(node.tagName === 'IFRAME')
							node = node.contentWindow;
					}
					
					var uid = node.uid;
				}
				catch(e)
				{
					if(SSP.Browser.IE)
						return;
					else
						throw e;
				}
				
				name = name || SSP.DOM.getWindowName(SSP.DOM.getWindow(node));
				
				if(callback)
				{
					var callbacks = SSP.DOM.listeners[name][eventName][uid].callback;
					
					for(var i = 0; i < callbacks.length; i++)
						if(callbacks[i] === callback)
							callbacks.splice(i, 1);
				}
				
				if(!callback || !callbacks.length)
				{
					if(!eventName && !callback)
					{
						if(SSP.DOM.nodes[name][uid])
							for(var eventName in SSP.DOM.listeners[name])
								if(SSP.DOM.listeners[name][eventName][uid])
									SSP.DOM.cancel(node, eventName, void 0, remove);
						
						return;
					}
					
					var result;
					
					if(SSP.DOM.listeners[name][eventName] && SSP.DOM.listeners[name][eventName][uid])
					{
						var handler = SSP.DOM.listeners[name][eventName][uid].handler;
						
						if(handler)
						{
							if(typeof node.removeEventListener === 'function')
								result = node.removeEventListener(eventName, handler, false);
							else
							{
								switch(eventName)
								{
									case 'DOMContentLoaded':
									{
										if(name === 'top')
										{
											result = true;
											break;
										}
									}
									case 'scroll':
									{
										if(SSP.DOM.isDocument(node))
										{
											node.detachEvent('on' + eventName, handler);
											node = SSP.DOM.getWindow(node);
										}
									}
									default:
									{
										result = node.detachEvent('on' + eventName, handler);
									}
								}
							}
						}
						
						if(remove)
							delete SSP.DOM.listeners[name][eventName][uid];
					}
					
					if(remove && SSP.DOM.nodes[name] && SSP.DOM.nodes[name][uid])
						delete SSP.DOM.nodes[name][uid];
					
					if(remove && !SSP.DOM.listeners[name][eventName])
						delete SSP.DOM.listeners[name][eventName];
					
					return result;
				}
			}
			else
				return SSP.DOM.walk(node, SSP.DOM.cancel, [eventName, callback, remove]);
		})
		,
		cancelAll: (function(eventName, contentWindow)
		{
			contentWindow = contentWindow || window;
			var iframe = contentWindow != window;
			var name = SSP.DOM.getWindowName(contentWindow);
			var uid;
			
			if(SSP.DOM.listeners[name])
			{
				if(eventName)
				{
					if(typeof SSP.DOM.listeners[name][eventName] !== 'undefined')
						for(uid in SSP.DOM.listeners[name][eventName])
							try
							{
								SSP.DOM.cancel(SSP.DOM.listeners[name][eventName][uid].node, eventName, void 0, void 0, name);
							}
							catch(e){}
				}	
				else
				{
					for(eventName in SSP.DOM.listeners[name])
						for(uid in SSP.DOM.listeners[name][eventName])
							try
							{
								SSP.DOM.cancel(SSP.DOM.listeners[name][eventName][uid].node, eventName, void 0, void 0, name);
							}
							catch(e){}
					
					delete SSP.DOM.listeners[name];
				}
			}
		})
		,
		getWindowName: (function(contentWindow)
		{
			if(contentWindow.frameElement)
				return contentWindow.frameElement.id || contentWindow.frameElement.name;
			else
				return 'top';
		})
		,
		setFavicon: (function(img)
		{
			var link;
			
			if(link = this.byId('favicon'))
				this.destroy(link);
			
			var type = 'image/x-icon';
			var matches = img.replace(/^https?:\/\/[^\/]+/, '').match(/\.([a-z]+)/);
			
			if(matches)
				switch(matches[1])
				{
					case 'gif':
					case 'png':
					{
						type = 'image/' + matches[1];
					}
					break;
				}
			
			link = this.create('LINK', {id: 'favicon', type: type, rel: 'icon', href: img});
			this.byTag('HEAD')[0].appendChild(link);
		})
		,
		waitScriptsAndStylesheets: function(callback)
		{
			return function()
			{
				SSP.Object.wait(null, null, SSP.DOM.allScriptsAndStylesheetsLoaded, callback);
			};
		}
		,
		allScriptsAndStylesheetsLoadedCached: false
		,
		allScriptsAndStylesheetsLoaded: (function(contentDocument)
		{
			if(!contentDocument)
				contentDocument = SSP.DOM.document;
			
			if(contentDocument == SSP.DOM.document
			&& SSP.DOM.allScriptsAndStylesheetsLoadedCached)
				return true;
			
			var scripts = contentDocument.getElementsByTagName('SCRIPT');
			var links = contentDocument.getElementsByTagName('LINK');
			
			var stylesheets = [];
			
			for(var i = 0; i < links.length; i++)
				if(links[i].rel === 'stylesheet')
					stylesheets.push(links[i]);
			
			if(SSP.Browser.IE)
			{
				for(var i = 0; i < scripts.length; i++)
					if(scripts[i].src
					&& scripts[i].readyState !== 'complete'
					&& scripts[i].readyState !== 'loaded')
						return false;
				
				for(var i = 0; i < stylesheets.length; i++)
					if(stylesheets[i].href
					&& stylesheets[i].readyState !== 'complete'
					&& stylesheets[i].readyState !== 'loaded')
						return false;
			}
			else
			{
				for(var i = 0; i < scripts.length; i++)
					if(scripts[i].src
					&& scripts[i].getAttribute('onload')
					&& !scripts[i].loaded)
						return false;
				
				for(var i = 0; i < stylesheets.length; i++)
					if(stylesheets[i].href
					&& stylesheets[i].getAttribute('onload')
					&& !stylesheets[i].loaded)
						return false;
			}
			
			if(contentDocument == SSP.DOM.document)
				SSP.DOM.allScriptsAndStylesheetsLoadedCached = true;
			
			return true;
		})
		,
		simulateDOMContentLoaded: function(contentDocument, callback)
		{
			var loaded = false;
			
			try
			{
				var readyState = contentDocument.readyState;
			}
			catch(e)
			{
				return;
			}
			
			if((readyState === 'interactive' || readyState === 'complete') && contentDocument.body)
			{
				try
				{
					contentDocument.documentElement.doScroll('left');
					loaded = SSP.DOM.allScriptsAndStylesheetsLoaded();
				}
				catch(e)
				{
					loaded = false;
				}
			}
			
			if(loaded)
			{
				try
				{
					var event = contentDocument.createEventObject();
					event.eventType = 'DOMContentLoaded';
					event.target = event.srcElement = contentDocument;
				}
				catch(e)
				{
					event = undefined;
				}
				
				callback.call(contentDocument, event);
			}
			else
				setTimeout(
					function()
					{
						SSP.DOM.simulateDOMContentLoaded(contentDocument, callback);
					},
					SSP.DOM.timeoutMedium
				);
		}
		,
		simulateDocumentAll: (function(contentDocument)
		{
			if(!contentDocument.all && Object.defineProperty)
			{
				var descriptor =
				{
					get: function()
					{
						var all = {};
						var dup = {};
						var elements = contentDocument.getElementsByTagName('*');
						var len = elements.length;
						var element;
						var id, name;
						
						for(var i = 0; i < len; i++)
						{
							element = elements[i];
							id = element.id;
							name = element.name;
							
							if(id)
								all[id] = element;
							else if(name && !all[name])
								all[name] = element;
						}
						
						return all;
					}
				};
				
				Object.defineProperty(contentDocument, 'all', descriptor);
			}
		})
		,
		simulateElementChildren: (function(contentWindow)
		{
			if(contentWindow.Element && typeof contentWindow.document.body.children === 'undefined')
				contentWindow.Element.prototype.__defineGetter__(
					'children',
					function()
					{
						var children = [];
						
						for(var i = 0; i < this.childNodes.length; i++)
							if(this.childNodes[i] instanceof contentWindow.Element)
								children.push(this.childNodes[i]);
						
						return children;
					}
				);
		})
		,
		simulateElementParentElement: (function(contentWindow)
		{
			if(contentWindow.Node && contentWindow.Element && typeof contentWindow.document.body.parentElement === 'undefined')
				contentWindow.Node.prototype.__defineGetter__(
					'parentElement',
					function()
					{
						return this.parentNode && this.parentNode instanceof contentWindow.Element
							 ? this.parentNode
							 : null;
					}
				);
		})
		,
		getBorderHeight: function(node, side)
		{
			if(!side)
				var sides = ['top', 'bottom'];
			else
				var sides = [side];
			
			return SSP.DOM.getBorderSize(node, sides);
		}
		,
		getBorderWidth: function(node, side)
		{
			if(!side)
				var sides = ['left', 'right'];
			else
				var sides = [side];
			
			return SSP.DOM.getBorderSize(node, sides);
		}
		,
		getBorderSize: function(node, sides)
		{
			var style = SSP.DOM.getComputedStyle(node);
			var width = 0, w;
			
			if(sides instanceof Array)
			{
				var collapse = sides.length > 1 && style.borderCollapse === 'collapse';
				var params = [];
				
				for(var i = 0; i < sides.length; i++)
				{
					switch(sides[i])
					{
						case 'left':
						{
							params.push('borderLeftWidth');
						}
						break;
						case 'right':
						{
							params.push('borderRightWidth');
						}
						break;
						case 'top':
						{
							params.push('borderTopWidth');
						}
						break;
						case 'bottom':
						{
							params.push('borderBottomWidth');
						}
						break;
					}
				}
			}
			else
			{
				var collapse = style.borderCollapse === 'collapse';
				var params = ['borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];
			}
			
			for(var i = 0; i < params.length; i++)
			{
				w = parseInt(style[params[i]], 10);
				if(!isNaN(w))
					width += w;
			}
			
			if(collapse)
				width = Math.round(width / 2);
			
			return width;
		}
		,
		scrollbarWidth: undefined
		,
		getScrollbarWidth: (function()
		{
			if(typeof SSP.DOM.scrollbarWidth === 'undefined')
			{
				var outer = SSP.DOM.create('DIV');
				outer.style.position = 'absolute';
				outer.style.top = '-1000px';
				outer.style.left = '-1000px';
				outer.style.width = '100px';
				outer.style.overflow = 'scroll';
				
				SSP.DOM.document.body.appendChild(outer);
				
				var inner = SSP.DOM.create('DIV');
				inner.style.width = '100%';
				outer.appendChild(inner);
				
				SSP.DOM.scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
			}
			
			return SSP.DOM.scrollbarWidth;
		})
		,
		hasScrollbarX: function(node)
		{
			return node.scrollWidth > node.offsetWidth;
		}
		,
		hasScrollbarY: function(node)
		{
			return node.scrollHeight > node.offsetHeight;
		}
		,
		prerenderedUrl: undefined
		,
		prerenderUrl: function(url)
		{
			if(SSP.DOM.prerenderedUrl !== url)
			{
				var id = 'prerender_link';
				var link = SSP.DOM.byId(id);
				
				if(!link)
					link = SSP.DOM.create('LINK', {id: id, rel: SSP.Browser.Chrome || SSP.Browser.IE ? 'prerender' : 'prefetch'});
				else
					link.parentNode.removeChild(link);
				
				link.href = url;
				SSP.DOM.byTag('HEAD')[0].appendChild(link);
				SSP.DOM.prerenderedUrl = url;
			}
		}
		,
		prefetchUrl: function(url)
		{
			var id = 'prefetch_link';
			var link = SSP.DOM.create('LINK', {id: id, rel: 'prefetch', href: url});
			SSP.DOM.byTag('HEAD')[0].appendChild(link);
		}
		,
		prerenderUrlListenMouseOver: function(a)
		{
			if(a.tagName === 'A')
			{
				if(!SSP.Bus.initialized || !SSP.Bus.router.match(a.href))
					SSP.DOM.listen(a, 'mouseover', SSP.DOM.prerenderUrlOnMouseOver);
			}
		}
		,
		prerenderUrlOnMouseOver: function(event)
		{
			var a = SSP.DOM.findParentByTag(event.target, 'A');
			
			if(a && !a.prerendered && a.href)
			{
				SSP.DOM.prerenderUrl(a.href);
				a.prerendered = true;
				SSP.DOM.cancel(a, 'mouseover', SSP.DOM.prerenderUrlOnMouseOver);
			}
		}
		,
		preloadUrl: function(url, type)
		{
			var id = 'preload_link';
			var link = SSP.DOM.create('LINK', {id: id, rel: 'preload', href: url, as: type});
			SSP.DOM.byTag('HEAD')[0].appendChild(link);
		}
		,
		getInlineCss: (function(contentDocument, id)
		{
			contentDocument = contentDocument || SSP.DOM.document;
			id = id || 'added_inline_css';
			
			var style = SSP.DOM.byId(id, contentDocument);
			
			if(!style)
			{
				style = SSP.DOM.create('STYLE', {id: id, type: 'text/css'}, contentDocument);
				var head = contentDocument.head || contentDocument.getElementsByTagName('HEAD')[0];
				head.appendChild(style);
			}
			
			return style;
		})
		,
		setInlineCss: (function(css, contentDocument, id)
		{
			var style = SSP.DOM.getInlineCss(contentDocument, id);
			
			if(style.styleSheet)
				style.styleSheet.cssText = css;
			else
			{
				while(style.firstChild)
					style.removeChild(style.firstChild);
				
				style.appendChild(style.ownerDocument.createTextNode(css));
			}
			
			return style;
		})
		,
		addInlineCss: (function(css, contentDocument, id)
		{
			var style = SSP.DOM.getInlineCss(contentDocument, id);
			
			if(style.styleSheet)
				style.styleSheet.cssText += "\r\n" + css;
			else
				style.appendChild(style.ownerDocument.createTextNode(css));
			
			return style;
		})
		,
		removeInlineCss: (function(contentDocument, id)
		{
			id = id || 'added_inline_css';
			
			var style = SSP.DOM.byId(id, contentDocument);
			
			if(style)
				style.parentNode.removeChild(style);
		})
		,
		getComputedStyle: (function(node, pseudo)
		{
			if(typeof window.getComputedStyle === 'function')
				return window.getComputedStyle(node, pseudo);
			
			return node.currentStyle;
		})
		,
		isVisible: (function(node)
		{
			if(!node)
				return;
			
			do
			{
				if(node.style.display === 'none')
					return false;
				
				var style = SSP.DOM.getComputedStyle(node);
				
				if(style.display === 'none')
					return false;
			}
			while((node = node.parentNode) && node.tagName !== 'BODY' && node.tagName !== 'HTML');
			
			return true;
		})
		,
		scroll: (function(node, top, ifNeeded, alignLeft)
		{
			if(node === null)
				return;
			
			if(!ifNeeded)
			{
				if(typeof top === 'undefined')
					top = true;
				else
					top = !!top;
				
				if(typeof alignLeft === 'undefined')
					alignLeft = false;
				else
					alignLeft = !!alignLeft;
				
				var scrolledItem = SSP.DOM.getScrolledItemAndOffset(node);
				
				if(!scrolledItem.item)
					return;
				
				var scrolled = scrolledItem.item;
				var offsetTop = scrolledItem.offsetTop;
				
				var self = node === scrolled;
				
				var offsetTop = self ? 0 : (typeof offsetTop !== 'undefined' ? offsetTop : node.offsetTop);
				
				if(top)
					scrolled.scrollTop = offsetTop;
				else
					scrolled.scrollTop = offsetTop + (self ? scrolled.scrollHeight : scrolled.offsetHeight) - node.offsetHeight;
				
				scrolled.scrollLeft = 0;
			}
			else if(top.tagName === 'IFRAME')
			{
				var container = SSP.DOM.getContainer(top.contentWindow.document);
				
				if(!container)
					return;
				
				if(container.scrollHeight > container.clientHeight
				|| container.scrollWidth > container.clientWidth)
				{
					var outer = SSP.DOM.getFrameBoundingClientRect(top);
					var scrolledItem = SSP.DOM.getScrolledItemAndOffset(node);
					
					if(!scrolledItem.item)
						return;
					
					var scrollbarWidth = SSP.DOM.getScrollbarWidth();
					
					var outerHeigth = outer.bottom - outer.top;
					var outerWidth = outer.right - outer.left;
					
					if(scrolledItem.offsetTop <= outer.top || scrolledItem.offsetTop + node.offsetHeight >= outer.bottom - scrollbarWidth)
						container.scrollTop = scrolledItem.offsetTop - (outerHeigth + node.offsetHeight) / 2;
					else if(node.offsetWidth > outerWidth)
						container.scrollLeft = scrolledItem.offsetLeft;
					else if(scrolledItem.offsetLeft <= outer.left || scrolledItem.offsetLeft + node.offsetWidth >= outer.right - scrollbarWidth)
						container.scrollLeft = scrolledItem.offsetLeft - (outerWidth + node.offsetWidth) / 2;
				}
			}
			else
			{
				var outer = top.getBoundingClientRect();
				var inner = node.getBoundingClientRect();
				
				if(inner.top <= outer.top || inner.bottom >= outer.bottom)
					top.scrollTop = node.offsetTop - (top.offsetHeight + node.offsetHeight) / 2;
				
				if(node.offsetWidth > top.offsetWidth)
					top.scrollLeft = node.offsetLeft;
				else if(inner.left <= outer.left || inner.right >= outer.right)
					top.scrollLeft = node.offsetLeft - (top.offsetWidth + node.offsetWidth) / 2;
			}
		})
		,
		getFrameBoundingClientRect: (function(frame)
		{
			var container = SSP.DOM.getContainer(frame.contentWindow.document);
			var rect = {};
			
			rect.left = container.scrollLeft;
			rect.width = frame.offsetWidth;
			rect.right = rect.left + rect.width;
			
			rect.top = container.scrollTop;
			rect.height = frame.offsetHeight;
			rect.bottom = rect.top + rect.height;
			
			rect.x = rect.left;
			rect.y = rect.top;
			
			return rect;
		})
		,
		getScrolledItemAndOffset: (function(node)
		{
			var offsetLeft;
			var offsetTop;
			var scrolled;
			
			if(node.tagName === 'BODY')
				scrolled = node;
			else if(node.tagName === 'HTML')
				scrolled = node.getElementsByTagName('BODY')[0];
			else
			{
				var style = SSP.DOM.getComputedStyle(node);
				
				if(style.overflow === 'auto' || style.overflow === 'scroll' || style.overflow === 'hidden')
				{
					scrolled = node;
					offsetLeft = node.offsetLeft;
					offsetTop = node.offsetTop;
				}
				else
				{
					try
					{
						if(node.tagName === 'A'
						&& node.innerHTML === ''
						&& node.parentNode.tagName !== 'BODY')
						{
							if(!SSP.Browser.IE)
								var parentStyle = SSP.DOM.getComputedStyle(node.parentNode);
							
							if(node.parentNode.tagName.match(/^(?:H[1-6]|T[DH]|P)$/)
							|| !SSP.Browser.IE && parentStyle.display === 'inline')
								node = node.parentNode;
							else if(SSP.Browser.IE)
							{
								if((!node.nextSibling || !SSP.DOM.isNode(node.nextSibling) && SSP.String.trim(node.nextSibling.innerText) === '')
								&& node.previousSibling
								&& (SSP.DOM.isNode(node.previousSibling) || SSP.String.trim(node.previousSibling.innerText) !== '')
								&& node.parentNode.nextSibling)
									node = node.parentNode.nextSibling;
							}
							else
							{
								if(!node.nextElementSibling
								&& (!node.nextSibling || SSP.String.trim(node.nextSibling.textContent) === '')
								&& (node.previousElementSibling || node.previousSibling && SSP.String.trim(node.previousSibling.textContent) !== '')
								&& node.parentNode.nextElementSibling)
									node = node.parentNode.nextElementSibling;
							}
						}
					}
					catch(e)
					{
						
					}
					
					do
					{
						if(!scrolled)
						{
							if(node.offsetParent)
								scrolled = node.offsetParent;
							else
								scrolled = SSP.DOM.getDocument(node).body;
							
							offsetLeft = node.offsetLeft;
							offsetTop = node.offsetTop;
						}
						else
							scrolled = scrolled.offsetParent;
						
						if(scrolled.tagName === 'BODY')
							break;
						else
						{
							offsetLeft += scrolled.offsetLeft;
							offsetTop += scrolled.offsetTop;
							
							var style = SSP.DOM.getComputedStyle(scrolled);
							
							if(style.overflow === 'auto' || style.overflow === 'scroll' || style.overflow === 'hidden')
								break;
						}
					}
					while(scrolled.offsetParent);
				}
			}
			
			if(scrolled.tagName === 'BODY')
				scrolled = SSP.DOM.getContainer(scrolled.ownerDocument);
			
			return {item: scrolled, offsetLeft: offsetLeft, offsetTop: offsetTop};
		})
		,
		getScrolledItemAndOffsetLeft: (function(node)
		{
			return SSP.DOM.getScrolledItemAndOffset(node);
		})
		,
		getScrolledItemAndOffsetTop: (function(node)
		{
			return SSP.DOM.getScrolledItemAndOffset(node);
		})
		,
		getSelectedText: function(contentWindow)
		{
			contentWindow = contentWindow || window;
			
			if(contentWindow.getSelection)
				return contentWindow.getSelection().toString();
			else
				return contentWindow.document.selection.createRange().text;
		}
		,
		getSelectedHtml: function(contentWindow)
		{
			contentWindow = contentWindow || window;
			
			if(contentWindow.getSelection)
			{
				var selection = contentWindow.getSelection();
				
				if(selection.getRangeAt)
				{
					if(selection.rangeCount)
						var range = selection.getRangeAt(0);
					else
						return '';
				}
				else
				{
					var range = contentWindow.document.createRange();
					range.setStart(selection.anchorNode, selection.anchorOffset);
					range.setEnd(selection.focusNode, selection.focusOffset);
				}
				
				var cloned = range.cloneContents();
				var tmp = contentWindow.document.createElement('DIV');
				tmp.appendChild(cloned);
				
				return tmp.innerHTML;
			}
			else
				return contentWindow.document.selection.createRange().htmlText;
		}
		,
		getIESelectionRange: function(node, checkFocus)
		{
			var document = SSP.DOM.getDocument(node);
			
			if(typeof checkFocus === 'undefined')
				checkFocus = true;
			
			if(!checkFocus || document.activeElement === node)
				return document.selection.createRange();
		}
		,
		getSelectionStartAndEnd: function(node)
		{
			if(typeof node.selectionStart !== 'undefined'
			&& typeof node.selectionEnd !== 'undefined')
				return {
					start:	node.selectionStart,
					end:	node.selectionEnd
				};
			else
			{
				var range = SSP.DOM.getIESelectionRange(node, false);
				
				if(range)
				{
					var bookmark = range.getBookmark();
					
					var sel1 = node.createTextRange();
					sel1.moveToBookmark(bookmark);
					
					var sel2 = node.createTextRange();
					sel2.collapse(true);
					sel2.setEndPoint('EndToStart', sel1);
					
					return {
						start:	sel2.text.length,
						end:	sel1.text.length + sel2.text.length
					};
				}
				else
					return {
						start:	0,
						end:	0
					};
			}
		}
		,
		getSelectionStart: function(node)
		{
			return SSP.DOM.getSelectionStartAndEnd(node).start;
		}
		,
		getSelectionEnd: function(node)
		{
			return SSP.DOM.getSelectionStartAndEnd(node).end;
		}
		,
		setSelectionRange: function(node, selectionStart, selectionEnd, selectionDirection)
		{
			if(typeof node.setSelectionRange === 'function')
				node.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
			else
			{
				selectionDirection = selectionDirection || 'forward';
				
				var range = node.createTextRange();
				range.collapse(true);
				
				if(selectionDirection === 'forward' || selectionDirection === 'none')
				{
					range.moveStart('character', selectionStart);
					range.moveEnd('character', selectionEnd);
				}
				else
				{
					range.moveStart('character', selectionEnd);
					range.moveEnd('character', selectionStart);
				}
				
				range.select();
			}
		}
		,
		focus: (function(node)
		{
			if(SSP.DOM.isNode(node))
			{
				switch(node.tagName)
				{
					case 'INPUT':
					case 'SELECT':
					case 'TEXTAREA':
					{
						node.focus();
					}
					break;
					default:
					{
						if(typeof node.getAttribute('tabIndex') !== 'string')
							node.setAttribute('tabIndex', -1);
						
						node.focus();
					}
				}
			}
		})
		,
		reset: function(node)
		{
			if(SSP.DOM.isNode(node))
			{
				switch(node.tagName)
				{
					case 'FORM':
					{
						node.reset();
					}
					break;
				}
			}
		}
		,
		generateId: function()
		{
			var prefix = 'generated_id_';
			var n = 0;
			var id;
			
			do
			{
				id = prefix + n++;
			}
			while(SSP.DOM.byId(id));
			
			return id;
		}
		,
		getNodeOffset: function(node)
		{
			var id = node.id;
			var generated = SSP.DOM.generateId();
			node.id = generated;
			var document = SSP.DOM.getDocument(node);
			
			var rx = new RegExp('(.*?)<' + node.tagName + '\b[^>]+\bid="' + generated + '"[^>]*>', 'i');
			var matches = document.documentElement.innerHtml.match(rx);
			
			node.id = id;
			
			return matches[1].length;
		}
		,
		getCharOffset: function(container, node, offset, document)
		{
			var document = document || SSP.DOM.document;
			var range = document.createRange();
			range.selectNodeContents(container);
			range.setEnd(node, offset);
			
			return range.toString().length;
		}
		,
		getSize: function(node, border, padding, margin)
		{
			var size = {};
			
			if(this.isWindow(node) || this.isDocument(node))
			{
				var contentWindow = this.getWindow(node);
				
				if(typeof contentWindow.innerWidth === 'number')
				{
					size.width = contentWindow.innerWidth;
					size.height = contentWindow.innerHeight;
				}
				else
				{
					var contentDocument = this.getDocument(node);
					
					if(contentDocument.documentElement
					&& typeof contentDocument.documentElement.clientWidth === 'number')
					{
						size.width = contentDocument.documentElement.clientWidth;
						size.height = contentDocument.documentElement.clientHeight;
					}
					else
					{
						size.width = contentDocument.body.clientWidth;
						size.height = contentDocument.body.clientHeight;
					}
				}
			}
			else
			{
				
			}
			
			return size;
		}
		,
		getContainer: (function(contentDocument)
		{
			if(!SSP.Browser.Edge
			&& contentDocument.scrollingElement
			&& typeof contentDocument.scrollingElement === 'object')
				return contentDocument.scrollingElement;
			else if((SSP.Browser.Chrome && SSP.Browser.Chrome >= 61)
			|| SSP.Browser.IE
			|| SSP.Browser.Firefox
			|| SSP.Browser.Opera
			|| !SSP.Browser.name)
				return contentDocument.compatMode === 'BackCompat'
					 ? contentDocument.body
					 : contentDocument.documentElement;
			else
				return contentDocument.body;
		})
		,
		findParent: (function(a, b)
		{
			var aParents = this.getChain(a);
			var bParents = this.getChain(b);
			
			if(aParents && bParents)
				for(var i = 1; i < aParents.length; i++)
					if(aParents[i] !== bParents[i])
						return aParents[i - 1];
		})
		,
		findParentByTag: function(node, tag)
		{
			tag = tag.toUpperCase();
			
			do
			{
				if(node.tagName === tag)
					return node;
				else
					node = node.parentNode;
			}
			while(node && node.tagName !== 'HTML');
		}
		,
		getChain: (function(node, reverse)
		{
			var parents = [];
			
			if(node)
			{
				do
				{
					parents.unshift(node);
					node = node.parentNode;
				}
				while(node && node.tagName !== 'HTML');
			}
			
			if(reverse)
				parents.reverse();
			
			return parents;
		})
		,
		walk: (function(nodeList, callback, args, depth)
		{
			try
			{
				if(!nodeList || !nodeList.length)
					return;
			}
			catch(e)
			{
				return;
			}
			
			if(typeof nodeList.length !== 'number')
				nodeList = [nodeList];
			
			var result = [];
			var length = typeof nodeList.length === 'function' ? nodeList.length() : nodeList.length;
			var item = !(nodeList instanceof Array) && typeof nodeList.item === 'function';
			
			if(typeof depth === 'undefined')
				depth = false;
			else if(typeof depth === 'number')
				depth--;
			else
				depth = !!depth;
			
			args = args || [];
			args.unshift(undefined);
			
			for(var i = 0; i < length; i++)
			{
				var node = args[0] = item ? nodeList.item(i) : nodeList[i];
				
				if(node)
				{
					if(window.DEV)
						result[i] = callback.apply(node, args);
					else
						try
						{
							result[i] = callback.apply(node, args);
						}
						catch(e)
						{
							SSP.System.console.log(e);
							result[i] = null;
						}
				}
				else
					result[i] = null;
				
				if(node && (depth === true || typeof depth === 'number' && depth >= 0))
				{
					args.shift();
					
					result[i] = {
						result: result[i],
						child: this.walk(node.children, callback, args, depth)
					};
				}
			}
			
			return result;
		})
		,
		script: function(path)
		{
			var scripts = SSP.DOM.byTag('SCRIPT');
			var length = scripts.length;
			for(var i = 0; i < length; i++)
				if(scripts[i].getAttribute('src') === path)
					return scripts[i];
			
			var script = SSP.DOM.create('SCRIPT');
			script.type = 'text/javascript';
			script.src = path;
			SSP.DOM.byTag('HEAD')[0].appendChild(script);
			return script;
		}
		,
		setTogglable: function(rootId)
		{
			var $ = SSP.DOM;
			/**
			 *  @var {HTMLElement} node
			 */
			var root = $.byId(rootId);
			var attribute = 'data-toggle-class';

			var handlerStorage = {};

			function getHandler(toggleClass) {
				if(!handlerStorage.hasOwnProperty(toggleClass)) {
					handlerStorage[toggleClass] = function (event) {
						if ( event.preventDefault ) {
							event.preventDefault();
						} else {
							event.returnValue = false;
						}
						if ( event.stopPropagation ) {
							event.stopPropagation();
						}
						event.cancelBubble = true;
						$.toggleClass(root, toggleClass);
					}
				}
				return handlerStorage[toggleClass];
			}
			
			if(root) {
				var list = $.bySelector('#'+rootId+' ['+attribute+']');
				for (var i = 0; i < list.length; i++) {
					var node = list[i];
					var toggleClass = node.getAttribute(attribute);
					if(toggleClass) {
						$.listen(node, 'click', getHandler(toggleClass));
					}
				}
			}
		}
		,
		listenAutoclick: function(root)
		{
			if(SSP.Browser.hasTouchScreen)
				return;
			
			if(!root)
				root = SSP.DOM.document.body;
			
			var autoclickElementId = null;
			var autoclickElement = null;
			var autoclickDelay = 0;
			var autoclick_tid = null;
			
			function clearAutoclickInterval()
			{
				if(autoclick_tid)
				{
					clearTimeout(autoclick_tid);
					autoclick_tid = null;
				}
			}
			
			SSP.DOM.listen(root, 'mouseover', function(event)
			{
				var element, autoclick, delay;
				
				delay = 0;
				for(element = event.target; element; element = element.parentElement)
				{
					delay = SSP.Number.parseInt(SSP.DOM.getData(element, 'autoclick-delay'));
					if(delay)
						break;
				}
				
				if(!element)
				{
					autoclickElementId = null;
					autoclickElement = null;
				}
				else if(element.id)
				{
					autoclickElementId = element.id;
					autoclickElement = null;
				}
				else
				{
					autoclickElementId = null;
					autoclickElement = element;
				}
				
				autoclickDelay = delay;
				
				if(element && !autoclick_tid)
					autoclick_tid = setTimeout(function()
					{
						SSP.DOM.trigger(autoclickElement || SSP.DOM.byId(autoclickElementId), 'click');
					}, autoclickDelay);
			});
			
			SSP.DOM.listen(root, 'mousemove', function(event)
			{
				clearAutoclickInterval();
				
				if(autoclickDelay
				&& (autoclickElement || autoclickElementId))
				{
					autoclick_tid = setTimeout(function()
					{
						SSP.DOM.trigger(autoclickElement || SSP.DOM.byId(autoclickElementId), 'click');
					}, autoclickDelay);
				}
			});
			
			SSP.DOM.listen(root, 'mouseout', function(event)
			{
				clearAutoclickInterval();
			});
		}
		,
		Select: (function()
		{
			var isListening = false;
			var controls = {};
			var withFocus;
			
			function onevent(event)
			{
				var id;
				var idWithFocus;
				
				if(withFocus)
				{
					idWithFocus = withFocus.original.id;
					withFocus.onevent(event);
					
					if(event.ctrlKey
					|| event.shiftKey
					|| event.type !== 'mousedown')
						return;
				}
					
				if(event.type === 'mousedown' && event.isLeft)
				{
					for(var target = event.target; target; target = target.parentElement)
					{
						id = target.getAttribute('original_id');
						if(id)
							break;
					}
					
					if(id && (id in controls) && id !== idWithFocus)
					{
						if(controls[id].open(event))
						{
							withFocus = controls[id];
							SSP.Bus.cancel(event);
						}
					}
				}
			}
			
			function startListen()
			{
				if(isListening)
					return;
					
				SSP.DOM.listen(SSP.DOM.document.body, 'mousedown', onevent);
				SSP.DOM.listen(SSP.DOM.document.body, 'keydown', onevent);
				
				isListening = true;
			}
			
			function register(original, control)
			{
				controls[original.id] = control;
				startListen();
			}
			
			function unregister(original)
			{
				if(original.id in controls)
					delete controls[original.id];
			}
			
			return {
			
				create: (function(_id, mode)
				{
					if(SSP.Browser.IE)
						return;
					
					if(_id in controls)
					{
						controls[_id].destroy();
						delete controls[_id];
					}
					
					var id, select, isMulti, isSelection, control;
					var selectValueContainer, selectValue, selectListContainer, selectList, selectionAdd, selectionListContainer, selectionList;
					var dropdownIndex;
					var originalAdd, originalRemove;
					
					function createOption(option, index)
					{
						var selectOption;
						var cssClass = !isSelection && option.selected ? 'selected' : '';
						
						if(option.className)
							cssClass += ' ' + option.className;
						
						selectOption = SSP.DOM.create('li', {
							'class': cssClass,
							'index': index
						});
						
						if(isSelection || option.children.length)
							selectOption.innerHTML = (isSelection ? '<span class="selection-delete"></span>' : '') + option.innerHTML;
						else if(option.firstChild)
						{
							var textNode = document.createTextNode(SSP.Browser.IE ? option.innerText : option.firstChild.data);
							selectOption.appendChild(textNode);
						}
						
						selectOption.title = option.title;
						
						return selectOption;
					}
					
					function copyOptions(selectList, selected)
					{
						var all, selectOption;
						
						all = typeof selected !== 'boolean';
						
						for(var i = 0; i < select.length; i++)
						{
							if(!all && selected != select.item(i).selected)
								continue;
							
							selectOption = createOption(select.item(i), i);
							selectList.insertBefore(selectOption, null);
						}
					}
					
					function createListContainer(list_class, original_id, selected)
					{
						var selectListContainer;
						
						selectListContainer = SSP.DOM.create('div', {
							'id': id + '_'+list_class+'_list_container',
							'class': list_class+'-list-container'
						});
						
						if(original_id)
							selectListContainer.setAttribute('original_id', id);
						
						selectList = SSP.DOM.create('ul', {
							'id': id + '_'+list_class+'_list',
							'class': list_class+'-list'
						});
						
						selectListContainer.insertBefore(selectList, null);
						
						copyOptions(selectList, selected);
						
						return selectListContainer;
					}
					
					function add(option, before)
					{
						if(typeof before !== 'number')
						{
							for(var idx = 0; idx < select.length; idx++)
							{
								if(select.item(idx) === before)
									break;
							}
							
							before = idx;
						}
						
						selectOption = createOption(option, before);
						selectList.insertBefore(selectOption, selectList.children.item(before));
						update();
						
						originalAdd.apply(select, arguments);
					}
					
					function remove(index)
					{
						selectList.removeChild(selectList.children.item(index));
						originalRemove.apply(select, arguments);
						update();
					}
						
					function _create(_id, mode)
					{
						var option, selectOption;
						
						select = typeof _id === 'string' ? SSP.DOM.byId(_id) : _id;
						if(!select)
							return;
						
						id = select.id;
						isMulti = !!select.multiple;
						isSelection = mode === 'selection';
						if(isSelection)
						{
							if(!isMulti)
								return null;
							else
								isMulti = false;
						}
						
						originalAdd = select.add;
						select.add = add;
						
						originalRemove = select.remove;
						select.remove = remove;
						
						if(isSelection)
						{
							selectValueContainer = null;
							selectValue = null;
							
							selectionListContainer = createListContainer('selection', id, true);
							selectionList = selectList;
							
							selectionListContainer.style.width = select.offsetWidth-3 + 'px';
							
							select.parentNode.insertBefore(selectionListContainer, select.nextSibling);
							
							selectionAdd = SSP.DOM.create('div', {
								'id': id + '_select_add',
								'original_id': id,
								'class': 'selection-add'
							});
							selectionAdd.innerHTML = 'Добавить';
							
							selectionListContainer.parentNode.insertBefore(selectionAdd, selectionListContainer.nextSibling);
							
							selectListContainer = createListContainer('dropdown', false, false);
							
							document.body.insertBefore(selectListContainer, null);
							
							if(selectList.children.length === 0)
								selectionAdd.setAttribute('disabled', '');
							else
								selectionAdd.removeAttribute('disabled');
						}
						else if(isMulti)
						{
							selectValueContainer = null;
							selectValue = null;
							
							selectListContainer = createListContainer('multi', id);
							
							selectListContainer.style.width = select.offsetWidth-3 + 'px';
							selectListContainer.style.height = select.offsetHeight-2 + 'px';
							
							select.parentNode.insertBefore(selectListContainer, select.nextSibling);
						}
						else
						{
							selectValueContainer = SSP.DOM.create('div', {
								'id': id + '_select_value',
								'original_id' : id,
								'class': 'select-value'
							});
							
							selectValue = SSP.DOM.create('span', {
								'class': 'select-value-text'
							});
							
							selectValue.innerHTML = '&nbsp;';
							
							selectValueContainer.insertBefore(selectValue, null);
							select.parentNode.insertBefore(selectValueContainer, select.nextSibling);
							
							selectListContainer = createListContainer('dropdown');
							document.body.insertBefore(selectListContainer, null);
						}
						
						select.style.display = 'none';
						
						update();
						
						return {
							destroy: destroy,
							reload: reload,
							open: open,
							update: update,
							onevent: onevent
						}
					}
					
					function destroy()
					{
						unregister(select);
						selectListContainer.parentNode.removeChild(selectListContainer);
						if(selectValueContainer && selectValueContainer.parentNode)
							selectValueContainer.parentNode.removeChild(selectValueContainer);
						select.style.display = '';
					}
					
					function reload()
					{
						if(isSelection)
						{
							selectionList.innerHTML = '';
							copyOptions(selectionList, true);
							
							selectList.innerHTML = '';
							copyOptions(selectList, false);
						}
						else
						{
							selectList.innerHTML = '';
							copyOptions(selectList);
						}
						
						update();
					}
					
					function update()
					{
						if(isSelection)
						{
							if(selectList.children.length === 0)
								selectionAdd.setAttribute('disabled', '');
							else
								selectionAdd.removeAttribute('disabled');
						}
						else if(isMulti)
						{
							var i, indices = [];
							for(i = 0; i < select.length; i++)
							{
								if(select.item(i).selected)
									indices.push(i);
							}
							
							setIndex(indices, false, true);
						}
						else
							setIndex(select.selectedIndex, false, true);
					}
					
					function updateScroll()
					{
						var current = isSelection ? dropdownIndex : select.selectedIndex;
						var option = selectList.children.item(current);
						
						if(!option)
							selectListContainer.scrollTop = 0;
						else
							SSP.DOM.scroll(option, selectListContainer, true);
					}
					
					function removeChildrenClass(element, class_name)
					{
						var elements, ar_elements;
						
						ar_elements = [];
						elements = SSP.DOM.byClass('selected', element);
						for(var i = 0; i < elements.length; i++)
							ar_elements.push(elements.item(i));
						for(var i = 0; i < ar_elements.length; i++)
							SSP.DOM.removeClass(ar_elements[i], class_name);
					}
					
					function setSelectionIndex(index)
					{
						if(index < 0 || index >= selectList.children.length)
							return;
						
						dropdownIndex = index;
						
						removeChildrenClass(selectList, 'selected');
						SSP.DOM.addClass(selectList.children.item(dropdownIndex), 'selected');
						
						updateScroll();
					}
					
					function setIndex(index, fire, force)
					{
						var i, indices, option;
						
						if(isSelection)
							return setSelectionIndex(index);
						
						if(typeof index === 'number')
						{
							if(index < 0 || index >= select.length)
								return;
							
							if(!force && !isMulti && index === select.selectedIndex)
								return;
							
							if(selectValue)
							{
								if(select.selectedIndex >= 0 && select.item(select.selectedIndex).className)
									SSP.DOM.removeClass(selectValue, select.item(select.selectedIndex).className);
								
								selectValue.innerHTML = select.item(index).innerHTML || '&nbsp;';
								
								if(select.item(index).className)
									SSP.DOM.addClass(selectValue, select.item(index).className);
							}
						}
						
						removeChildrenClass(selectList, 'selected');
						
						if(isMulti || typeof index !== 'number' || select.selectedIndex !== index)
							select.selectedIndex = -1;
						
						indices = [].concat(index);
						for(i = 0; i < indices.length; i++)
						{
							index = indices[i];
							
							option = selectList.children.item(index);
							SSP.DOM.addClass(option, 'selected');
							
							select.item(index).selected = true;
						}
						
						if(selectListContainer.style.display === 'block'
						&& selectListContainer.offsetHeight)
							updateScroll();
						
						if(fire)
							SSP.DOM.trigger(select, 'change');
					}
					
					function toggleIndex(index)
					{
						if(!isMulti)
							return;
						
						if(index < 0 || index >= select.length)
							return;
						
						if(select.item(index).selected)
						{
							select.item(index).selected = false;
							SSP.DOM.removeClass(selectList.children.item(index), 'selected');
						}
						else
						{
							select.item(index).selected = true;
							SSP.DOM.addClass(selectList.children.item(index), 'selected');
						}
					}
					
					function transferOption(fromList, toList, index)
					{
						var selectIndex, selectOption;
						
						selectIndex = SSP.Number.parseInt(fromList.children.item(index).getAttribute('index'));
						
						selectOption = createOption(select.item(selectIndex), selectIndex);
						
						for(var i = 0; i < toList.children.length; i++)
						{
							if(toList.children.item(i).getAttribute('index') > selectIndex)
								break;
						}
						
						toList.insertBefore(selectOption, toList.children.item(i));
						
						fromList.removeChild(fromList.children.item(index));
						
						return selectIndex;
					}
					
					function addSelection(index)
					{
						var selectIndex;
						
						selectIndex = transferOption(selectList, selectionList, index);
						select.item(selectIndex).selected = true;
						
						if(selectList.children.length === 0)
							selectionAdd.setAttribute('disabled', '');
						
						SSP.DOM.trigger(select, 'change');
					}
					
					function removeSelection(index)
					{
						var selectIndex;
						
						selectIndex = transferOption(selectionList, selectList, index);
						select.item(selectIndex).selected = false;
						
						selectionAdd.removeAttribute('disabled');
						
						SSP.DOM.trigger(select, 'change');
					}
					
					function open(event)
					{
						if(isSelection)
						{
							if(SSP.DOM.hasClass(event.target, 'selection-delete'))
							{
								var selectionOption = event.target.parentElement;
								for(var i = 0; i < selectionList.children.length; i++)
								{
									if(selectionList.children.item(i) === selectionOption)
									{
										removeSelection(i);
										break;
									}
								}
								
								SSP.Bus.cancel(event);
								return false;
							}
							else if(SSP.DOM.hasClass(event.target, 'selection-add'))
							{
								var select_cr = selectionAdd.getBoundingClientRect();
								var container_cr = document.documentElement.getBoundingClientRect();
								var top, left, height, shift;
								
								if(selectionAdd.getAttribute('disabled'))
									return;
								
								dropdownIndex = -1;
								
								left = select_cr.left - container_cr.left;
								top = select_cr.bottom - container_cr.top;
								
								selectListContainer.style.display = 'block';
								selectListContainer.style.width = selectionListContainer.offsetWidth-2 + 'px';
								
								height = selectListContainer.offsetHeight;
								
								shift = select_cr.bottom + height - document.documentElement.clientHeight;
								if(shift > 0)
									top -= shift;
								
								selectListContainer.style.left = left + 'px';
								selectListContainer.style.top = top + 'px';
							}
							else
								return false;
						}
						else if(isMulti)
						{
							selectListContainer.focus();
							SSP.DOM.addClass(selectListContainer, 'opened');
							
							if(event)
								onevent(event);
						}
						else
						{
							var select_cr = selectValueContainer.getBoundingClientRect();
							var container_cr = document.documentElement.getBoundingClientRect();
							var top, left, height, shift;
							
							left = select_cr.left - container_cr.left;
							top = select_cr.bottom - container_cr.top;
							
							selectListContainer.style.display = 'block';
							selectListContainer.style.width = selectValueContainer.offsetWidth-2 + 'px';
							selectListContainer.style.height = selectList.offsetHeight+2 + 'px';
							
							height = selectListContainer.offsetHeight;
							
							shift = select_cr.bottom + height - document.documentElement.clientHeight;
							if(shift > 0)
								top -= shift;
							
							selectListContainer.style.left = left + 'px';
							selectListContainer.style.top = top + 'px';
							
							updateScroll();
						
							SSP.DOM.addClass(selectValueContainer, 'opened');
						}
						
						return true;
					}
					
					function close()
					{
						if(isSelection)
						{
							selectListContainer.style.display = '';
						}
						else if(isMulti)
						{
							selectListContainer.blur();
							SSP.DOM.removeClass(selectListContainer, 'opened');
						}
						else
						{
							selectListContainer.style.display = '';
							SSP.DOM.removeClass(selectValueContainer, 'opened');
						}
						
						withFocus = null;
					}
					
					function onevent(event)
					{
						var value, option, move, index;
						var i;
						
						switch(event.type)
						{
							case 'mousedown':
							{
								if(!event.isLeft)
									return;
								
								if(event.target === selectListContainer)
									return;
								
								option = null;
								for(index = 0; index < selectList.children.length; index++)
								{
									if(event.target === selectList.children.item(index))
									{
										option = selectList.children.item(index);
										break;
									}
								}
								
								if(option || event.target === selectValueContainer)
								{
									if(option)
									{
										if(isSelection)
											addSelection(index);
										else if(isMulti && event.ctrlKey)
											toggleIndex(index, true);
										else if(isMulti && event.shiftKey)
										{
											var i, first, last, indices = [];
											
											if(index >= select.selectedIndex)
											{
												first = select.selectedIndex;
												last = index;
											}
											else
											{
												first = index;
												last = select.selectedIndex;
											}
											
											for(i = first; i <= last; i++)
												indices.push(i);
											
											setIndex(indices, true);
										}
										else
											setIndex(index, true);
									}
									
									SSP.Bus.cancel(event);
								}
								
								if(!option || !isMulti)
									close();
								
								break;
							}
							case 'keydown':
							{
								if(event.isEscape)
									close();
								else if(event.isEnter)
								{
									if(isSelection)
										addSelection(dropdownIndex);
									
									close();
								}
								else if(event.isCursor)
								{
									if(event.isHome)
										index = 0;
									else if(event.isEnd)
										index = select.length-1;
									else
									{
										if(event.isUp || event.isLeft)
											move = -1;
										else if(event.isDown || event.isRight)
											move = 1;
										else if(event.isPageUp || event.isPageDown)
										{
											move = Math.floor(selectList.offsetHeight / selectList.firstChild.offsetHeight) - 1;
											if(move < 1)
												move = 1;
											if(event.isPageUp)
												move = -move;
										}
										
										index = (isSelection ? dropdownIndex : select.selectedIndex) + move;
									}
									
									if(index > select.length-1)
										index = select.length-1;
									if(index < 0)
										index = 0;
									
									setIndex(index, true);
								}
								else
									return;
								
								SSP.Bus.cancel(event);
								
								break;
							}
						}
					}
					
					control = _create(_id, mode);
					control.original = select;
					register(select, control);
					
					return control;
				})
				,
				isRegistered: (function(select)
				{
					var id = typeof select === 'string' ? select : select.id;
					
					return (id in controls);
				})
				,
				destroy: (function(select)
				{
					var id = typeof select === 'string' ? select : select.id;
					
					if(id in controls)
						controls[id].destroy();
				})
				,
				reload: (function(select)
				{
					var id = typeof select === 'string' ? select : select.id;
					
					if(id in controls)
						controls[id].reload();
				})
				,
				update: (function(select)
				{
					var id = typeof select === 'string' ? select : select.id;
					
					if(id in controls)
						controls[id].update();
				})
				,
				setValue: (function(select, value)
				{
					var element = typeof select === 'string' ? SSP.DOM.byId(select) : select;
					element.value = value;
					this.update(select);
				})
				,
				setIndex: (function(select, index)
				{
					var element = typeof select === 'string' ? SSP.DOM.byId(select) : select;
					element.selectedIndex = index;
					this.update(select);
				})
			};
		})()
	};
	
	SSP.System =
	{
		console: window.console || {log: function(message){/*alert(message);*/}}
	};
	
	SSP.Array =
	{
		search: function(item, array)
		{
			if(array instanceof Array)
			{
				if(Array.prototype.indexOf)
				{
					var result = array.indexOf(item);
					return result >= 0 ? result : false;
				}
				else
					for(var i = 0; i < array.length; i++)
						if(array[i] === item)
							return i;
			}
			else if(typeof array === 'object')
				for(var i in array)
					if(array[i] === item)
						return i;
			
			return false;
		}
		,
		keys: function(array)
		{
			var keys = [];
			
			if(array instanceof Array)
			{
				for(var i = 0; i < array.length; i++)
					if(typeof array[i] !== 'undefined')
						keys.push(i);
			}
			else if(typeof array === 'object')
				for(var i in array)
					keys.push(i);
			else
				keys = null;
			
			return keys;
		}
		,
		intersect: function()
		{
			if(!arguments.length)
				return null;
			
			var first = arguments[0];
			
			if(arguments.length < 2)
				return first;
			
			var intersection = first;
			var keys = this.keys(first);
			var key;
			
			for(var i = 0; i < keys.length; i++)
				for(var j = 1; j < arguments.length; j++)
				{
					key = keys[i];
					if(arguments[j][key] !== first[key])
					{
						delete intersection[key];
						break;
					}
				}
			
			return intersection;
		}
		,
		equals: function()
		{
			if(arguments.length !== 2)
				return false;
			
			var first = arguments[0];
			var second = arguments[1];
			
			if(!(first instanceof Array)
			|| !(second instanceof Array)
			|| first.length !== second.length)
				return false;
			
			for(var i = 0; i < first.length; i++)
				if(first[i] instanceof Array)
				{
					if(!SSP.Array.equals(first[i], second[i]))
						return false;
				}
				else if(first[i] !== second[i])
					return false;
			
			return true;
		}
		,
		merge: function()
		{
			if(!arguments.length)
				return {};
			
			var first = arguments[0];
			
			if(arguments.length < 2)
				return first;
			
			if(first instanceof Array)
			{
				var arr = first;
				var obj = {};
			}
			else
			{
				var arr = [];
				var obj = first;
			}
			
			for(var i = 1; i < arguments.length; i++)
			{
				if(arguments[i] instanceof Array)
					for(var j = 0; j < arguments[i].length; j++)
						arr.push(arguments[i][j]);
				else
					for(var j in arguments[i])
						obj[j] = arguments[i][j];
			}
			
			for(var i = 0; i < arr.length; i++)
				obj[i] = arr[i];
			
			return obj;
		}
		,
		unique: function(array)
		{
			var unique = [];
			
			for(var i = 0; i < array.length; i++)
				if(typeof SSP.Array.search(array[i], unique) !== 'number')
					unique.push(array[i]);
			
			return unique;
		}
	};
	
	SSP.Form =
	{
		values: function(form, includeDisabled)
		{
			var inputs = form.elements;
			var length = inputs.length;
			var name;
			var values = {};
			var sub;
			var value;
			var key;
			var nameRx = new RegExp('^(.+)\\[([^\\]]*)\\]$');
			var matches;
			
			for(var i = 0; i < length; i++)
			{
				var input = inputs[i];
				
				if(!input.name
				|| !includeDisabled && input.disabled)
					continue;
				else
				{
					if(input.tagName === 'INPUT')
					{
						switch(input.type)
						{
							case 'reset':
							{
								continue;
							}
							case 'checkbox':
							case 'radio':
							{
								if(!input.checked)
									continue;
							}
							default:
							{
								value = input.value;
							}
						}
					}
					else if(input.tagName === 'TEXTAREA')
					{
						if(SSP.DOM.hasClass(input, 'tiny_mce'))
							value = tinyMCE.get(input.name).getContent();
						else
							value = input.value;
					}
					else if(input.tagName === 'SELECT')
					{
						if(input.multiple)
						{
							var options = input.selectedOptions || input.options;
							
							if(!options.length)
								continue;
							
							value = [];
							
							for(var j = 0; j < options.length; j++)
								value.push(options[j].value);
						}
						else
							value = input.value;
					}
					
					name = input.name;
					
					if(matches = nameRx.exec(name))
					{
						key = matches[2];
						
						sub = SSP.Object.byPath(
							matches[1],
							values,
							key === '' || SSP.String.isNumeric(key)
							? SSP.Object.FILL_ARRAY
							: SSP.Object.FILL_OBJECT
						);
						
						if(input.multiple)
						{
							for(var j = 0; j < value.length; j++)
								sub.push(value[j]);
							
							continue;
						}
						else if(key === '')
							key = sub.length;
					}
					else
					{
						sub = values;
						key = name;
					}
				}
				
				sub[key] = value;
			}
			
			return values;
		}
		,
		value: function(input, path)
		{
			if(path)
				input = SSP.DOM.byPath(path, input, XPathResult.FIRST_ORDERED_NODE_TYPE);
			
			if(input)
			{
				if(typeof input === 'string')
				{
					var inputs = SSP.DOM.byName(input);
					
					if(inputs[0] && !inputs[0].disabled)
						input = inputs[0];
					else
						return;
				}
					
				if(typeof input === 'object')
				{
					if(input.disabled)
						return;
					switch(input.tagName)
					{
						case 'INPUT':
						{
							switch(input.type)
							{
								case 'radio':
								{
									var inputs = SSP.DOM.byName(input.name);
									
									for(var i = 0; i < inputs.length; i++)
										if(inputs[i].checked)
											return inputs[i].value;
									
									return;
								}
								break;
								case 'checkbox':
								{
									var value = [];
									var inputs = SSP.DOM.byName(input.name);
									
									for(var i = 0; i < inputs.length; i++)
										if(inputs[i].checked)
											value.push(inputs[i].value);
									
									return value;
								}
								break;
								default:
								{
									if(input.name.match(/\[\]$/))
									{
										var value = [];
										var inputs = SSP.DOM.byName(input.name);
										
										for(var i = 0; i < inputs.length; i++)
											if(!inputs[i].disabled)
												value.push(inputs[i].value);
										
										return value;
									}
								}
							}
						}
						break;
						case 'SELECT':
						{
							if(input.multiple)
							{
								var options = input.selectedOptions || input.options;
								var value = [];
								
								for(var j = 0; j < options.length; j++)
									value.push(options[j].value);
								
								return value;
							}
						}
						break;
					}
					
					return input.value;
				}
			}
		}
		,
		clear: function(input)
		{
			if(input)
			{
				if(typeof input === 'object')
				{
					switch(input.tagName)
					{
						case 'INPUT':
						{
							switch(input.type)
							{
								case 'radio':
								case 'checkbox':
								{
									var inputs = SSP.DOM.byName(input.name);
									
									for(var i = 0; i < inputs.length; i++)
										inputs[i].checked = false;
									
									return;
								}
								break;
							}
						}
						break;
						case 'SELECT':
						{
							if(input.multiple)
							{
								var options = input.selectedOptions || input.options;
								
								for(var i = 0; i < options.length; i++)
									options[i].selected = false;
							}
							else
								input.selectedIndex = null;
						}
						break;
					}
					
					input.value = '';
				}
			}
		}
		,
		handleEnumClick: function(event)
		{
			event = event || window.event;
			var target = event.target || event.srcElement;
			
			if(target.tagName === 'INPUT')
			{
				var inputs = this.getElementsByTagName('INPUT');
				var optgroupKey = SSP.DOM.getData(target, 'optgroup');
				
				if(optgroupKey)
				{
					var optgroupHeader;
					var optgroupValues = [];
					
					for(var i = 0; i < inputs.length; i++)
						if(SSP.DOM.getData(inputs[i], 'optgroup') === optgroupKey)
						{
							if(inputs[i].name)
								optgroupValues.push(inputs[i]);
							else
								optgroupHeader = inputs[i];
						}
					
					if(target.name)
					{
						if(!target.checked)
							optgroupHeader.checked = false;
						else
						{
							var optgroupChecked = true;
							
							for(var i = 0; i < optgroupValues.length; i++)
								if(!optgroupValues[i].checked)
								{
									optgroupChecked = false;
									break;
								}
							
							if(optgroupChecked)
								optgroupHeader.checked = true;
						}
					}
					else
					{
						for(var i = 0; i < optgroupValues.length; i++)
							optgroupValues[i].checked = target.checked;
					}
				}
				else
				{
					var checkboxes = [];
					var radios = [];
					var extras = {};
					var extraKey;
					
					if(target.type === 'checkbox' || target.type === 'radio')
						for(var i = 0; i < inputs.length; i++)
						{
							if(inputs[i].type === 'checkbox')
								checkboxes.push(inputs[i]);
							else if(inputs[i].type === 'radio')
								radios.push(inputs[i]);
							else if(SSP.DOM.hasClass(inputs[i], 'extra'))
								extras[inputs[i].name] = inputs[i];
						}
					
					switch(target.type)
					{
						case 'checkbox':
						{
							if(radios.length && checkboxes.length > 1)
								for(var i = 0; i < radios.length; i++)
								{
									radios[i].checked = false;
									
									extraKey = radios[i].id.replace('][', '_');
									
									if(extras[extraKey])
										extras[extraKey].value = '';
								}
							
							extraKey = target.id.replace('][', '_');
							
							if(extras[extraKey])
							{
								if(target.checked)
									extras[extraKey].focus();
								else
									extras[extraKey].value = '';
							}
						}
						break;
						case 'radio':
						{
							if(checkboxes.length > 1)
								for(var i = 0; i < checkboxes.length; i++)
									checkboxes[i].checked = false;
							
							var targetKey = target.id.replace('][', '_');
							
							for(extraKey in extras)
								if(extraKey !== targetKey)
									extras[extraKey].value = '';
								else
									extras[extraKey].focus();
						}
						break;
						default:
						{
							if(SSP.DOM.hasClass(target, 'extra'))
							{
								for(var i = 0; i < inputs.length; i++)
								{
									if(inputs[i].id.replace('][', '_') === target.name)
									{
										if(inputs[i].type === 'radio' || !inputs[i].checked)
										{
											SSP.DOM.trigger(inputs[i], 'click');
											inputs[i].checked = true;
										}
										
										break;
									}
								}
							}
						}
					}
				}
			}
		}
		,
		handleOrderClick: function(event)
		{
			event = event || window.event;
			var target = event.target || event.srcElement;
			
			if(target.tagName === 'BUTTON')
			{
				var id = target.value;
				var input = SSP.DOM.byId(id);
				var value = SSP.Number.parseInt(input.value);
				var move = 0;
				var length = target.parentNode.parentNode.getElementsByTagName('LABEL').length;
				var swapped;
				
				if(SSP.DOM.hasClass(target, 'plus'))
					move--;
				else if(SSP.DOM.hasClass(target, 'minus'))
					move++;
				
				if(move > 0 && value < length + 1)
					swapped = SSP.DOM.moveSibling(target.parentNode, SSP.DOM.AFTER);
				else if(move < 0 && value > 1)
					swapped = SSP.DOM.moveSibling(target.parentNode, SSP.DOM.BEFORE);
				
				if(swapped)
				{
					input.value = value + move;
					swapped.getElementsByTagName('INPUT')[0].value = value;
				}
				
				SSP.Bus.cancel(event);
				
				return false;
			}
		}
		,
		handleCloneClick: function(event)
		{
			var cloned = this.previousElementSibling || this.previousSibling;
			var depth = SSP.DOM.getData(this, 'depth');
			var clone = SSP.DOM.clone(cloned, depth);
			var name = clone.name || clone.id;
			
			SSP.DOM.toggleClass(clone, 'even', 'odd');
			
			var rx = /(^|\s)child(\d+)(\s|$)/;
			var matches = rx.exec(clone.className);
			
			if(matches)
				clone.className = clone.className.replace(rx, matches[1] + 'child' + (SSP.Number.parseInt(matches[2]) + 1) + matches[3]);
			
			var textareas = clone.getElementsByTagName('TEXTAREA');
			
			SSP.DOM.walk(
				textareas,
				function(textarea)
				{
					if(SSP.DOM.hasClass(textarea, 'tiny_mce')
					&& SSP.DOM.hasClass(textarea.nextElementSibling || textarea.nextSibling, 'mceEditor'))
					{
						textarea.parentNode.removeChild(textarea.nextElementSibling || textarea.nextSibling);
						textarea.removeAttribute('aria-hidden');
						textarea.style.display = '';
					}
				}
			);
			
			SSP.DOM.walk(
				clone.getElementsByTagName('*'),
				function(node)
				{
					if(SSP.DOM.hasClass(node, 'errors'))
						node.parentNode.removeChild(node);
					
					if(node.getAttribute('data-pattern'))
						SSP.DOM.listen(node, 'change', SSP.Form.patternListener);
				}
			);
			
			var showif = {};
			
			if(SSP.Form.dynamicFields)
			{
				if(typeof depth !== 'number')
					depth = SSP.Number.parseInt(depth);
				
				depth *= 2;
				
				for(var id in SSP.Form.dynamicFields)
				{
					if(id.indexOf(cloned.id) === 0)
					{
						var newId = SSP.DOM.replaceId(id, SSP.DOM.incrementId(id, depth), depth);
						showif[newId] = SSP.Form.cloneDynamicShowIf(id, newId);
					}
				}
			}
			
			this.parentNode.insertBefore(clone, this);
			
			for(var id in showif)
				SSP.Form.initDynamic(id, showif[id]);
			
			SSP.DOM.walk(
				textareas,
				function(textarea)
				{
					if(SSP.DOM.hasClass(textarea, 'tiny_mce'))
						mceEnable(textarea, true, textarea.disabled);
				}
			);
			
			if(SSP.Form.formula)
			{
				SSP.DOM.walk(
					clone.getElementsByTagName('*'),
					function(node)
					{
						if(node.listeningFormular)
							delete node.listeningFormular;
						
						if(node.getAttribute('data-pattern') && SSP.DOM.hasClass(node, 'error'))
							SSP.DOM.removeClass(node, 'error');
					}
				);
				
				var path = SSP.Form.nameToPath[name];
				
				if(path)
					SSP.Form.cloneFormular(clone, name);
				
				SSP.DOM.walk(
					clone.getElementsByTagName('*'),
					function(node)
					{
						var path = node.getAttribute('data-path');
						
						if(path)
						{
							path = path.split('::');
							
							if(path.length)
							{
								var p = path[0].split('/');
								
								for(var i = 0; i < p.length; i++)
									if(p[i].match(/^\d+$/))
										p[i] = (parseInt(p[i], 10) + 1).toString();
								
								node.setAttribute('data-path', p.join('/') + '::' + path[1]);
							}
						}
						
						if(typeof node.formulaResult !== 'undefined')
							node.formulaResult = void 0;
					}
				);
				
				SSP.DOM.walk(
					clone.getElementsByTagName('*'),
					function(node)
					{
						if(SSP.DOM.hasClass(node, 'form'))
							SSP.Form.cloneFormular(node);
					}
				);
			}
			
			SSP.DOM.triggerReflow(this.parentNode);
		}
		,
		cloneFormular: function(node, oldName)
		{
			var oldName = oldName || node.oldName || node.oldId;
			var newName = node.name || node.id;
			
			var oldPath = SSP.Form.nameToPath[oldName];
			var newPath = oldPath.split('/');
			
			for(var i = 0; i < newPath.length; i++)
				if(newPath[i].match(/^\d+$/))
					newPath[i] = (parseInt(newPath[i], 10) + 1).toString();
			
			var path = newPath.join('/');
			
			if(path)
			{
				SSP.Form.nameToPath[newName] = path;
				
				var formula = {};
				
				for(var field in SSP.Form.formula[oldPath])
				{
					formula[field] = {
						'function': SSP.Form.formula[oldPath][field]['function'],
						'depends': {}
					};
					
					for(var dep in SSP.Form.formula[oldPath][field].depends)
					{
						var absPath = SSP.Form.formula[oldPath][field].depends[dep].split('/');
						
						for(var i = 0; i < absPath.length; i++)
							if(absPath[i].match(/^\d+$/))
								absPath[i] = (parseInt(absPath[i], 10) + 1).toString();
						
						formula[field].depends[dep] = absPath.join('/');
					}
				}
				
				SSP.Form.formula[path] = formula;
				
				SSP.Form.initFormular(newName, path, formula);
				SSP.Form.initFormularEnd(path);
			}
		}
		,
		initAutocomplete: (function(id, url)
		{
			var input = SSP.DOM.byId(id);
			
			input.setAttribute('autocomplete', 'off');
			input.setAttribute('data-autocomplete-url', url);
			
			input.autocompleteCache = {};
			input.autocompleteDisablePrefix = {};
			
			SSP.DOM.listen(input, 'keydown', SSP.Form.handleAutocompleteKeyDown);
			SSP.DOM.listen(input, 'keyup', SSP.Form.handleAutocompleteKeyUp);
			
			SSP.DOM.listen(input, 'focus', SSP.Form.handleAutocompleteFocus);
			SSP.DOM.listen(input, 'blur', SSP.Form.handleAutocompleteBlur, false, true);
			
			SSP.DOM.listen(input, 'mousedown', SSP.Form.handleAutocompleteMouseDown);
			SSP.DOM.listen(input, 'mouseup', SSP.Form.handleAutocompleteMouseUp);
			
			var suggest = input.getAttribute('data-autocomplete-suggest');
			
			if(!suggest || !SSP.DOM.byId(suggest))
			{
				suggest = id + '_suggest';
				input.setAttribute('data-autocomplete-suggest', suggest);
				suggest = SSP.DOM.create('UL', {id: suggest, className: 'clean'});
				suggest.style.display = 'none';
				
				var wrapper = SSP.DOM.create('DIV', {className: 'autocomplete-suggests', tabIndex: -1});
				wrapper.style.display = 'none';
				wrapper.appendChild(suggest);
				
				input.parentNode.appendChild(wrapper);
			}
			else
			{
				suggest = SSP.DOM.byId(suggest);
				suggest.setAttribute('tabIndex', -1);
			}
			
			suggest.setAttribute('data-autocomplete-input', id);
			
			SSP.DOM.listen(suggest, 'click', SSP.Form.handleAutocompleteSuggestClick);
			
			SSP.Form.listenAutocompleteBodyClick(input.id, suggest.id);
			
			var multiple = input.getAttribute('data-autocomplete-multiple');
			
			if(multiple !== null)
			{
				suggest.setAttribute('data-autocomplete-multiple', multiple);
				
				var results = input.getAttribute('data-autocomplete-results');
				
				if(!results || !SSP.DOM.byId(results))
				{
					results = id + '_results';
					results = SSP.DOM.create('UL', {id: results, className: 'clean'});
					
					var wrapper = SSP.DOM.create('DIV', {className: 'autocomplete-results'});
					wrapper.appendChild(results);
					
					input.parentNode.insertBefore(wrapper, input);
				}
				else
					results = SSP.DOM.byId(results);
				
				results.setAttribute('data-autocomplete-name', input.name + '[]');
				
				SSP.DOM.listen(results, 'click', SSP.Form.handleAutocompleteResultsClick);
			}
			else
			{
				var hidden = input.getAttribute('data-autocomplete-hidden');
				
				if(hidden)
				{
					if(!SSP.DOM.byId(hidden))
					{
						hidden = hidden || input.name + '_hidden';
						input.setAttribute('data-autocomplete-hidden', hidden);
						
						hidden = SSP.DOM.create('INPUT', {name: input.name, id: hidden, type: 'hidden', value: input.getAttribute('data-autocomplete-id') || input.value});
						input.parentNode.insertBefore(hidden, input);
					}
					else
					{
						hidden = SSP.DOM.byId(hidden);
						hidden.name = input.name;
					}
					
					if(hidden.value)
						input.lastFoundValue = input.value;
				}
			}
			
			if(multiple !== null || hidden)
				input.name = 'autocomplete_' + input.name;
		})
		,
		listenAutocompleteBodyClick: (function(inputId, suggestId)
		{
			var listener = (function(){return function(event)
			{
				var input = SSP.DOM.byId(inputId);
				
				if(event.target === input)
					return;
				
				if(event.clientX || event.clientY)
				{
					var suggest = SSP.DOM.byId(suggestId);
					
					if(suggest && suggest.style.display !== 'none')
					{
						if(SSP.DOM.hasClass(suggest.parentNode, 'autocomplete-suggests'))
							var coords = suggest.parentNode.getBoundingClientRect();
						else
							var coords = suggest.getBoundingClientRect();
						
						if(event.clientX < coords.left
						|| event.clientX > coords.right
						|| event.clientY < coords.top
						|| event.clientY > coords.bottom)
						{
							var hide = true;
							var parent = event.target;
							
							do
							{
								if(parent === suggest)
								{
									hide = false;
									break;
								}
								else
									parent = parent.parentNode;
							}
							while(parent && parent.tagName !== 'BODY' && parent.tagName !== 'HTML');
							
							if(hide)
							{
								suggest.style.display = 'none';
								
								if(SSP.DOM.hasClass(suggest.parentNode, 'autocomplete-suggests'))
									suggest.parentNode.style.display = 'none';
							}
						}
					}
				}
			}
			;})(suggestId);
			
			SSP.DOM.listen(SSP.DOM.document.body, 'click', listener);
		})
		,
		setAutocompleteResult: function(input, item)
		{
			var suggest = SSP.DOM.byId(input.getAttribute('data-autocomplete-suggest'));
			
			var multiple = input.getAttribute('data-autocomplete-multiple');
			
			var objectId = item.getAttribute('data-autocomplete-id');
			
			var value = item.innerText || item.textContent;
			
			if(multiple !== null)
			{
				var results = SSP.DOM.byId(input.getAttribute('data-autocomplete-results'));
				var append = true;
				
				for(var i = 0; i < results.children.length; i++)
					if(objectId)
					{
						if(results.children[i].getAttribute('data-autocomplete-id') === objectId)
						{
							append = false;
							break;
						}
					}
					else if(results.children[i].getElementsByTagName('INPUT')[0].value === value)
					{
						append = false;
						break;
					}
				
				item.parentNode.removeChild(item);
				
				if(append)
				{
					var name = results.getAttribute('data-autocomplete-name');
					var item = SSP.DOM.create('LI');
					
					item.innerHTML = SSP.String.escapeHtml(value);
					
					if(objectId)
						item.setAttribute('data-autocomplete-id', objectId);
					
					var hidden = SSP.DOM.create('INPUT', {name: name, type: 'hidden', value: objectId || value});
					item.appendChild(hidden);
					
					var del = SSP.DOM.create('SPAN', {className: 'autocomplete-delete'});
					item.appendChild(del);
					
					results.appendChild(item);
				}
			}
			else
			{
				if(objectId === '')
					value = '';
				
				input.value = value;
				
				SSP.Form.syncAutocompleteHidden(input, objectId || value);
				
				SSP.Form.hideAutocompleteSuggest(input);
			}
		}
		,
		getAutocompleteQuery: function(input, ignoreSelection)
		{
			var query = input.value;
			
			if(typeof query === 'undefined')
				return '';
			
			if(!ignoreSelection)
			{
				var selection = SSP.DOM.getSelectionStartAndEnd(input);
				
				if(selection.start !== selection.end)
				{
					if(selection.start < selection.end)
					{
						var selectionStart = selection.start;
						var selectionEnd = selection.end;
					}
					else
					{
						var selectionStart = selection.end;
						var selectionEnd = selection.start;
					}
					
					if(selectionStart
					&& selectionEnd === query.length)
						query = query.substr(0, selectionStart);
				}
			}
			
			var nolower = input.getAttribute('data-autocomplete-nolower');
			
			if(nolower === null)
				query = query.toLowerCase();
			
			var notrim = input.getAttribute('data-autocomplete-notrim');
			
			if(notrim === null)
				query = SSP.String.trim(query);
			else
				query = encodeURIComponent(query);
			
			return query;
		}
		,
		requestAutocompleteSuggest: function(input, force, ignoreSelection)
		{
			var query = SSP.Form.getAutocompleteQuery(input, ignoreSelection);
			var disable = false;
			var urlTemplate = input.getAttribute('data-autocomplete-url');
			
			if(!urlTemplate)
				return;
			
			var lastUrlTemplate = SSP.Form.calcString(input.form.name, urlTemplate);
			
			if(input.lastUrlTemplate && input.lastUrlTemplate !== lastUrlTemplate)
			{
				input.autocompleteDisablePrefix = {};
				input.autocompleteCache = {};
			}
			else if(query)
			{
				if(input.autocompleteDisablePrefix[query])
					disable = true;
				else
					for(var i = 1; i < query.length; i++)
						if(input.autocompleteDisablePrefix[query.substr(0, i)])
						{
							disable = true;
							break;
						}
			}
			
			input.lastUrlTemplate = lastUrlTemplate;
			
			if(disable)
			{
				input.autocompleteQuery = query;
				SSP.Form.syncAutocompleteHidden(input, null);
				SSP.Form.hideAutocompleteSuggest(input);
			}
			else
			{
				var suggest = input.getAttribute('data-autocomplete-suggest');
				var displayer = SSP.Form.displayAutocompleteSuggest(suggest);
				
				if(input.autocompleteCache[query])
					displayer.call(null, input.autocompleteCache[query], false);
				else
				{
					if(force || query)
					{
						var url = SSP.Form.calcString(input.form.name, urlTemplate, {query: query});
						
						var multiple = input.getAttribute('data-autocomplete-multiple');
						
						if(multiple !== null)
						{
							var replacement = [];
							
							var value = SSP.Form.value(input.name.replace(/^autocomplete_/, '') + '[]');
							
							if(value)
							{
								value.sort();
								
								for(var i = 0; i < value.length; i++)
									if(value[i])
										replacement.push('&value[]=' + encodeURIComponent(value[i]));
							}
							
							replacement = replacement.join('');
						}
						else
							var replacement = '';
						
						url = url.replace('&value={value}', replacement);
						
						SSP.DOM.addClass(input, 'w');
						SSP.DOM.addClass(input, 'loading');
						
						var request = SSP.Bus.request(url, displayer);
						
						request.autocompleteQuery = query;
					}
					else
						SSP.Form.showAutocompleteSuggest(input);
					
					input.autocompleteQuery = query;
					
					if(typeof request !== 'undefined')
						return request;
				}
			}
		}
		,
		getAutocompleteCurrentActiveIndex: function(suggest)
		{
			var currentIndex = undefined;
			var length = suggest.children.length;
			
			for(var i = 0; i < length; i++)
				if(SSP.DOM.hasClass(suggest.children[i], 'active'))
				{
					currentIndex = i;
					break;
				}
			
			return currentIndex;
		}
		,
		handleAutocompleteKeyDown: function(event)
		{
			this.autofillDisabled = true;
			
			if(event.isCharacter && !event.ctrlKey && !event.altKey
			|| event.isPaste
			|| event.isCut
			|| event.isDelete)
			{
				this.autocompleteQuery = SSP.Form.getAutocompleteQuery(this);
				
				if(event.isCharacter && !event.ctrlKey && !event.altKey)
				{
					var key = event.key;
					
					if(typeof key === 'string' && key.length === 1)
					{
						var selection = SSP.DOM.getSelectionStartAndEnd(this);
						
						if(selection.start !== selection.end)
						{
							if(selection.start < selection.end)
							{
								var selectionStart = selection.start;
								var selectionEnd = selection.end;
							}
							else
							{
								var selectionStart = selection.end;
								var selectionEnd = selection.start;
							}
							
							if(selectionEnd === this.value.length
							&& selectionEnd - selectionStart > 1
							&& key === this.value.substr(selectionStart, 1))
							{
								SSP.DOM.setSelectionRange(this, selectionStart + 1, this.value.length);
								SSP.Bus.cancel(event);
							}
						}
					}
				}
			}
			else
			{
				var suggest = SSP.DOM.byId(this.getAttribute('data-autocomplete-suggest'));
				
				if(suggest && suggest.style.display !== 'none')
				{
					if(event.isEscape)
					{
						SSP.Form.hideAutocompleteSuggest(this);
						SSP.Bus.cancel(event);
					}
					else
					{
						var currentIndex = SSP.Form.getAutocompleteCurrentActiveIndex(suggest);
						var currentActive = typeof currentIndex !== 'undefined' ? suggest.children[currentIndex] : undefined;
						
						var length = suggest.children.length;
						
						if(event.isEnter)
						{
							if(currentActive)
								SSP.Form.setAutocompleteResult(this, currentActive);
							
							if(this.getAttribute('data-autocomplete-multiple') === null)
								SSP.Form.hideAutocompleteSuggest(this);
							
							SSP.DOM.setSelectionRange(this, this.value.length, this.value.length);
							
							var submit = this.getAttribute('data-autocomplete-autosubmit');
							
							if(submit !== null)
								SSP.DOM.submitForm(this.form);
							
							SSP.Bus.cancel(event);
						}
						else if(event.isUp || event.isDown)
						{
							if(currentActive)
								SSP.DOM.removeClass(currentActive, 'active');
							else if(event.isUp)
								currentIndex = 0;
							else if(event.isDown)
								currentIndex = length - 1;
							
							if(event.isUp)
							{
								currentIndex--;
								
								if(currentIndex < 0)
									currentIndex = length - 1;
							}
							else if(event.isDown)
							{
								currentIndex++;
								
								if(currentIndex >= length)
									currentIndex = 0;
							}
							
							currentActive = suggest.children[currentIndex];
							
							var selection = SSP.DOM.getSelectionStartAndEnd(this);
							var selectionStart = selection.start;
							var selectionEnd = selection.end;
							
							this.value = currentActive.textContent || currentActive.innerText;
							
							SSP.DOM.setSelectionRange(this, selectionStart < selectionEnd ? selectionStart : selectionEnd, this.value.length);
							
							SSP.Form.syncAutocompleteHidden(this, currentActive.getAttribute('data-autocomplete-id') || this.value);
							
							SSP.DOM.scroll(currentActive, SSP.DOM.hasClass(suggest.parentNode, 'autocomplete-suggests') ? suggest.parentNode : suggest, true);
							
							SSP.DOM.addClass(currentActive, 'active');
							
							SSP.Bus.cancel(event);
						}
						else if(!event.shiftKey && (event.isLeft || event.isRight))
						{
							var selection = SSP.DOM.getSelectionStartAndEnd(this);
							var selectionStart = selection.start;
							var selectionEnd = selection.end;
							
							if(selectionEnd !== selectionStart)
								SSP.Form.requestAutocompleteSuggest(this, true, true);
						}
					}
				}
			}
		}
		,
		handleAutocompleteKeyUp: function(event)
		{
			this.autofillDisabled = event.isDelete || event.isCut;
			var isShiftOrControl = event.key === 'Shift' || event.key === 'Control';
			
			if(isShiftOrControl)
			{
				var selection = SSP.DOM.getSelectionStartAndEnd(this);
				var selectionStart = selection.start;
				var selectionEnd = selection.end;
			}
			
			if(event.shiftKey && !event.isCursor && event.key !== 'Control'
			|| event.isCharacter && !event.ctrlKey && !event.altKey
			|| event.isPaste
			|| event.isCut
			|| event.isDelete
			|| isShiftOrControl && selectionEnd === selectionStart)
			{
				SSP.Form.syncAutocompleteHidden(this, null);
				
				if(typeof this.debounceKeyUp === 'number')
					clearTimeout(this.debounceKeyUp);
				
				var id = this.id;
				
				var debouncer = (function(){return function()
				{
					var input = SSP.DOM.byId(id);
					var query = SSP.Form.getAutocompleteQuery(input);
					
					if(query)
						SSP.Form.requestAutocompleteSuggest(input, true);
					else
					{
						input.autocompleteQuery = query;
						SSP.Form.hideAutocompleteSuggest(input);
					}
				};
				})(id);
				
				this.debounceKeyUp = setTimeout(debouncer, SSP.DOM.timeoutMedium);
			}
		}
		,
		showAutocompleteSuggest: function(input)
		{
			var suggest = SSP.DOM.byId(input.getAttribute('data-autocomplete-suggest'));
			
			if(suggest.children.length)
			{
				suggest.style.display = 'block';
				
				if(SSP.DOM.hasClass(suggest.parentNode, 'autocomplete-suggests'))
					suggest.parentNode.style.display = 'block';
				
				SSP.DOM.removeClass(input, 'loading');
			}
		}
		,
		hideAutocompleteSuggest: function(input)
		{
			var suggest = SSP.DOM.byId(input.getAttribute('data-autocomplete-suggest'));
			
			if(suggest)
			{
				suggest.style.display = 'none';
				
				if(SSP.DOM.hasClass(suggest.parentNode, 'autocomplete-suggests'))
					suggest.parentNode.style.display = 'none';
				
				SSP.DOM.removeClass(input, 'loading');
			}
		}
		,
		handleAutocompleteFocus: function(event)
		{
			if(this.getAttribute('data-autocomplete-nofocus-once') !== null)
				this.removeAttribute('data-autocomplete-nofocus-once');
			else if(this.getAttribute('data-autocomplete-nofocus') === null)
			{
				var suggest = SSP.DOM.byId(this.getAttribute('data-autocomplete-suggest'));
				
				if(suggest.style.display === 'none')
					SSP.Form.requestAutocompleteSuggest(this, !!this.value);
			}
		}
		,
		handleAutocompleteBlur: function(event)
		{
			if(SSP.DOM.getDocument(this).activeElement !== this)
				SSP.Form.hideAutocompleteSuggest(this);
		}
		,
		handleAutocompleteMouseDown: function(event)
		{
			this.autofillDisabled = true;
		}
		,
		handleAutocompleteMouseUp: function(event)
		{
			var selection = SSP.DOM.getSelectionStartAndEnd(this);
			
			this.autofillDisabled = selection.start !== selection.end;
		}
		,
		highlightAutocompleteSuggest: function(string, rx)
		{
			return string.replace(rx, '$1<b>$2</b>');
		}
		,
		syncAutocompleteHidden: function(input, value)
		{
			if(input.getAttribute('data-autocomplete-multiple') === null)
			{
				var hidden = input.getAttribute('data-autocomplete-hidden');
				
				if(hidden)
				{
					hidden = SSP.DOM.byId(hidden);
					
					if(hidden)
					{
						if(value === null
						|| typeof value === 'undefined'
						|| value === '')
						{
							if(input.lastFoundValue !== input.value)
								hidden.value = '';
						}
						else
							hidden.value = value;
						
						if(hidden.value)
							input.lastFoundValue = input.value;
					}
				}
			}
		}
		,
		displayAutocompleteSuggestCache: {}
		,
		displayAutocompleteSuggest: function(suggestId)
		{
			if(!SSP.Form.displayAutocompleteSuggestCache[suggestId])
				SSP.Form.displayAutocompleteSuggestCache[suggestId] = (function(){return function(data, cache)
				{
					if(typeof cache === 'undefined')
						cache = true;
					
					var suggest = SSP.DOM.byId(suggestId);
					var html = [];
					
					var input = SSP.DOM.byId(suggest.getAttribute('data-autocomplete-input'));
					
					if(this && typeof this.autocompleteQuery !== 'undefined' && input.autocompleteQuery !== this.autocompleteQuery)
						return;
					
					if(cache && input.getAttribute('data-autocomplete-cache') !== null)
						input.autocompleteCache[input.autocompleteQuery] = data;
					
					var query = SSP.String.escapeHtml(SSP.String.trim(SSP.String.decodeURIComponent(input.autocompleteQuery)));
					
					if(query)
						var rx = new RegExp('(^|\\s)(' + SSP.String.escapeRegExp(query).split(/\s+/).join('|') + ')', 'gi');
					
					var length = 0;
					var even = true;
					var className;
					var first;
					var firstKey;
					
					if(data instanceof Array)
					{
						length = data.length;
						
						for(var i = 0; i < length; i++)
						{
							var item = data[i];
							className = even ? 'even' : 'odd';
							
							if(item && typeof item === 'object')
							{
								if(typeof item.value === 'undefined')
									var value = item.text;
								else
									var value = item.value;
								
								var label = query ? SSP.Form.highlightAutocompleteSuggest(value, rx) : value;
								html.push('<li class="' + className + '"' + (typeof item.id !== 'undefined' ? ' data-autocomplete-id="' + SSP.String.escapeHtml(item.id) + '"' : '') + '>' + label + '</li>');
								
								if(typeof firstKey === 'undefined')
									firstKey = item.id;
							}
							else
							{
								var label = query ? SSP.Form.highlightAutocompleteSuggest(item, rx) : item;
								html.push('<li class="' + className + '">' + label + '</li>');
							}
							
							if(typeof first === 'undefined')
								first = label;
							
							even = !even;
						}
					}
					else
						for(var key in data)
						{
							className = even ? 'even' : 'odd';
							
							var label = query ? SSP.Form.highlightAutocompleteSuggest(data[key], rx) : data[key];
							
							html.push('<li class="' + className + '" data-autocomplete-id="' + SSP.String.escapeHtml(key) + '">' + label + '</li>');
							
							if(typeof first === 'undefined')
								first = label;
							
							if(typeof firstKey === 'undefined')
								firstKey = key;
							
							length++;
						}
					
					suggest.innerHTML = html.join('');
					
					if(length)
					{
						SSP.Form.showAutocompleteSuggest(input);
						
						if(!input.autofillDisabled)
						{
							first = SSP.String.getTextContent(first);
							
							if(input.value !== first)
							{
								var selection = SSP.DOM.getSelectionStartAndEnd(input);
								var selectionStart = selection.start;
								var selectionEnd = selection.end;
								
								var prefix = input.value.substr(0, selectionStart < selectionEnd ? selectionStart : selectionEnd);
								
								if(!prefix || first.indexOf(prefix) === 0)
								{
									input.value = first;
									SSP.Form.syncAutocompleteHidden(input, firstKey || first);
									input.focus();
									SSP.DOM.setSelectionRange(input, selectionStart < selectionEnd ? selectionStart : selectionEnd, first.length);
								}
							}
						}
					}
					else
					{
						SSP.Form.hideAutocompleteSuggest(input);
						SSP.Form.syncAutocompleteHidden(input, null);
						input.autocompleteDisablePrefix[input.autocompleteQuery] = true;
					}
				}
				;})(suggestId);
			
			return SSP.Form.displayAutocompleteSuggestCache[suggestId];
		}
		,
		handleAutocompleteSuggestClick: function(event)
		{
			var target = event.target;
			
			while(target.parentNode
			&& target.tagName !== 'LI'
			&& target.tagName !== 'BODY'
			&& target.tagName !== 'HTML')
				target = target.parentNode;
			
			if(target.tagName === 'LI')
			{
				var input = SSP.DOM.byId(this.getAttribute('data-autocomplete-input'));
				input.focus();
				SSP.Form.setAutocompleteResult(input, target);
				
				var submit = input.getAttribute('data-autocomplete-autosubmit');
				
				if(submit !== null)
					SSP.DOM.submitForm(input.form);
				
				SSP.Bus.cancel(event);
			}
		}
		,
		handleAutocompleteResultsClick: function(event)
		{
			var target = event.target;
			
			if(SSP.DOM.hasClass(target, 'autocomplete-delete'))
			{
				var parent = target.parentNode;
				
				while(parent.parentNode
				&& parent.parentNode.tagName !== 'UL'
				&& !SSP.DOM.hasClass(parent.parentNode, 'autocomplete-results'))
					parent = parent.parentNode;
				
				if(SSP.DOM.hasClass(parent.parentNode, 'autocomplete-results')
				|| SSP.DOM.hasClass(parent.parentNode.parentNode, 'autocomplete-results'))
					parent.parentNode.removeChild(parent);
			}
		}
		,
		checkAll: function(name)
		{
			var checked = this.checked;
			
			SSP.DOM.walk(this.form.elements, function(input){
				if(input.type === 'checkbox' && input.name === name)
					input.checked = checked;
			});
		}
		,
		cloneDynamicShowIf: function(oldId, newId)
		{
			var showif;
			var len = oldId.length;
			
			for(var field in SSP.Form.dynamicShowIf[oldId])
			{
				if(!showif)
					showif = {};
				
				if(!Object.hasOwnProperty.call(SSP.Form.dynamicShowIf[oldId], field))
					continue;
				
				showif[field] = [];
				
				for(var i = 0; i < SSP.Form.dynamicShowIf[oldId][field].length; i++)
					if(typeof SSP.Form.dynamicShowIf[oldId][field][i] === 'object')
					{
						showif[field][i] = {};
						
						for(var k in SSP.Form.dynamicShowIf[oldId][field][i])
						{
							if(k === 'key' && SSP.Form.dynamicShowIf[oldId][field][i][k].indexOf(oldId) === 0)
								showif[field][i][k] = newId + SSP.Form.dynamicShowIf[oldId][field][i][k].substr(len);
							else
								showif[field][i][k] = SSP.Form.dynamicShowIf[oldId][field][i][k];
						}	
					}
					else
						showif[field][i] = SSP.Form.dynamicShowIf[oldId][field][i];
			}
			
			return showif;
		}
		,
		getInput: function(label)
		{
			if(label.htmlFor)
				return SSP.DOM.byId(label.htmlFor);
		}
		,
		getLabel: function(input)
		{
			if(typeof input.form.labels === 'undefined')
			{
				input.form.labels = {};
				
				var labels = input.form.getElementsByTagName('LABEL');
				
				for(var i = 0; i < labels.length; i++)
				{
					var htmlFor = labels[i].htmlFor;
					
					if(htmlFor)
						input.form.labels[htmlFor] = labels[i];
				}
			}
			
			var id = input.id;
			
			if(id)
			{
				if(typeof input.form.labels[id] === 'undefined')
					input.form.labels[id] = null;
				
				return input.form.labels[id];
			}
		}
		,
		syncSelects: function(form, forceFirst)
		{
			if(form.tagName === 'FORM' && !SSP.DOM.hasClass(form, 'emulated'))
			{
				var selects = form.getElementsByTagName('SELECT');
				
				for(var i = 0; i < selects.length; i++)
					SSP.Form.syncSelect(selects[i], forceFirst);
			}
		}
		,
		syncSelect: function(select, forceFirst)
		{
			var multiple = select.multiple;
			
			for(var i = 0; i < select.options.length; i++)
				if(forceFirst)
				{
					if(multiple)
						select.options[i].selected = false;
					else
						select.options[i].selected = i === 0;
				}
				else if(select.options[i].getAttribute('selected') !== null && select.options[i].attributes.selected !== null)
				{
					if(multiple)
						select.options[i].selected = true;
					else
					{
						select.selectedIndex = i;
						return;
					}
				}
			
			if(multiple)
				return;
			else if(forceFirst)
				select.selectedIndex = 0;
		}
		,
		initEmulated: function(form, reset)
		{
			if(form.emulated)
				return;
			else
				form.emulated = true;
			
			if(reset)
				form.reset();
			
			SSP.Form.syncType(form);
			SSP.Form.syncChecked(form);
			
			SSP.DOM.listen(form, 'click', SSP.Form.emulate);
			
			if(SSP.Browser.IE)
			{
				form.style.visibility = 'hidden';
				form.style.visibility = '';
			}
		}
		,
		emulate: function(event, checkedClass)
		{
			switch(event.type)
			{
				case 'click':
				{
					var target = SSP.Form.findClicked(event, this);
					
					if(!target)
						return true;
					
					switch(target.tagName)
					{
						case 'INPUT':
						{
							var input = target;
							
							checkedClass = checkedClass || 'checked';
							
							switch(input.type)
							{
								case 'radio':
								{
									SSP.Form.check(this, input.name, false, checkedClass);
									
									input.checked = true;
								}
								case 'checkbox':
								{
									SSP.Form.checkChecked(input, checkedClass);
									
									SSP.DOM.triggerReflow(input.parentNode);
								}
								break;
							}
						}
						break;
					}
				}
				break;
			}
		}
		,
		findClicked: function(event, form)
		{
			var target = event.target;
			
			if(SSP.Browser.IE && target.tagName !== 'INPUT')
			{
				while(target.tagName !== 'LABEL' && target !== form)
					target = target.parentNode;
				
				if(target.tagName !== 'LABEL')
					return;
				
				target = SSP.Form.getInput(target);
				
				if(target.type === 'checkbox')
				{
					if(!event.emulated)
					{
						event.emulated = true;
						target.checked = !target.checked;
					}
				}
				else if(target.type === 'radio' && !target.checked)
					target.checked = true;
			}
			
			return target;
		}
		,
		syncType: function(form)
		{
			SSP.DOM.walk(form.elements, SSP.Form.checkType);
		}
		,
		checkType: function(input)
		{
			var label = SSP.Form.getLabel(input);
			var classes = [input.tagName.toLowerCase()];
			
			if(input.type)
				classes.push(input.type);
			
			for(var i = 0; i < classes.length; i++)
			{
				SSP.DOM.addClass(input, classes[i]);
				
				if(label)
					SSP.DOM.addClass(label, classes[i]);
			}
		}
		,
		syncChecked: function(form, checkedClass)
		{
			checkedClass = checkedClass || 'checked';
			
			SSP.DOM.walk(form.getElementsByTagName('INPUT'), function(input)
			{
				if(input.type === 'checkbox' || input.type === 'radio')
					SSP.Form.checkChecked(input, checkedClass);
			});
			
			SSP.DOM.triggerReflow(form);
		}
		,
		checkChecked: function(input, checkedClass, forceClass)
		{
			var node = SSP.Form.getLabel(input) || input;
			
			if(forceClass)
				input.checked = SSP.DOM.hasClass(node, checkedClass);
			else if(input.checked)
				SSP.DOM.addClass(node, checkedClass);
			else
				SSP.DOM.removeClass(node, checkedClass);
		}
		,
		check: function(form, name, checked, checkedClass)
		{
			if(form)
			{
				if(typeof checked === 'undefined')
					checked = true;
				
				checkedClass = checkedClass || 'checked';
				
				var input = form.elements[name];
				
				if(input)
				{
					if(SSP.DOM.isNode(input))
					{
						input.checked = checked;
						
						if(checkedClass)
						{
							var node = SSP.Form.getLabel(input) || input;
							
							if(checked)
								SSP.DOM.addClass(node, checkedClass);
							else
								SSP.DOM.removeClass(node, checkedClass);
						}
					}
					else
					{
						var inputs = input;
						
						for(var i = 0; i < inputs.length; i++)
						{
							input = inputs[i];
							
							if(input.type === 'radio' && typeof checked === 'string')
								input.checked = checked === input.value;
							else
								input.checked = checked;
							
							if(checkedClass)
							{
								var node = SSP.Form.getLabel(input) || input;
								
								if(input.checked)
									SSP.DOM.addClass(node, checkedClass);
								else
									SSP.DOM.removeClass(node, checkedClass);
							}
						}
					}
				}
			}
		}
		,
		dynamicFields: {}
		,
		dynamicShowIf: {}
		,
		initDynamic: function(name, showif)
		{
			if(!SSP.Form.dynamicFields[name])
				SSP.Form.dynamicFields[name] = {};
			
			if(!SSP.Form.dynamicShowIf[name])
				SSP.Form.dynamicShowIf[name] = showif;
			
			for(var field in showif)
				if(Object.hasOwnProperty.call(showif, field))
					SSP.Form.recalcDynamic(name + '[' + field + ']', true);
		}
		,
		destroyDynamic: function(name)
		{
			for(var key in SSP.Form.dynamicShowIf)
				if(key === name || key.indexOf(name + '[') === 0)
				{
					delete SSP.Form.dynamicFields[key];
					delete SSP.Form.dynamicShowIf[key];
					
					if(SSP.Form.conditionCache[key])
						delete SSP.Form.conditionCache[key];
				}
			
			if(SSP.Form.loadedEnums[name])
				delete SSP.Form.loadedEnums[name];
		}
		,
		dynamicChangeListener: function(event)
		{
			SSP.Form.recalcDynamic(this.name);
		}
		,
		recalcDynamic: function(name, initial)
		{
			var path = SSP.Object.splitPath(name);
			
			var src = path.pop();
			
			var name = path.shift();
			
			if(path.length)
				name += '[' + path.join('][') + ']';
			
			if(initial)
			{
				var field = src;
				
				if(SSP.Form.dynamicShowIf[name][field])
				{
					var condition = SSP.Form.getCondition(name, field);
					var show = SSP.Object.evalFunc('return ' + condition);
					
					if(show)
						SSP.Form.showDynamic(name, field);
					else
						SSP.Form.hideDynamic(name, field);
				}
			}
			
			SSP.Form.recalcDependentFields(name, src);
		}
		,
		recalcDependentFields: function(name, src)
		{
			if(SSP.Form.dynamicFields[name] && SSP.Form.dynamicFields[name][src])
				for(var i = 0; i < SSP.Form.dynamicFields[name][src].length; i++)
				{
					var field = SSP.Form.dynamicFields[name][src][i];
					var formName = name;
					
					if(!SSP.Form.dynamicShowIf[formName])
					{
						var path = SSP.Object.splitPath(formName);
						formName = path[0];
					}
					
					if(SSP.Form.dynamicShowIf[formName]
					&& SSP.Form.dynamicShowIf[formName][field])
					{
						var condition = SSP.Form.getCondition(formName, field);
						var show = SSP.Object.evalFunc('return ' + condition);
						
						if(show)
							SSP.Form.showDynamic(formName, field);
						else
							SSP.Form.hideDynamic(formName, field);
						
						SSP.Form.recalcDependentFields(formName, field);
					}
				}
		}
		,
		conditionCache: {}
		,
		getCondition: function(name, field)
		{
			if(!SSP.Form.conditionCache[name])
				SSP.Form.conditionCache[name] = {};
			
			if(!SSP.Form.conditionCache[name][field])
			{
				SSP.Form.conditionCache[name][field] = [];
				SSP.Form.prepareCondition(
					SSP.Form.dynamicShowIf[name][field],
					SSP.Form.conditionCache[name][field],
					field
				);
			}
			
			var condition = SSP.Form.bindCondition(
				SSP.Form.conditionCache[name][field],
				SSP.DOM.byId(SSP.Form.getId(name, field)) || SSP.DOM.byId(SSP.Form.getLayoutId(name, field))
			);
			
			return condition.join('');
		}
		,
		prepareCondition: function(description, condition, field)
		{
			for(var i in description)
			{
				if(!description.hasOwnProperty(i))
					continue;
				
				if(i === 'disablehidden')
					continue;
				
				if(typeof description[i] === 'object')
				{
					var path = SSP.Object.splitPath(description[i].key);
					
					var src = path.pop();
					
					var name = path.shift();
					
					if(path.length)
						name += '[' + path.join('][') + ']';
					
					if(!SSP.Form.dynamicFields[name])
						SSP.Form.dynamicFields[name] = [];
					
					if(!SSP.Form.dynamicFields[name][src])
					{
						var inputs = SSP.Form.getInputsByName(description[i].key);
						
						for(var j = 0; j < inputs.length; j++)
							SSP.DOM.listen(inputs[j], 'change', SSP.Form.dynamicChangeListener);
						
						SSP.Form.dynamicFields[name][src] = [];
					}
					
					if(SSP.Array.search(field, SSP.Form.dynamicFields[name][src]) === false)
						SSP.Form.dynamicFields[name][src].push(field);
					
					condition.push({
						func: SSP.Form.value,
						path: description[i].path,
						key: description[i].key,
						cond: description[i].cond,
						value: description[i].value
					});
				}
				else
					condition.push(description[i]);
			}
		}
		,
		bindCondition: function(condition, target)
		{
			var bound = [];
			
			for(var i = 0; i < condition.length; i++)
				if(typeof condition[i] === 'object')
				{
					if(typeof condition[i].func === 'function')
						bound[i] = SSP.Object.evalCondition(
							condition[i].path ? condition[i].func(target, condition[i].path) : condition[i].func(condition[i].key),
							condition[i].cond,
							condition[i].value
						) ? 'true ' : 'false ';
					else
						throw new Error('Invalid condition');
				}
				else
					bound[i] = condition[i];
			
			return bound;
		}
		,
		formula: {}
		,
		nameToPath: {}
		,
		pathToName: {}
		,
		pathCache: {}
		,
		formulaMap: {}
		,
		inputsByFormularPath: {}
		,
		initFormular: function(name, path, formula)
		{
			SSP.Form.makeFormulaMap(path, formula);
			
			if(!SSP.Form.formula[path])
				SSP.Form.formula[path] = formula;
			
			if(name.indexOf('/*/') !== -1)
			{
				if(!SSP.Form.pathToName[path])
					SSP.Form.pathToName[path] = [];
				
				if(SSP.Form.pathToName[path].indexOf(name) === -1)
					SSP.Form.pathToName[path].push(name);
			}
			else
			{
				SSP.Form.pathToName[path] = name;
				
				var exactPath = path;
				path = path.replace(/\/\d+\//, '/*/');
				
				if(exactPath !== path)
				{
					if(!SSP.Form.pathToName[path])
						SSP.Form.pathToName[path] = [];
					
					if(SSP.Form.pathToName[path].indexOf(name) === -1)
						SSP.Form.pathToName[path].push(name);
					
					path = exactPath;
				}
			}
			
			SSP.Form.nameToPath[name] = path;
			
			SSP.Form.mapFormularInputs(name, path);
		}
		,
		initFormularEnd: function(path)
		{
			for(var formula in SSP.Form.formula)
				if(formula.indexOf(path + '/') === 0 || formula === path)
					if(SSP.Form.pathToName[formula])
					{
						var names = SSP.Form.pathToName[formula] instanceof Array
								  ? SSP.Form.pathToName[formula]
								  : [SSP.Form.pathToName[formula]];
						
						for(var i = 0; i < names.length; i++)
							SSP.Form.listenFormular(names[i], formula);
					}
		}
		,
		makeFormulaMap: function(path, formula)
		{
			for(var field in formula)
			{
				var deps = formula[field]['depends'];
				
				for(var dep in deps)
				{
					var p = formula[field]['depends'][dep];
					
					if(!SSP.Form.formulaMap[p])
						SSP.Form.formulaMap[p] = [];
					
					if(SSP.Form.formulaMap[p].indexOf(path + '::' + field) === -1)
						SSP.Form.formulaMap[p].push(path + '::' + field);
				}
			}
		}
		,
		validateInput: function(input)
		{
			if(input.value === '')
			{
				if(input.flashInterval)
				{
					clearInterval(input.flashInterval);
					delete input.flashInterval;
				}
				
				SSP.DOM.removeClass(input, 'error');
				return true;
			}
			
			var pattern = input.getAttribute('data-pattern');
			
			if(pattern)
			{
				var matches = pattern.match(/^\/(.*)\/([^\/]*)$/);
				
				if(matches)
				{
					var rx = new RegExp(matches[1], matches[2]);
					
					if(input.flashInterval)
					{
						clearInterval(input.flashInterval);
						delete input.flashInterval;
					}
					
					if(rx.test(input.value))
					{
						SSP.DOM.removeClass(input, 'error');
						return true;
					}
					else
					{
						SSP.DOM.addClass(input, 'error');
						return false;
					}
				}
			}
			
			return true;
		}
		,
		getValue: function(path)
		{
			if(SSP.Form.inputsByFormularPath[path])
			{
				var pathInfo = path.split('::');
				var objPath = pathInfo[0];
				var objProp = pathInfo[1];
				
				if(SSP.Form.formula[objPath] && SSP.Form.formula[objPath][objProp])
				{
					if(!(SSP.Form.pathToName[objPath] instanceof Array))
					{
						if(typeof SSP.Form.inputsByFormularPath[path][0].formulaResult === 'undefined')
						{
							var value = SSP.Form.executeFormula(objPath, objProp);
							SSP.Form.inputsByFormularPath[path][0].formulaResult = value;
						}
						else
							var value = SSP.Form.inputsByFormularPath[path][0].formulaResult;
						
						var result = value;
						
						if(!result)
						{
							switch(typeof result)
							{
								case 'number':
								{
									if(result === 0 || result === 0.)
										break;
								}
								case 'undefined':
								case 'object':
								{
									result = '';
								}
								break;
							}
						}
						else if(result === Number.POSITIVE_INFINITY || result === Number.NEGATIVE_INFINITY)
							result = '';
						
						SSP.Form.inputsByFormularPath[path][0].value = result;
						
						if(!SSP.Form.validateInput(SSP.Form.inputsByFormularPath[path][0]))
							SSP.Form.formularValid = false;
					}
					else
						var value = SSP.Form.executeFormula(objPath, objProp);
					
					return value;
				}
				else
				{
					if(SSP.Form.pathToName[objPath] instanceof Array)
					{
						var value = [];
						
						for(var i = 0; i < SSP.Form.inputsByFormularPath[path].length; i++)
							value.push(SSP.Form.getInputValue(SSP.Form.inputsByFormularPath[path][i]));
						
						return value;
					}
					else
						return SSP.Form.getInputValue(SSP.Form.inputsByFormularPath[path][0]);
				}
			}
		}
		,
		getInputValue: function(input)
		{
			var value = input.value;
			
			/*@cc_on
			if(true)
				var type = input['data-type'];
			else
			@*/
				var type = input.getAttribute('data-type');
			
			switch(type)
			{
				case 'int':
				case 'integer':
				{
					return value === ''
						 ? null
						 : SSP.Number.parseInt(value);
				}
				break;
				case 'double':
				case 'float':
				{
					return value === ''
						 ? null
						 : SSP.Number.parseFloat(value, /*@cc_on true ? input['data-precision'] : @*/ input.getAttribute('data-precision'));
				}
				break;
				case 'bool':
				case 'boolean':
				{
					return value && value !== '0'
						 ? true
						 : false;
				}
				break;
				default:
				{
					return value;
				}
			}
		}
		,
		listenFormular: function(name, path)
		{
			var form = SSP.DOM.byName(name)[0];
			
			if(form)
			{
				var pattern = path + '::';
				var mapped = false;
				var inputs = SSP.Form.inputsByFormularPath;
				
				for(var dep in SSP.Form.formulaMap)
					if(dep.indexOf(pattern) === 0)
					{
						if(!mapped)
						{
							SSP.Form.mapFormularInputs(name, path);
							mapped = true;
						}
						
						if(inputs[dep])
							for(var i = 0; i < inputs[dep].length; i++)
								if(!inputs[dep][i].listeningFormular)
								{
									SSP.DOM.listen(inputs[dep][i], 'change', SSP.Form.formularListener);
									inputs[dep][i].listeningFormular = true;
									inputs[dep][i].autocomplete = 'off';
								}
					}
			}
		}
		,
		patternListener: function(event)
		{
			SSP.Form.validateInput(event.target);
		}
		,
		formularListener: function(event)
		{
			SSP.Form.formularRecalc(event.target);
		}
		,
		formularRecalc: function(input)
		{
			var path = input.getAttribute('data-path');
			
			if(!path)
				return;
			
			SSP.Form.formularValid = true;
			
			var depends = [];
			
			if(SSP.Form.formulaMap[path])
				for(var i = 0; i < SSP.Form.formulaMap[path].length; i++)
					depends.push(SSP.Form.formulaMap[path][i]);
			
			if(path.indexOf('/*/') === -1)
			{
				var exactPath = path;
				path = path.replace(/\/\d+\//g, '/*/');
				
				if(exactPath !== path && SSP.Form.formulaMap[path])
					for(var i = 0; i < SSP.Form.formulaMap[path].length; i++)
						depends.push(SSP.Form.formulaMap[path][i]);
			}
			
			for(var i = 0; i < depends.length; i++)
			{
				var inputs = SSP.Form.inputsByFormularPath[depends[i]];
				
				for(var j = 0; j < inputs.length; j++)
					inputs[j].formulaResult = void 0;
			}
			
			for(var i = 0; i < depends.length; i++)
			{
				var p = depends[i];
				var inputs = SSP.Form.inputsByFormularPath[p];
				p = p.split('::');
				
				for(var j = 0; j < inputs.length; j++)
				{
					var result = SSP.Form.executeFormula(p[0], p[1], j);
					
					inputs[j].formulaResult = result;
					
					if(!result)
					{
						switch(typeof result)
						{
							case 'number':
							{
								if(result === 0 || result === 0.)
									break;
							}
							case 'undefined':
							case 'object':
							{
								result = '';
							}
							break;
						}
					}
					else if(result === Number.POSITIVE_INFINITY || result === Number.NEGATIVE_INFINITY)
						result = '';
					
					inputs[j].value = result;
					
					if(!SSP.Form.validateInput(inputs[j]))
						SSP.Form.formularValid = false;
				}
			}
			
			if(!SSP.Form.formularValid)
				SSP.Form.formularFlashErrorInitiator(input);
			
			SSP.Form.formularValid = void 0;
		}
		,
		executeFormula: function(path, prop)
		{
			if(typeof SSP.Form.formula[path][prop]['function'] === 'string')
				SSP.Form.formula[path][prop]['function'] = eval(SSP.Form.formula[path][prop]['function']);
			
			var context = SSP.Form.getContext(path, prop);
			var num = null;
			var closure = SSP.Form.formula[path][prop]['function'];
			
			var path = path.split('/');
			path.pop();
			
			if(path.length && path[path.length - 1].match(/^\d+$/))
				num = SSP.Number.parseInt(path.pop());
			
			try
			{
				return closure.call(context, num);
			}
			catch(e)
			{
				SSP.System.console.log(e);
			}
		}
		,
		formularFlashErrorInitiator: function(input, count)
		{
			if(input.flashInterval)
				return;
			
			var hadClass = SSP.DOM.hasClass(input, 'error');
			count = count && count > 0 ? count : 3;
			
			if(hadClass)
				SSP.DOM.removeClass(input, 'error');
			else
				SSP.DOM.addClass(input, 'error');
			
			input.flashCount = count * 2;
			
			var flasher = function()
			{
				input.flashCount--;
				
				if(!input.flashCount)
				{
					if(hadClass)
						SSP.DOM.addClass(input, 'error');
					else
						SSP.DOM.removeClass(input, 'error');
					
					clearInterval(input.flashInterval);
					delete input.flashInterval;
				}
				else if(SSP.DOM.hasClass(input, 'error'))
					SSP.DOM.removeClass(input, 'error');
				else
					SSP.DOM.addClass(input, 'error');
			};
			
			input.flashInterval = setInterval(flasher, SSP.DOM.timeoutMedium);
		}
		,
		mapFormularInputs: function(name, path)
		{
			var form = SSP.DOM.byName(name)[0];
			
			if(form)
			{
				var pattern = path + '::';
				
				var inputs = SSP.Form.inputsByFormularPath;
				
				var children = [
					form.getElementsByTagName('INPUT'),
					form.getElementsByTagName('SELECT'),
					form.getElementsByTagName('TEXTAREA')
				];
				
				var nodes = [];
				
				for(var i = 0; i < children.length; i++)
				{
					var list = children[i];
					
					for(var j = 0; j < list.length; j++)
					{
						var input = list[j];
						var inputPath = input.getAttribute('data-path');
						
						if(inputPath && inputPath.indexOf(pattern) === 0)
						{
							if(!inputs[inputPath])
								inputs[inputPath] = [];
							
							var found = false;
							
							for(var k = 0; k < inputs[inputPath].length; k++)
								if(input === inputs[inputPath][k])
								{
									found = true;
									break;
								}
							
							if(!found)
								inputs[inputPath].push(input);
							
							var exactPath = inputPath;
							inputPath = inputPath.replace(/\/\d+\//, '/*/');
							
							if(exactPath !== inputPath && exactPath.indexOf('/*/') === -1)
							{
								if(!inputs[inputPath])
									inputs[inputPath] = [];
								
								var found = false;
								
								for(var k = 0; k < inputs[inputPath].length; k++)
									if(input === inputs[inputPath][k])
									{
										found = true;
										break;
									}
								
								if(!found)
									inputs[inputPath].push(input);
							}
						}
					}
				}
			}
		}
		,
		getContext: function(path, prop)
		{
			if(SSP.Form.formula[path] && SSP.Form.formula[path][prop])
			{
				var deps = SSP.Form.formula[path][prop].depends;
				var context = new SSP.Formular();
				
				for(var dep in deps)
					SSP.Form.fillContext(deps[dep], dep, context);
				
				return context;
			}
		}
		,
		fillContext: function(absPath, relPath, context)
		{
			if(SSP.Form.pathCache[relPath])
			{
				var pathInfo = SSP.Form.pathCache[relPath];
				
				var key = pathInfo.key;
				var isFull = pathInfo.isFull;
				var isWildcard = pathInfo.isWildcard;
				var localPath = pathInfo.localPath;
			}
			else
			{
				var path = relPath.split('::');
				var prop = path.pop();
				
				if(path.length)
				{
					path = path[0].split('/');
					var key = path.shift();
					var isFull = true;
					
					if(path.length
					&& (path[0] === '*' || path[0] === '?'))
					{
						path.shift();
						var isWildcard = true;
					}
					else
						var isWildcard = false;
					
					if(path.length)
						var localPath = path.join('/') + '::' + prop;
					else
						var localPath = prop;
				}
				else
				{
					var key = null;
					var isFull = false;
					var isWildcard = false;
					var localPath = prop;
				}
				
				SSP.Form.pathCache[relPath] = {
					key: key,
					isFull: isFull,
					isWildcard: isWildcard,
					localPath: localPath
				};
			}
			
			if(isFull)
			{
				if(isWildcard)
				{
					var value = SSP.Form.getValue(absPath);
					
					if(typeof context[key] === 'undefined')
						context[key] = [];
					
					if(!(value instanceof Array))
						value = [value];
					
					for(var i = 0; i < value.length; i++)
					{
						var child = context[key][i] || {};
						SSP.Form.fillContext(absPath.replace('/*/', '/' + i + '/'), localPath, child);
						context[key][i] = child;
					}
				}
				else
				{
					if(typeof context[key] === 'undefined')
						context[key] = {};
					
					SSP.Form.fillContext(absPath, localPath, context[key]);
				}
			}
			else
			{
				var value = SSP.Form.getValue(absPath);
				
				if(value instanceof Array)
					context[localPath] = value[0];
				else
					context[localPath] = value;
			}
		}
		,
		getId: function(name, field)
		{
			return name + '[' + field + ']';
		}
		,
		getLayoutId: function(name, field)
		{
			var path = SSP.Object.splitPath(name);
			
			path.push(field);
			path.unshift('input');
			
			return path.join('_');
		}
		,
		getInputsByName: function(name)
		{
			var inputs = SSP.DOM.byName(name);
			
			if(!inputs.length)
				inputs = SSP.DOM.byName(name + '[]');
			
			return inputs;
		}
		,
		findFieldLayout: function(name, field)
		{
			var id = SSP.Form.getId(name, field);
			var inputs = SSP.Form.getInputsByName(id);
			var input = SSP.DOM.byId(id);
			
			if(!inputs.length && input)
				inputs = [input];
			
			if(inputs.length)
				for(var i = 0; i < inputs.length; i++)
				{
					var layout = inputs[i].parentNode;
					
					do
					{
						if(layout.tagName === 'DIV' && SSP.DOM.hasClass(layout, 'input'))
							break;
						
						layout = layout.parentNode;
					}
					while(layout);
					
					return layout;
				}
			else
			{
				id = SSP.Object.splitPath(id);
				id.unshift('input');
				var layout = SSP.DOM.byId(id.join('_'));
				
				if(layout)
					return layout;
			}
		}
		,
		hideDynamic: function(name, field)
		{
			var inputs = SSP.Form.getInputsByName(SSP.Form.getId(name, field));
			
			for(var i = 0; i < inputs.length; i++)
				inputs[i].disabled = true;
			
			var disableHidden = SSP.Form.dynamicShowIf[name]
							 && SSP.Form.dynamicShowIf[name][field]
							 && SSP.Form.dynamicShowIf[name][field].disablehidden;
			
			if(!disableHidden)
			{
				var layout = SSP.Form.findFieldLayout(name, field);
				
				if(layout)
				{
					layout.style.display = 'none';
					
					if(SSP.DOM.hasClass(layout, 'relation'))
					{
						var label = layout.previousElementSibling || layout.previousSibling;
						
						if(label && label.tagName === 'LABEL')
							label.style.display = 'none';
					}
				}
			}
			
			var id = SSP.Form.getId(name, field);
			
			if(SSP.Form.loadedEnums[name] && SSP.Form.loadedEnums[name][id])
				SSP.Form.clearLoadedEnum(id);
		}
		,
		showDynamic: function(name, field)
		{
			var inputs = SSP.Form.getInputsByName(SSP.Form.getId(name, field));
			
			for(var i = 0; i < inputs.length; i++)
				if(inputs[i].getAttribute('disabled-explicit') === null)
					inputs[i].disabled = false;
			
			var disableHidden = SSP.Form.dynamicShowIf[name]
							 && SSP.Form.dynamicShowIf[name][field]
							 && SSP.Form.dynamicShowIf[name][field].disablehidden;
			
			if(!disableHidden)
			{
				var layout = SSP.Form.findFieldLayout(name, field);
				
				if(layout)
				{
					layout.style.display = '';
					
					if(SSP.DOM.hasClass(layout, 'relation'))
					{
						var label = layout.previousElementSibling || layout.previousSibling;
						
						if(label && label.tagName === 'LABEL')
							label.style.display = '';
					}
				}
			}
			
			var id = SSP.Form.getId(name, field);
			
			if(SSP.Form.loadedEnums[name] && SSP.Form.loadedEnums[name][id])
				SSP.Form.loadEnum(name, id, SSP.Form.loadedEnums[name][id]);
		}
		,
		resultDynamic: function(name, field, value)
		{
			var inputs = SSP.Form.getInputsByName(SSP.Form.getId(name, field));
			
			for(var i = 0; i < inputs.length; i++)
				inputs[i].value = typeof value === 'undefined' || value === null || isNaN(value)
								? ''
								: value;
		}
		,
		loadedEnums: {}
		,
		initLoadedEnum: function(name, field, url)
		{
			if(!SSP.Form.loadedEnums[name])
				SSP.Form.loadedEnums[name] = {};
			
			SSP.Form.loadedEnums[name][field] = url;
			
			SSP.Widget(field).addClass('w');
		}
		,
		loadEnum: function(name, field, url)
		{
			url = SSP.Form.calcString(name, url);
			
			var widget = SSP.Widget(field);
			
			if(widget.node.getAttribute('src') !== url)
			{
				widget.indicate(true);
				widget.node.setAttribute('src', url);
				
				SSP.Bus.request(
					url,
					function(data)
					{
						if(widget.node.getAttribute('src') !== url)
							return;
						
						var isSelect = widget.node.tagName === 'SELECT';
						var selected = widget.getData('selected');
						
						if(!isSelect)
							var style = widget.getData('style');
						
						var options = [];
						
						if(data instanceof Array)
						{
							var keys = [];
							
							for(var i = 0; i < data.length; i++)
								keys.push(i);
						}
						else
							var keys = Object.keys(data);
						
						for(var i = 0; i < keys.length; i++)
						{
							var key = keys[i];
							
							if(data[key]
							&& typeof data[key] === 'object'
							&& (typeof data[key].id === 'undefined' || typeof data[key].id === 'object' && data[key].id))
							{
								var hasOptgroup = true;
								var optgroupKey = key;
								var optgroup = data[key];
							}
							else
							{
								var hasOptgroup = false;
								var optgroupKey = null;
								var optgroup = {};
								optgroup[key] = data[key];
							}
							
							var optgroupKeys = Object.keys(optgroup);
							
							for(var j = 0; j < optgroupKeys.length; j++)
							{
								var k = optgroupKeys[j];
								
								if(!isSelect)
									var optionStyle = style;
								
								var isOptgroup = k === '' && hasOptgroup;
								
								if(optgroup[k] && typeof optgroup[k] === 'object')
								{
									var id = optgroup[k].id;
									var value = optgroup[k].value;
									
									if(isOptgroup)
									{
										id = optgroupKey;
										var checked = true;
										
										for(var n = 1; n < optgroupKeys.length; n++)
											if(optgroup[optgroupKeys[n]].id !== selected
											&& !optgroup[optgroupKeys[n]].selected)
											{
												checked = false;
												break;
											}
									}
									else
									{
										var checked = selected === id || optgroup[k].selected;
										
										if(!isSelect && optgroup[k].style)
											optionStyle = optgroup[k].style;
									}
								}
								else
								{
									var id = k;
									var value = optgroup[k];
									var checked = selected === id;
									
									if(isOptgroup)
									{
										id = optgroupKey;
										var checked = true;
										
										for(var n = 1; n < optgroupKeys.length; n++)
											if(optgroupKeys[n] !== selected)
											{
												checked = false;
												break;
											}
									}
									else
										var checked = selected === id;
								}
								
								if(isSelect)
								{
									var option = '';
									option += '<option value="' + SSP.String.escapeHtml(id) + '"' + (checked ? ' selected' : '') + (id === '' ? ' class="notvalue"' : '') + '>';
									option += SSP.String.escapeHtml(value);
									option += '</option>';
								}
								else
								{
									var option = '';
									
									if(isOptgroup)
										option += '<span class="optgroup_header">';
									else if(optgroupKey)
										option += '<span class="optgroup_value">';
									
									option += '<label class="wrapper-label">';
									option += '<input type="' + optionStyle + '" id="' + field + '[' + SSP.String.escapeHtml(id) + ']' + '"'
											+ (!isOptgroup ? ' name="' + field + (optionStyle !== 'radio' ? '[]' : '') + '" value="' + SSP.String.escapeHtml(id) + '"' : '')
											+ (optgroupKey ? ' data-optgroup="' + optgroupKey + '"' : '')
											+ (checked ? ' checked' : '')
											+ '>';
									option += '<span class="' + optionStyle + '-img"></span>';
									option += '</label>';
									
									option += '<label for="' + field + '[' + SSP.String.escapeHtml(id) + ']">';
									option += SSP.String.escapeHtml(value);
									option += '</label>';
									
									if(isOptgroup || optgroupKey)
										option += '</span>';
								}
								
								options.push(option);
							}
						}
						
						widget.node.setAttribute('src', null);
						widget.reload(url, options.join(isSelect ? '' : '<br>'));
						
						var container = SSP.DOM.byId('input_' + SSP.Object.splitPath(field).join('_'));
						
						if(options.length)
						{
							widget.node.disabled = false;
							SSP.DOM.removeClass(container, 'empty');
						}
						else
							SSP.DOM.addClass(container, 'empty');
						
						SSP.Form.recalcDynamic(field);
					}
				);
			}
		}
		,
		clearLoadedEnum: function(field)
		{
			SSP.Widget(field).src(null);
			SSP.Widget(field).html('');
		}
		,
		calcString: function(name, string, context)
		{
			var matches;
			var rx = /\{([^\}]+)\}/g;
			var result = [];
			var end = 0;
			var start;
			var skipped = false;
			
			while((matches = rx.exec(string)) !== null)
			{
				start = rx.lastIndex - matches[0].length;
				
				result.push(string.substr(end, start - end));
				
				var localId = matches[1].toLowerCase();
				var globalId = SSP.Form.getId(name, localId);
				
				if(context && typeof context[localId] !== 'undefined' && !(context[localId] instanceof Array))
					result.push(context[localId]);
				else if(SSP.DOM.byName(globalId)[0])
					result.push(SSP.Form.value(globalId));
				else
				{
					result.push(matches[0]);
					skipped = true;
				}
				
				end = rx.lastIndex;
			}
			
			result.push(string.substr(end));
			
			string = result.join('');
			
			if(skipped)
			{
				var matches;
				var rx = /(\?|&)([^&=]+)=\{([^\}]+)\}/g;
				var result = [];
				var end = 0;
				var start;
				var value;
				
				while((matches = rx.exec(string)) !== null)
				{
					start = rx.lastIndex - matches[0].length;
					
					result.push(string.substr(end, start - end));
					
					var localId = matches[3].toLowerCase();
					var globalId = SSP.Form.getId(name, localId) + '[]';
					
					if(context && typeof context[localId] !== 'undefined' && context[localId] instanceof Array)
						value = context[localId];
					else if(SSP.DOM.byName(globalId)[0])
						value = SSP.Form.value(globalId);
					else
						value = undefined;
					
					if(typeof value === 'undefined')
						result.push(matches[0]);
					else
					{
						result.push(matches[1]);
						
						for(var i = 0; i < value.length; i++)
						{
							result.push(matches[2] + '[]=' + value[i]);
							
							if(i < value.length - 1)
								result.push('&');
						}
					}
					
					end = rx.lastIndex;
				}
				
				result.push(string.substr(end));
				
				return result.join('');
			}
			else
				return string;
		}
		,
		setFilePreview: function(name)
		{
			var input = SSP.DOM.byId(name);
			var preview = SSP.DOM.byId(name+'_preview');
			var preview_frame = SSP.DOM.byId(name+'_preview_frame');
			var preview_info = SSP.DOM.byId(name+'_preview_info');
			if(!input || input.type !== 'file' || !preview || !preview_frame || !preview_info)
				return;
			
			SSP.DOM.listen(input, 'change', function()
			{
				try {
					if(this.files.length !== 1)
						return;
					
					var file = this.files[0];
					var mime = file.type.split('/');
					if(mime[0] !== 'text')
						return;
					
					preview_frame.src = '/img/loading.gif';
					preview.style.display = 'block';
				
					var reader = new FileReader();
					reader.onload = function(e)
					{
						var lines = reader.result.match(/\r/g).length+1;
						preview_info.innerHTML = 'байт: '+file.size+', строк: '+lines;
						preview_frame.src = 'data:'+mime.join('/')+';base64,'+btoa(reader.result);
					}
					reader.readAsBinaryString(file);
				}
				catch(e) {}
			});
		}
		,
		initSpoiledEnum: function(name, field, label)
		{
			var spoiledEnum = SSP.DOM.byId('input_' + name + '_' + field);
			
			var spoiler = SSP.DOM.create('A', {href: 'javascript:', className: 'spoiler'});
			spoiler.innerText = label;
			spoiledEnum.appendChild(spoiler);
			SSP.DOM.listen(spoiler, 'click', SSP.Form.spoilEnum);
			
			var inputs = spoiledEnum.getElementsByTagName('INPUT');
			
			for(var i = 0; i < inputs.length; i++)
				SSP.DOM.listen(inputs[i], 'change', SSP.Form.handleSpoiledEnumChange);
		}
		,
		spoilEnum: function(event)
		{
			var currentEnum = event.target;
			
			while(!SSP.DOM.hasClass(currentEnum, 'enum'))
				currentEnum = currentEnum.parentNode;
			
			SSP.DOM.removeClass(currentEnum, 'changed');
			
			var inputs = currentEnum.getElementsByTagName('INPUT');
			
			for(var i = 0; i < inputs.length; i++)
				if(inputs[i].checked)
				{
					inputs[i].checked = false;
					SSP.DOM.trigger(inputs[i], 'change');
				}
		}
		,
		handleSpoiledEnumChange: function(event)
		{
			if(event.target.checked)
			{
				var currentEnum = event.target;
				
				while(!SSP.DOM.hasClass(currentEnum, 'enum'))
					currentEnum = currentEnum.parentNode;
				
				SSP.DOM.addClass(currentEnum, 'changed');
				
				var enumValues = SSP.DOM.bySelector('#' + currentEnum.id + ' .enum_value');
				
				for(var n = 0; n < enumValues.length; n++)
					SSP.DOM.removeClass(enumValues[n], 'selected');
				
				var enumValue = event.target;
				
				while(!SSP.DOM.hasClass(enumValue, 'enum_value'))
					enumValue = enumValue.parentNode;
				
				SSP.DOM.addClass(enumValue, 'selected');
			}
		}
	};
	
	SSP.Formular = function()
	{
		
	}
	;
	SSP.Formular.prototype.sum = function(path)
	{
		var result = 0.;
		var values = SSP.Object.byPath(path, this, false, true);
		
		for(var i = 0; i < values.length; i++)
		{
			if(typeof values[i] === 'string')
				values[i] = SSP.Number.parseFloat(values[i]);
			
			result += values[i];
		}
		
		if(typeof result === 'string')
			result = SSP.Number.parseFloat(result.replace(/^0+/, '').replace(/^\./, '0.').replace(/\.0*$/, ''));
		
		return result;
	}
	;
	SSP.Formular.prototype.round = function(value, precision)
	{
		if(typeof value === 'string')
			value = SSP.Number.parseFloat(value);
		
		if(typeof value === 'number'
		&& value !== Number.POSITIVE_INFINITY
		&& value !== Number.NEGATIVE_INFINITY)
			return value.toFixed(precision).replace(/\.0*$/, '');
	}
	;
	
	SSP.Analytics =
	{
		displayed: {}
		,
		handleTableClick: function(event)
		{
			SSP.DOM.fixEvent(event);
			
			if(event.isLeft)
			{
				var target = event.target;
				
				while(target.parentNode
				&& target.tagName !== 'TR'
				&& target.tagName !== 'TABLE'
				&& target.tagName !== 'BODY')
					target = target.parentNode;
				
				if(target.tagName === 'TR' && SSP.DOM.hasClass(target, 'analytics_header'))
				{
					var next = target.nextElementSibling || target.nextSibling;
					
					var classes = next.className.split(' ');
					var className;
					
					for(var i = 0; i < classes.length; i++)
						if(classes[i].indexOf('analytics_text_') === 0)
						{
							className = classes[i];
							break;
						}
					
					var cssId = 'css_' + className;
					
					if(!SSP.Analytics.displayed[className])
					{
						var css = '.' + className + '{display:table-row!important}';
						
						SSP.DOM.addInlineCss(css, document, cssId);
						SSP.Analytics.displayed[className] = true;
					}
					else
					{
						SSP.DOM.removeInlineCss(document, cssId);
						SSP.Analytics.displayed[className] = false;
					}
				}
			}
			
			return true;
		}
	}
	;
	
	SSP.String =
	{
		TRIM_BOTH:	0,
		TRIM_LEFT:	1,
		TRIM_RIGHT:	2,
		
		toUrl: (function(url, data, extension)
		{
			if(typeof data !== 'undefined' || typeof extension !== 'undefined')
			{
				var a = SSP.String.parseUrl(url);
				
				if(a.search)
					var search = a.search.toString() + '&';
				else
					var search = '?';
				
				if(typeof data !== 'undefined')
					search += this.toUrlComponent(data);
				
				a.search = search;
				
				if(typeof extension !== 'undefined')
				{
					extension = extension.split('.').join('');
					
					var pathname = a.pathname.split('.');
					
					if(pathname.length > 1)
						pathname[pathname.length - 1] = extension;
					else
						pathname.push(extension);
					
					a.pathname = pathname.join('.');
				}
				
				return a.toString();
			}
			else
				return this.encodeUrl(url);
		})
		,
		toUrlComponent: (function(value, key, nested)
		{
			var url = [];
			
			if(typeof key === 'number')
				;
			else if(typeof key !== 'undefined')
				key = encodeURIComponent(key);
			else
				key = false;
			
			if(typeof value === 'object')
			{
				nested = nested ? nested + '[' + (typeof key === 'number' ? '' : key) + ']' : key;
				
				if(value instanceof Array)
				{
					for(var key = 0; key < value.length; key++)
					{
						var chunk = this.toUrlComponent(value[key], key, nested);
						
						if(chunk)
							url.push(chunk);
					}
				}
				else
				{
					for(var key in value)
					{
						var chunk = this.toUrlComponent(value[key], key, nested);
						
						if(chunk)
							url.push(chunk);
					}
				}
			}
			else
			{
				if(typeof key === 'string'
				|| typeof key === 'number')
				{
					if(nested)
						key = nested + '[' + (typeof key === 'number' ? '' : key) + ']';
					
					url.push(key + '=' + encodeURIComponent(value));
				}
				else if(value)
					url.push(encodeURIComponent(value));
			}
			
			return url.join('&');
		})
		,
		formatUrl: (function(location)
		{
			if(typeof location === 'string')
			{
				var a = SSP.DOM.create('A');
				a.href = location;
				location = a;
			}
			
			return (typeof location.protocol !== 'undefined' ? location.protocol + '//' : '')
				 + (typeof location.hostname !== 'undefined' ? location.hostname : '')
				 + (location.port && (location.protocol === 'http:' && location.port !== 80 || location.protocol === 'https:' && location.port !== 443) ? ':' + location.port : '')
				 + SSP.String.decodeURIComponent(location.pathname).replace(/%/g, '%25')
				 + (location.search && location.search !== '?' ? '?' + SSP.String.trim(location.search, '?', SSP.String.TRIM_LEFT) : '')
				 + (location.hash && location.hash !== '#' ? (location.hash.charAt(0) !== '#' ? '#' : '') + SSP.String.encodeUrl(location.hash) : '');
		})
		,
		parseUrl: (function(value)
		{
			var url = {
				toString: function(){return SSP.String.formatUrl(this);}
			};
			
			if(typeof value === 'string')
			{
				var a = SSP.DOM.create('A');
				
				if(SSP.Browser.IE && !value.match(/^(http|https):/))
					value = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + value;
				
				var hash = value.split('#');
				hash.shift();
				hash = hash.length ? SSP.String.decodeURIComponent(hash.join('#')) : '';
				
				a.href = value;
				
				if(SSP.Browser.IE)
					try
					{
						var protocol = a.protocol;
					}
					catch(e)
					{
						a = SSP.DOM.create('A');
						a.href = value.replace(/%/g, '%25');
					}
			}
			else if(typeof value === 'object' && value !== null)
			{
				a = value;
				
				var hash = SSP.String.decodeURIComponent(value.hash);
				
				if(hash && hash.charAt(0) === '#')
					hash = hash.substr(1);
			}
			else
				return null;
			
			url.protocol	= a.protocol && a.protocol !== ':' ? a.protocol : undefined;
			url.hostname	= a.hostname;
			url.port		= a.port ? SSP.Number.parseInt(a.port) : undefined;
			url.pathname	= SSP.String.decodeURIComponent(a.pathname);
			url.search		= a.search;
			url.hash		= hash;
			
			if(url.pathname.charAt(0) !== '/')
				url.pathname = '/' + url.pathname;
			
			return url;
		})
		,
		parseStr: (function(value)
		{
			var values = {};
			
			if(value && value.charAt(0) === '?')
				value = value.substr(1);
			
			if(value)
			{
				var vars = value.split('&');
				var kv;
				var key;
				var sub;
				var fill;
				var path;
				var k;
				
				for(var i = 0; i < vars.length; i++)
				{
					kv = vars[i].split('=');
					key = SSP.String.fixSquareBrackets(kv.shift());
					value = SSP.String.decodeURIComponent(kv.join('=').replace(/\+/g, ' '));
					
					path = SSP.Object.splitPath(key);
					k = path.pop();
					fill = k ? SSP.Object.FILL_OBJECT : SSP.Object.FILL_ARRAY;
					sub = SSP.Object.byPath(path, values, fill);
					
					if(sub instanceof Array)
						sub.push(value);
					else
						sub[k] = value;
				}
			}
			
			return values;
		})
		,
		fixSquareBrackets: (function(value)
		{
			return value.replace(/%5B/g, '[').replace(/%5D/g, ']');
		})
		,
		encodeUrl: (function(value)
		{
			return SSP.String.fixSquareBrackets(encodeURI(decodeURIComponent(value)));
		})
		,
		fromUrl: (function(value)
		{
			return SSP.String.decodeURIComponent(value);
		})
		,
		random: function(length, style)
		{
			if(typeof length === 'undefined')
				length = 8;
			
			if(typeof style === 'undefined')
				return Math.floor(Math.random() * Math.pow(10, length - 1)).toString();
		}
		,
		escapeRegExp: function(string)
		{
			return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
		}
		,
		escapeHtml: (function(value)
		{
			switch(typeof value)
			{
				case 'number':
				{
					return value.toString();
				}
				break;
				case 'object':
				{
					if(!value)
						return '';
					else
						value = value.toString();
				}
				break;
				case 'function':
				case 'undefined':
				{
					return '';
				}
				break;
			}
			
			return value.replace(/&/g, '&amp;')
						.replace(/</g, '&lt;')
						.replace(/>/g, '&gt;')
						.replace(/"/g, '&quot;')
						.replace(/'/g, '&#039;');
		})
		,
		unescapeHtml: (function(value)
		{
			if(typeof value === 'string')
				return value.replace(/&amp;/g,	'&')
							.replace(/&lt;/g,	'<')
							.replace(/&gt;/g,	'>')
							.replace(/&quot;/g,	'"')
							.replace(/&#039;/g,	'\'');
			
			return value;
		})
		,
		getTextContent: (function(value)
		{
			var pre = SSP.DOM.create('PRE');
			pre.innerHTML = value;
			return pre.textContent || pre.innerText;
		})
		,
		stripTags: (function(string, allowed, leaveComments)
		{
			if(string)
			{
				if(!leaveComments)
					string = SSP.String.stripComments(string);
				
				if(typeof allowed === 'object' && allowed.length)
					var regexp = new RegExp('<(?!/?(?:' + allowed.join('|') + ')\\b)[^>]*>', 'gi');
				else
					var regexp = /<[^>]+>/g;
				
				string = string.replace(regexp, '');
			}
			
			return string;
		})
		,
		stripComments: (function(string)
		{
			return string.replace(/<!--.*?-->/g, '');
		})
		,
		interpolate: function(string, context, brackets)
		{
			if(!brackets)
				brackets = ['{', '}'];
			
			if(brackets instanceof Array)
			{
				var b1 = SSP.String.escapeRegExp(brackets[0]);
				var b2 = SSP.String.escapeRegExp(brackets[1]);
			}
			else if(typeof brackets === 'string')
			{
				brackets = SSP.String.escapeRegExp(brackets);
				var b1 = brackets;
				var b2 = brackets;
			}
			else
				throw new TypeError();
			
			var rx = new RegExp('(^|[^\\])' + b1 + '([^\s' + b1 + b2 + ']*?[^\\' + b1 + b2 + '])' + b2, 'g');
			
			if(SSP.String.interpolateContext && typeof SSP.String.interpolateContext === 'object')
				SSP.Object.merge(SSP.String.interpolateContext, context);
			else
				SSP.String.interpolateContext = context;
			
			string = string.replace(rx, SSP.String.interpolator);
			
			SSP.String.interpolateContext = undefined;
			
			return string;
		}
		,
		interpolateContext: undefined
		,
		interpolator: function(match, prefix, path, offset)
		{
			var value = SSP.Object.byPath(path, SSP.String.interpolateContext);
			
			switch(typeof value)
			{
				case 'object':
				{
					if(value)
						value = value.toString();
				}
				case 'undefined':
				{
					value = '';
				}
				break;
				case 'number':
				{
					value = value.toString();
				}
				break;
				case 'boolean':
				{
					value = value ? '1' : '0';
				}
				break;
				case 'function':
				{
					value = value.apply(context, path);
				}
				break;
			}
			
			return value;
		}
		,
		ltrim: (function(string, chars)
		{
			return this.trim(string, chars, this.TRIM_LEFT);
		})
		,
		rtrim: (function(string, chars)
		{
			return this.trim(string, chars, this.TRIM_RIGHT);
		})
		,
		trim: (function(string, chars, side)
		{
			string = string.toString();
			
			if(typeof side === 'undefined')
				side = this.TRIM_BOTH;
			
			if(typeof chars === 'undefined')
				chars = '[\\s]';
			else 
			{
				if(chars instanceof Array)
					chars = chars.join('');
				
				chars = '[' + this.escapeRegExp(chars) + ']';
			}
			
			if(string.match(new RegExp('^' + chars + '+$')))
				return '';
			else
				chars += '*';
			
			var regexp = '(.*?)';
			
			if(side === this.TRIM_BOTH
			|| side === this.TRIM_LEFT)
				regexp = chars + regexp;
			
			if(side === this.TRIM_BOTH
			|| side === this.TRIM_RIGHT)
				regexp += chars;
			
			return string.replace(new RegExp('^' + regexp + '$'), '$1');
		})
		,
		trimHash: (function(hash)
		{
			if(typeof hash === 'undefined')
				hash = SSP.String.decodeURIComponent(window.location.hash);
			
			if(hash.charAt(0) === '#')
				hash = hash.substr(1);
			
			hash = hash.split('#');
			
			return hash[0];
		})
		,
		ucfirst: (function(string)
		{
			return string.charAt(0).toUpperCase() + string.substr(1);
		})
		,
		isNumeric: (function(string)
		{
			if(typeof string === 'number')
				return true;
			else if(typeof string === 'string')
				return string.match(/^[0-9]+(?:\.[0-9]*)$/);
			else
				return false;
		})
		,
		decodeURIComponentOriginal: window.decodeURIComponent
		,
		decodeURIComponent: (function(string)
		{
			try
			{
				var decoded = SSP.String.decodeURIComponentOriginal(string);
				
				if(typeof decoded === 'string' && !decoded.match(/[\uFFFD-\uFFFF]/))
					return decoded;
			}
			catch(e)
			{
				
			}
			
			var charset = SSP.DOM.document.characterSet || SSP.DOM.document.charset;
			
			if(charset && charset.toUpperCase() !== 'UTF-8')
			{
				try
				{
					return SSP.String.iconv(charset, 'UTF-8', unescape(string));
				}
				catch(ee)
				{
					return unescape(string);
				}
			}
			else
				return unescape(string);
		})
		,
		iconv: (function(from, to, string)
		{
			from = from.toUpperCase();
			to = to.toUpperCase();
			
			if(to === 'UTF-8')
			{
				if(codepoints[from])
				{
					var points = [];
					var code;
					var length = string.length;
					
					for(var i = 0; i < length; i++)
					{
						code = string.charCodeAt(i);
						
						if(typeof codepoints[from][code] === 'number')
							points.push(codepoints[from][code]);
						else
							points.push(code);
					}
					
					return String.fromCharCode.apply(null, points);
				}
				else
					throw new SSP.Error('Unsupported charset ' + from);
			}
			else
			{
				if(codepoints[to])
				{
					
				}
				else
					throw new SSP.Error('Unsupported charset ' + to);
			}
		})
		,
		getLang: (function()
		{
			return document.documentElement.lang.split('-')[0];
		})
		,
		urlBase64ToUint8Array: (function(base64String)
		{
			var padding = '='.repeat((4 - base64String.length % 4) % 4);
			var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
			
			var rawData = window.atob(base64);
			var outputArray = new Uint8Array(rawData.length);
			
			for(var i = 0; i < rawData.length; ++i)
				outputArray[i] = rawData.charCodeAt(i);
			
			return outputArray;
		})
	};
	
	window.decodeURIComponent = SSP.String.decodeURIComponent;
	
	var codepoints =
	{
		'WINDOWS-1251':
		{
			0x80: 0x402, // Ђ
			0x81: 0x403, // Ѓ
			0x82: 0x201A,// ‚
			0x83: 0x453, // ѓ
			0x84: 0x201E,// „
			0x85: 0x2026,// …
			0x86: 0x2020,// †
			0x87: 0x2021,// ‡
			0x88: 0x20AC,// €
			0x89: 0x2030,// ‰
			0x8A: 0x409, // Љ
			0x8B: 0x2039,// ‹
			0x8C: 0x40A, // Њ
			0x8D: 0x40C, // Ќ
			0x8E: 0x40B, // Ћ
			0x8F: 0x40F, // Џ
			
			0x90: 0x452, // ђ
			0x91: 0x2018,// ‘
			0x92: 0x2019,// ’
			0x93: 0x201C,// “
			0x94: 0x201D,// ”
			0x95: 0x2022,// •
			0x96: 0x2013,// –
			0x97: 0x2014,// —
			//0x98:
			0x99: 0x2122,// ™
			0x9A: 0x459, // љ
			0x9B: 0x203A,// ›
			0x9C: 0x45A, // њ
			0x9D: 0x45C, // ќ
			0x9E: 0x45B, // ћ
			0x9F: 0x45F, // џ
			
			0xA0: 0xA0,  //  
			0xA1: 0x40E, // Ў
			0xA2: 0x45E, // ў
			0xA3: 0x408, // Ј
			0xA4: 0xA4,  // ¤
			0xA5: 0x490, // Ґ
			0xA6: 0xA6,  // ¦
			0xA7: 0xA7,  // §
			0xA8: 0x401, // Ё
			0xA9: 0xA9,  // ©
			0xAA: 0x404, // Є
			0xAB: 0xAB,  // «
			0xAC: 0xAC,  // ¬
			0xAD: 0xAD,  // 
			0xAE: 0xAE,  // ®
			0xAF: 0x407, // Ї
			
			0xB0: 0xB0,  // ° 
			0xB1: 0xB1,  // ±
			0xB2: 0x406, // І
			0xB3: 0x456, // і
			0xB4: 0x491, // ґ
			0xB5: 0xB5,  // µ
			0xB6: 0xB6,  // ¦
			0xB7: 0xB7,  // ·
			0xB8: 0x451, // ё
			0xB9: 0x2116,// №
			0xBA: 0x454, // є
			0xBB: 0xBB,  // »
			0xBC: 0x458, // ј
			0xBD: 0x405, // Ѕ
			0xBE: 0x455, // ѕ
			0xBF: 0x457  // ї
		}
	};
	
	for(var i = 0x410; i <= 0x44F; i++)
		codepoints['WINDOWS-1251'][i - 0x350] = i; // А-Яа-я
	
	SSP.Number =
	{
		parseInt: (function(value, radix)
		{
			if(typeof radix === 'undefined')
				radix = 10;
			
			return parseInt(value, radix) || 0;
		})
		,
		parseFloat: (function(value, precision)
		{
			if(precision === '' || precision === null || typeof precision === 'undefined')
				precision = void 0;
			else if(typeof precision !== 'number')
				precision = parseInt(precision, 10);
			
			if(value !== null && typeof value !== 'undefined')
			{
				if(typeof value === 'string')
					value = value.replace(',', '.');
				
				value = parseFloat(value);
				
				if(typeof precision === 'number' && !isNaN(precision))
					value = value.toFixed(precision).replace(/\.0*$/, '');
				
				return value;
			}
		})
	};
	
	SSP.Date =
	{
		amount:
		{
			year: 60*60*24*30*365,
			month: 60*60*24*30,
			day: 60*60*24,
			hour: 60*60,
			minute: 60,
			second: 1
		}
		,
		unixtime: function()
		{
			return Math.round(SSP.Date.unixmsec() / 1000);
		}
		,
		unixmsec: Date.now || function()
		{
			return new Date().getTime();
		}
		,
		formatAmount: function(seconds, lang)
		{
			lang = lang || SSP.String.getLang();
			
			var formatted = [];
			var amount = SSP.Date.getAmount(seconds);
			
			for(var part in amount)
				formatted.push(amount[part] + ' ' + SSP.Date.getCase(part, amount[part], lang));
			
			return formatted.join(' ');
		}
		,
		getAmount: function(seconds, part)
		{
			if(typeof part === 'undefined')
			{
				var amount = {};
				
				for(var part in SSP.Date.amount)
				{
					amount[part] = Math.floor(seconds / SSP.Date.amount[part]);
					
					if(amount[part])
						seconds -= amount[part] * SSP.Date.amount[part];
				}
				
				for(var part in amount)
				{
					if(amount[part])
						break;
					else
						delete amount[part];
				}
				
				return amount;
			}
			else
				return Math.floor(seconds / SSP.Date.amount[part]);
		}
		,
		getSeconds: function(amount, part)
		{
			return SSP.Date.amount[part] * amount;
		}
		,
		getCase: function(key, num, lang)
		{
			num = Math.abs(num);
			var digit = num % 10;
			lang = lang || SSP.String.getLang();
			
			switch(lang)
			{
				case 'ru':
				{
					var sub;
					
					if(num > 10 && num < 15)
						sub = 2;
					else if(digit === 1)
						sub = 0;
					else if(digit < 5 && digit !== 0)
						sub = 1;
					else
						sub = 2;
					
					return SSP.Date.locales[lang][key + sub.toString()];
				}
				break;
				default:
				{
					return digit === 1 ? key : key + 's';
				}
			}
		}
		,
		locales:
		{
			ru:
			{
				year0:	'год',
				year1:	'года',
				year2:	'лет',
				month0:	'месяц',
				month1:	'месяца',
				month2:	'месяцев',
				day0:	'день',
				day1:	'дня',
				day2:	'дней',
				hour0:	'час',
				hour1:	'часа',
				hour2:	'часов',
				minute0:'минута',
				minute1:'минуты',
				minute2:'минут',
				second0:'секунда',
				second1:'секунды',
				second2:'секунд'
			}
		}
	};
	
	SSP.Loader =
	{
		base: '/js/',
		aliases: {},
		uid: 0,
		deps: {},
		
		register: function(module, path)
		{
			path = path.split('.');
			
			if(path[0].indexOf('/') === -1 && path[path.length - 1] === 'js')
				path.pop();
			
			SSP.Loader.aliases[module] = path.join('.');
		}
		,
		path: function(module)
		{
			if(typeof SSP.Loader.aliases[module] !== 'undefined')
				return SSP.Loader.aliases[module] + (SSP.Loader.aliases[module].indexOf('.js') === -1 ? '.js' : '');
			
			var path = module.toLowerCase() + '.js';
			
			if(module.indexOf('/') === -1)
				path = SSP.Loader.base + path;
			
			return path;
		}
		,
		require: function(alias, module, callback)
		{
			if(!callback)
			{
				callback = module;
				module = alias;
				alias = undefined;
			}
			
			if(!module)
				return;
			
			if(!(module instanceof Array))
				module = [module];
			
			var modules = [];
			
			var load = false;
			var object;
			
			for(var i = 0; i < module.length; i++)
			{
				object = SSP.Loader.check(module[i]);
				
				if(!object)
				{
					load = true;
					break;
				}
				else
					modules.push(object);
			}
			
			if(load)
			{
				SSP.Loader.load(alias, module, callback);
				
				return null;
			}
			else
			{
				object = callback.apply(window, modules);
				
				if(alias)
					window[alias] = object;
				
				return object;
			}
		}
		,
		load: function(alias, module, callback)
		{
			var uid = SSP.Loader.uid++;
			SSP.Loader.deps[uid] = {alias: alias, module: module, wait: module.length, callback: callback};
			
			for(var i = 0; i < module.length; i++)
				if(!SSP.Loader.check(module[i]))
				{
					var script = SSP.DOM.script(SSP.Loader.path(module[i]));
					SSP.DOM.listen(script, 'load', (function(){return function()
					{
						SSP.Loader.hook(uid);
					};
					})(uid));
				}
		}
		,
		check: function(module)
		{
			return SSP.Object.byPath(module);
		}
		,
		hook: function(uid)
		{
			if(SSP.Loader.deps[uid].wait)
				SSP.Loader.deps[uid].wait--;
			
			if(!SSP.Loader.deps[uid].wait)
			{
				var modules = [];
				var loaded = true;
				var object;
				
				for(var i = 0; i < SSP.Loader.deps[uid].module.length; i++)
				{
					object = SSP.Object.byPath(SSP.Loader.deps[uid].module[i]);
					
					if(object)
						modules.push(object);
					else
					{
						loaded = false;
						break;
					}
				}
				
				if(loaded)
				{
					object = SSP.Loader.deps[uid].callback.apply(window, modules);
					
					if(SSP.Loader.deps[uid].alias)
						window[SSP.Loader.deps[uid].alias] = object;
					
					delete SSP.Loader.deps[uid];
					
					for(uid in SSP.Loader.deps)
						if(!SSP.Loader.deps[uid].wait)
							SSP.Loader.hook(uid);
				}
			}
		}
	};
	
	window.require = window.define = SSP.Loader.require;
	window.register = SSP.Loader.register;
	
	SSP.Browser =
	{
		IE: false
		,Edge: false
		,Firefox: false
		,Chrome: false
		,Opera: false
		,OperaWebkit: false
		,Yandex: false
		,Safari: false
		,Android: false
		,IOS: false
		,Unknown: false
		,supports:
		{
			hashchange: false
		}
		,name: undefined
		,version: undefined
	};
	
	var userAgent = navigator.userAgent || navigator.appVersion;
	
	var matches = userAgent.match(/(MSIE|Firefox|Chrome|Opera|Version|Safari)[ /]([\d]{1,2})/);
	
	if(matches)
	{
		var version = SSP.Number.parseInt(matches[2]);
		
		if(matches[1] === 'MSIE')
			SSP.Browser.IE = version;
		else if(matches[1] === 'Version')
		{
			if(version > 20)
				version = SSP.Number.parseInt(version.toString().charAt(0));
			
			SSP.Browser.Safari = version;
		}
		else if(matches[1] === 'Opera')
		{
			var operaMatches = userAgent.match(/Version\/([\d]{1,2})/);
			
			if(operaMatches)
				SSP.Browser.Opera = SSP.Number.parseInt(operaMatches[1]);
			else
				SSP.Browser.Opera = version;
		}
		else if(matches[1] === 'Chrome')
		{
			var edgeMatches = userAgent.match(/Edge\/([\d]{1,2})/);
			
			if(edgeMatches)
				SSP.Browser.Edge = SSP.Number.parseInt(edgeMatches[1]);
			else
				SSP.Browser.Chrome = version;
		}
		else if(typeof SSP.Browser[matches[1]] !== 'undefined')
			SSP.Browser[matches[1]] = version;
		else if(userAgent.indexOf('Trident') !== -1 /*@cc_on || true @*/)
		{
			try
			{
				document.documentMode = '';
				SSP.Browser.Unknown = true;
			}
			catch(e)
			{
				SSP.Browser.IE = 8;
			}
		}
		else
			SSP.Browser.Unknown = true;
		
		if(SSP.Browser.Chrome)
		{
			var matches = userAgent.match(/\bOPR\/(\d+)/);
			
			if(matches)
				SSP.Browser.OperaWebkit = SSP.Number.parseInt(matches[1]);
			
			var matches = userAgent.match(/\bYaBrowser\/(\d+)/);
			
			if(matches)
				SSP.Browser.Yandex = SSP.Number.parseInt(matches[1]);
		}
	}
	
	var matches = userAgent.match(/(iPad|iPhone) OS ([\d]+)/) || userAgent.match(/(Android|iPad|iPhone)[ ]?([\d]+)?/);
	
	if(matches)
	{
		SSP.Browser.Unknown = false;
		
		if(matches[1] === 'Android')
			SSP.Browser.Android = SSP.Number.parseInt(matches[2]) || true;
		else if(SSP.Browser.Safari)
			SSP.Browser.IOS = SSP.Browser.Safari;
		else
			SSP.Browser.IOS = SSP.Browser.Safari = SSP.Number.parseInt(matches[2]) || true;
	}
	
	/*@cc_on if(false){ @*/
		if(SSP.Browser.IE)
		{
			SSP.Browser.Unknown = true;
			SSP.Browser.IE = false;
		}
	/*@cc_on }else{} @*/
	
	for(var name in SSP.Browser)
		if(typeof SSP.Browser[name] === 'number')
		{
			SSP.Browser.name = name;
			SSP.Browser.version = SSP.Browser[name];
			break;
		}
	
	if('onhashchange' in window)
	{
		if(!SSP.Browser.IE
		|| SSP.Browser.IE >= 8)
			SSP.Browser.supports.hashchange = true;
	}
	
	if(window.matchMedia
	&& window.matchMedia('(hover: none)').matches)
		SSP.Browser.hasTouchScreen = true;
	else
		SSP.Browser.hasTouchScreen = false;
	
	SSP.Browser.hasKeyboard = !SSP.Browser.hasTouchScreen && !SSP.Browser.Android && !SSP.Browser.IOS;
	
	SSP.Object.evalFunc = function(code, that)
	{
		var func = new Function(code);
		
		return that ? func.call(that) : func();
	};
	
	SSP.Browser.supports.faviconchange = (SSP.Browser.Firefox || SSP.Browser.Chrome || SSP.Browser.Opera) && !SSP.Browser.Android && !SSP.Browser.IOS;
	
	if(!window.console)
		window.console = {log: function(){}};
	
	if(window.deferred)
	{
		window.deferred.unshift(function()
		{
			try
			{
				SSP.DOM.simulateElementChildren(window);
			}
			catch(e){}
			try
			{
				SSP.DOM.simulateElementParentElement(window);
			}
			catch(e){}
			
			if(document.activeElement == document.body)
				SSP.DOM.focus(SSP.DOM.byClass('autofocus')[0]);
			var autoreset = SSP.DOM.byClass('autoreset');
			SSP.DOM.walk(autoreset, SSP.DOM.reset);
			var emulate = SSP.DOM.byClass('emulate');
			SSP.DOM.walk(emulate, SSP.Form.initEmulated);
			var form = SSP.DOM.byClass('form');
			SSP.DOM.walk(form, SSP.Form.syncSelects);
		});
		window.deferred.push(function()
		{
			var prerender = SSP.DOM.byClass('prerender');
			SSP.DOM.walk(prerender, SSP.DOM.prerenderUrlListenMouseOver);
		});
	}
	
	if(typeof window.SSP === 'undefined')
	{
		if(window.errors)
		{
			var onerror = window.onerror;
			
			window.onerror = (function(){
				return function(error)
				{
					try
					{
						if(window.errors)
							window.errors.push(error);
					}
					catch(e){}
					
					if(onerror)
						onerror.call(window, error);
				};
			})(onerror);
		}
	
		window.SSP = SSP;
	}
	
	var isTop = window == window.top;
	var init = false;
	
	if(isTop)
		init = true;
	else
		try
		{
			if(window.location.protocol === window.top.location.protocol
			&& window.location.hostname === window.top.location.hostname)
				init = false;
			else
				init = true;
		}
		catch(e)
		{
			init = true;
		}
	
	if(init)
		setTimeout(
			(function()
			{
				if(document.readyState === 'interactive' || document.readyState === 'loaded' || document.readyState === 'complete')
					SSP.Bus.runDeferred();
				else
				{
					var runDeferred = function()
					{
						setTimeout(SSP.Bus.runDeferred, 0);
					};
					
					SSP.DOM.listen(document, 'DOMContentLoaded', runDeferred);
					SSP.DOM.listen(window, 'load', runDeferred);
				}
			}),
			0
		);
	
	return SSP;
}
)(SSP || null, window);
(function(SSP, window)
{
	'use strict';
	
	SSP.Scroll = SSP.Scroll || {};
	var Scroll = SSP.Scroll;
	
	Scroll.StyleClass = {
		bar_v:		'thin_scroll_bar_v',
		thumb_v:	'thin_scroll_thumb_v',
		bar_h:		'thin_scroll_bar_h',
		thumb_h:	'thin_scroll_thumb_h',
		corner:		'thin_scroll_corner',
		bar_tracked:'thin_scroll_bar_tracked'
	};
	
	Scroll.Prop = {
		v: {
			event: 'clientY',
			style: 'top',
			transform: function(pos)
			{
				return 'translate(0px, ' + pos + ')';
			},
			getOffset: function(element)
			{
				if(Scroll.supportsTransform)
				{
					var transform = element.style.transform;
					
					if(transform)
					{
						var matches = transform.match(Scroll.transformRx);
						
						if(matches)
							return parseFloat(matches[2], 10) || 0;
					}
					
					return 0;
				}
				else
					return element.offsetTop;
			}
		},
		h: {
			event: 'clientX',
			style: 'left',
			transform: function(pos)
			{
				return 'translate(' + pos + ', 0px)';
			},
			getOffset: function(element)
			{
				if(Scroll.supportsTransform)
				{
					var transform = element.style.transform;
					
					if(transform)
					{
						var matches = transform.match(Scroll.transformRx);
						
						if(matches)
							return parseFloat(matches[1], 10) || 0;
					}
					
					return 0;
				}
				else
					return element.offsetLeft;
			}
		}
	};
	
	Scroll.defaultBarWidth = 17;
	
	Scroll.frameBubblingHandlers = [];
	
	try
	{
		Scroll.supportsTransform = window.CSS ? CSS.supports('transform: translate(0px, 0px)') : false;
	}
	catch(e)
	{
		Scroll.supportsTransform = false;
	}
	
	Scroll.transformRx = /^translate\(([\d\.]+)px(?:, ([\d\.]+)px)?\)$/;
	
	Scroll.relayEvent = (function()
	{
		if(typeof MouseEvent === 'function')
			return function(event, target, rect)
			{
				var params = {
					bubbles:	event.bubbles		|| true,
					cancelable:	event.cancelable	|| false,
					view:		event.view,
					detail:		event.detail		|| 0,
					screenX:	event.screenX,
					screenY:	event.screenY,
					clientX:	event.clientX,
					clientY:	event.clientY,
					ctrlKey:	event.ctrlKey,
					altKey:		event.altKey,
					shiftKey:	event.shiftKey,
					metaKey:	event.metaKey,
					button:		event.button,
					buttons:	event.buttons,
					deltaX:		event.deltaX,
					deltaY:		event.deltaY,
					deltaZ:		event.deltaZ,
					deltaMode:	event.deltaMode
				};
				
				if('clientX' in event && typeof rect !== 'undefined')
				{
					params.clientX += rect.left;
					params.clientY += rect.top;
				}
				
				target.dispatchEvent(new MouseEvent(event.type, params));
			};
		else if(typeof document.createEvent === 'function')
			return function(event, target, rect)
			{
				var left, top;
				
				if(typeof rect !== 'undefined')
				{
					left = rect.left;
					top  = rect.top;
				}
				else
					left = top = 0;
				
				var relayed = document.createEvent('MouseEvent');
				relayed.initMouseEvent(event.type, 
					event.bubbles		|| true,
					event.cancelable	|| false,
					event.view,
					event.detail		|| 0,
					event.screenX,
					event.screenY,
					event.clientX + left,
					event.clientY + top,
					event.ctrlKey,
					event.altKey,
					event.shiftKey,
					event.metaKey,
					event.button,
					null							// relatedTarget
				);
				
				try
				{
					relayed.buttons = event.buttons;
					relayed.deltaX = event.deltaX;
					relayed.deltaY = event.deltaY;
					relayed.deltaZ = event.deltaZ;
					relayed.deltaMode = event.deltaMode;
				}
				catch(e)
				{
					
				}
				
				relayed.isLeft = event.isLeft;
				relayed.isRight = event.isRight;
				relayed.isMiddle = event.isMiddle;
				
				target.dispatchEvent(relayed);
			};
		else if('createEventObject' in document)
			return function(event, target, rect)
			{
				var relayed = document.createEventObject(event);
				
				if('clientX' in event && typeof rect !== 'undefined')
				{
					relayed.clientX += rect.left;
					relayed.clientY += rect.top;
				}
				
				target.fireEvent('on'+relayed.type, relayed);
			};
		else
			return function(target, event, rect) {};
	}());
	
	Scroll.framesEventBubblingStart = function()
	{
		var idx, frame, frames, frame_document, handler;
		
		Scroll.framesEventBubblingStop();
		
		frames = SSP.DOM.byTag('IFRAME');
		for(idx = 0; idx < frames.length; idx++)
		{
			frame = frames[idx];
			frame_document = frame.contentDocument || frame.contentWindow.document;
			
			handler = (function(frame)
			{
				var frameClientRect = frame.getBoundingClientRect();
				
				return function(event)
				{
					// strange bug in Chrome 49 - sporadically refiring last mousemove when the pointer is in the parent window
					if(event.type === 'mousemove' && 'movementX' in event && 'movementY' in event && event.movementX === 0 && event.movementY === 0)
						return;
						
					Scroll.relayEvent(event, frame.ownerDocument.body, frameClientRect);
				};
			}(frame));
			
			Scroll.frameBubblingHandlers.push([frame_document, handler]);
			
			SSP.DOM.listen(frame_document, 'mousedown', handler);
			SSP.DOM.listen(frame_document, 'mouseup',   handler);
			SSP.DOM.listen(frame_document, 'mousemove', handler);
		}
	};
	
	Scroll.framesEventBubblingStop = function()
	{
		var idx, frame_document, handler;
		
		if(Scroll.frameBubblingHandlers instanceof Array)
		{
			for(idx in Scroll.frameBubblingHandlers)
			{
				if(!Scroll.frameBubblingHandlers.hasOwnProperty(idx))
					continue;
				frame_document = Scroll.frameBubblingHandlers[idx][0];
				handler = Scroll.frameBubblingHandlers[idx][1];
				
				SSP.DOM.cancel(frame_document, 'mousedown', handler);
				SSP.DOM.cancel(frame_document, 'mouseup',   handler);
				SSP.DOM.cancel(frame_document, 'mousemove', handler);
			}
		}
		
		Scroll.frameBubblingHandlers = [];
	};
	
////////////////////////////////////////////////////////////////////////////////
	Scroll.scrollers = {};
	Scroll.tracked = false;
	
	Scroll.mimic = (function(id)
	{
		if(SSP.Browser.IE)
			return;
		
		if(!window.TEMPLATE_NEW)
			return;
		
		if(Scroll.scrollers[id])
			return;
		
		var scroller = new Scroll.Scroller(id);
		if(!scroller.ok)
			return;
		
		Scroll.scrollers[id] = scroller;
	})
	
	Scroll.mimicByClass = (function(className)
	{
		if(!window.TEMPLATE_NEW)
			return;
		
		var elements = SSP.DOM.byClass(className);
		for(var idx = 0; idx < elements.length; idx++)
		{
			var element = elements[idx];
			if(!element.id)
				continue;
			
			this.mimic(element.id);
		}
	})
	
	Scroll.trackStart = function(id)
	{
		if(!Scroll.scrollers.hasOwnProperty(id))
			return;
		
		Scroll.tracked = Scroll.scrollers[id];
		
		Scroll.framesEventBubblingStart();
	}
	
	Scroll.trackStop = function(id)
	{
		if(!Scroll.scrollers.hasOwnProperty(id))
			return;
		
		if(Scroll.tracked !== Scroll.scrollers[id])
			return;
		
		Scroll.tracked = false;
		
		Scroll.framesEventBubblingStop();
	}
	
	Scroll.onmouse = function(event)
	{
		if(Scroll.tracked)
			Scroll.tracked.onmouse(event);
		else if(event.type === 'mousedown')
		{
			for(var id in Scroll.scrollers)
			{
				if(!Scroll.scrollers.hasOwnProperty(id))
					continue;
				
				Scroll.scrollers[id].onmouse(event);
				if(Scroll.tracked)
					break;
			}
		}
	}
	
	Scroll.onevent = function(event)
	{
		for(var id in Scroll.scrollers)
		{
			if(!Scroll.scrollers.hasOwnProperty(id))
				continue;
			
			var handler = 'on'+event.type;
			if(handler === 'onmousewheel')
				handler = 'onwheel';
			
			if(typeof Scroll.scrollers[id][handler] === 'function')
			{
				Scroll.scrollers[id][handler].call(Scroll.scrollers[id], event);
				if(SSP.Bus.isCanceled(event))
					break;
			}
		}
	}
	
	Scroll.islistening = false;
	Scroll.islisteningMousemove = false;
	Scroll.startListen = function()
	{
		if(Scroll.islistening)
			return;
		
		SSP.DOM.listen(document.body, 'mousedown', Scroll.onmouse);
		SSP.DOM.listen(document.body, 'mouseup', Scroll.onmouse);
		SSP.DOM.listen(window, 'resize', Scroll.onevent, false, true);
		//SSP.DOM.listen(window, 'scroll', Scroll.onevent);
		//SSP.DOM.listen(document.body, 'wheel', Scroll.onevent);
		
		if(SSP.Browser.IE)
			SSP.DOM.listen(document.body, 'selectstart', function(event)
			{
				if(Scroll.tracked)
					SSP.Bus.cancel(event);
			});
			
		Scroll.islistening = true;
	}
	
	Scroll.watchResize = function(element, callback, fire_now)
	{
		var very_big = 999999;
		var watcher_expand, watcher_shrink;
		var width, height;
		
		if(typeof fire_now === 'undefined')
			fire_now = true;
		
		var onScroll = function(event)
		{
			SSP.DOM.requestAnimationFrame(function()
			{
				var clientWidth = element.clientWidth
				var clientHeight = element.clientHeight
				
				SSP.DOM.requestAnimationFrame(function()
				{
					if(width != clientWidth || height != clientHeight)
					{
						if(fire_now || event)
							callback.apply(element);
						
						width = element.clientWidth;
						height = element.clientHeight;
					}
					
					watcher_expand.scrollLeft = very_big;
					watcher_expand.scrollTop  = very_big;
					watcher_shrink.scrollLeft = very_big;
					watcher_shrink.scrollTop  = very_big;
				});
			});
		};
		
		(function()
		{
			var zIndex = -1;
			var layout, layout_inner, watcher;
			
			function createDiv(bInvisible)
			{
				var div = document.createElement('div');
				div.style.position = 'absolute';
				div.style.left = '0px';
				div.style.top = '0px';
				div.style.right = '0px';
				div.style.bottom = '0px';
				div.style.overflow = 'auto';
				
				if(bInvisible)
				{
					div.style.zIndex = zIndex;
					div.style.visibility = 'hidden';
				}
				
				return div;
			}
			
			function createChild(parent, bExpand)
			{
				var div = document.createElement('div');
				div = document.createElement('div');
				div.style.position = 'absolute';
				div.style.left = '0px';
				div.style.top = '0px';
				div.style.width = bExpand ? very_big+'px' : '200%';
				div.style.height = bExpand ? very_big+'px' : '200%';
				parent.appendChild(div);
				
				return div;
			}
			
			layout = element.parentElement;
			layout_inner = createDiv(false);
			element.layoutNode = layout_inner;
			
			watcher = document.createElement('div');
			watcher.style.position = 'relative';
			
			watcher_expand = createDiv(true);
			createChild(watcher_expand, true);
			
			watcher_shrink = createDiv(true);
			createChild(watcher_shrink, false);
			
			watcher.appendChild(watcher_expand);
			watcher.appendChild(watcher_shrink);
			
			watcher.insertBefore(element, null);
			layout_inner.appendChild(watcher);
			watcher.insertBefore(element, null);
			layout.insertBefore(layout_inner, null);
			
			layout.style.overflow = 'hidden';
			
			SSP.DOM.listen(watcher_expand, 'scroll', onScroll);
			SSP.DOM.listen(watcher_shrink, 'scroll', onScroll);
			
			onScroll(false);
		})();
	};
	
	Scroll.Scroller = (function(id)
	{
		// DOM elements
		var element, doc_window, container, scrolling, bar_v, thumb_v, bar_h, thumb_h, corner, overflow_x, overflow_y;
		// track
		var thumb_max = {};
		var track = {};
		// internal
		var isframe = false;
		var factor_v = 1;
		var factor_h = 1;
		// options
		var thumb_min_size = 66;
		var page_overlap = 40;
		
		this.ok = false;
		
		element = typeof id === 'string' ? SSP.DOM.byId(id) : id;
		if(!element)
			return;
		id = element.id;
		
		isframe = (element.tagName === 'IFRAME');
		
		if(isframe && SSP.Browser.Edge)
			return;
		
		if(SSP.Browser.hasTouchScreen
		|| isframe && (SSP.Browser.Android || SSP.Browser.IOS))
		{
			if(!isframe)
				SSP.DOM.addClass(element.parentNode, 'native_scroll');
			
			return;
		}
		
		var layout = element.parentElement;
		
		if(!isframe
		&& layout.firstElementChild
		&& SSP.DOM.hasClass(layout.firstElementChild, Scroll.StyleClass.corner))
			return;
		
		// create bars
		bar_v = document.createElement('div');
		bar_v.className = Scroll.StyleClass.bar_v;
		
		thumb_v = document.createElement('div');
		thumb_v.className = Scroll.StyleClass.thumb_v;
		
		bar_v.appendChild(thumb_v);
		
		bar_h = document.createElement('div');
		bar_h.className = Scroll.StyleClass.bar_h;
		
		thumb_h = document.createElement('div');
		thumb_h.className = Scroll.StyleClass.thumb_h;
		
		bar_h.appendChild(thumb_h);
		
		corner = document.createElement('div');
		corner.className = Scroll.StyleClass.corner;
		
		layout.appendChild(corner);
		layout.appendChild(bar_v);
		layout.appendChild(bar_h);
		
		// watch resize
		if(!isframe)
			Scroll.watchResize(element, recalc, false);
		
		// init
		if(isframe)
			SSP.DOM.listen(element, 'DOMContentLoaded', init);
		else
			init();
		
		// watch events
		Scroll.startListen();
		
		// return object
		this.onmouse = onmouse;
		this.onwheel = onwheel;
		if(!isframe)
		{
			this.onresize = recalcAndSyncThumbs;
			this.onscroll = syncThumbs;
		}
		
		this.ok = true;
		return;
		
		function determineElements()
		{
			var frame_document;
			
			if(isframe)
			{
				// iframe may be replaced
				element = typeof id === 'string' ? SSP.DOM.byId(id) : id;
				if(!element)
					return;
				
				frame_document = element.contentDocument || element.contentWindow.document;
				doc_window = SSP.DOM.getWindow(frame_document);
				scrolling = SSP.DOM.getContainer(frame_document);
				//if(scrolling.tagName === 'BODY')
				//	container = frame_document.documentElement;
				//else
					container = scrolling;
			}
			else
			{
				doc_window = window;
				//container = layout;
				container = scrolling = element.parentElement.parentElement;
			}
			
			SSP.DOM.requestAnimationFrame(function()
			{
				if(!isframe
				&& !SSP.DOM.contains(element))
					return;
				
				var style = SSP.DOM.getComputedStyle(element);
				overflow_x = style.overflowX || style.overflow;
				if(overflow_x !== 'auto' && overflow_x !== 'hidden' && overflow_x !== 'scroll')
					overflow_x = 'auto';
				overflow_y = style.overflowY || style.overflow;
				if(overflow_y !== 'auto' && overflow_y !== 'hidden' && overflow_y !== 'scroll')
					overflow_y = 'auto';
				
				container.style.overflowX = overflow_x;
				container.style.overflowY = overflow_y;
				element.style.overflow = 'visible';
			});
		}
		
		function init()
		{
			var old_window = doc_window || null;
			
			track.thumb = null;
			
			determineElements();
			
			SSP.DOM.requestAnimationFrame(recalcAndSyncThumbs);
			
			if(isframe)
			{
				SSP.DOM.listen(doc_window, 'resize', recalcAndSyncThumbs);
				SSP.DOM.listen(doc_window, 'scroll', syncThumbs);
			}
			else
				SSP.DOM.listen(scrolling, 'scroll', syncThumbs);
		}
		
		function recalc()
		{
			var thumb_size;
			var client_height = container.clientHeight;
			var scroll_height = scrolling.scrollHeight;
			var client_width  = container.clientWidth;
			var scroll_width  = scrolling.scrollWidth;
			
			var bar_width  = (isframe ? element : container).offsetWidth  - container.clientWidth;
			if(bar_width < SSP.Scroll.defaultBarWidth)
				bar_width = SSP.Scroll.defaultBarWidth;
			
			var bar_height = (isframe ? element : container).offsetHeight - container.clientHeight;
			if(bar_height < SSP.Scroll.defaultBarWidth)
				bar_height = SSP.Scroll.defaultBarWidth;
			
			bar_v.style.width  = bar_width +'px';
			bar_h.style.height = bar_height+'px';
			corner.style.width  = bar_width +'px';
			corner.style.height = bar_height+'px';
			
			var fix = 1;
			
			var has_scroll_v = (scroll_height > client_height+fix);
			var has_scroll_h = (scroll_width > client_width+fix);
			
			var show_bar_v = overflow_y === 'scroll' || (overflow_y === 'auto' && has_scroll_v);
			var show_bar_h = overflow_x === 'scroll' || (overflow_x === 'auto' && has_scroll_h);
			
			corner.style.display = (!show_bar_v || !show_bar_h) ? 'none' : '';
			bar_v.style.display = show_bar_v ? 'block' : 'none';
			bar_h.style.display = show_bar_h ? 'block' : 'none';
			
			thumb_v.style.display = has_scroll_v ? 'block' : 'none';
			thumb_h.style.display = has_scroll_h ? 'block' : 'none';
			
			if(show_bar_v && show_bar_h)
			{
				bar_v.style.bottom = bar_height+'px';
				bar_h.style.right = bar_width+'px';
				corner.style.display = 'block';
			}
			else
			{
				if(!show_bar_v)
					bar_h.style.right = 0;
				
				if(!show_bar_h)
					bar_v.style.bottom = 0;
				
				corner.style.display = 'none';
			}
			
			SSP.DOM.requestAnimationFrame(function()
			{
				var barVoffsetHeight = bar_v.offsetHeight;
				var barHoffsetWidth = bar_h.offsetWidth;
				
				thumb_size = barVoffsetHeight*client_height/scroll_height;
				if(thumb_size < thumb_min_size)
					thumb_size = thumb_min_size;
				thumb_max.v = barVoffsetHeight - thumb_size;
				thumb_v.style.height = thumb_size + 'px';
				factor_v = (has_scroll_v) ? thumb_max.v/(scroll_height-client_height) : 1;
				
				thumb_size = barHoffsetWidth*client_width/scroll_width;
				if(thumb_size < thumb_min_size)
					thumb_size = thumb_min_size;
				thumb_max.h = barHoffsetWidth - thumb_size;
				thumb_h.style.width = thumb_size + 'px';
				factor_h = (has_scroll_h) ? thumb_max.h/(scroll_width-client_width) : 1;
			});
		}
		
		function recalcAndSyncThumbs()
		{
			recalc();
			syncThumbs();
		}
		
		function syncScroll()
		{
			try
			{
				var test = scrolling.scrollTop;
			}
			catch(e)
			{
				determineElements();
			}
			
			scrolling.scrollTop  = Scroll.Prop.v.getOffset(thumb_v) / factor_v;
			scrolling.scrollLeft = Scroll.Prop.h.getOffset(thumb_h) / factor_h;
		}
		
		function syncThumbs()
		{
			var scrollTop = scrolling.scrollTop;
			var scrollLeft = scrolling.scrollLeft;
			
			SSP.DOM.requestAnimationFrame(function()
			{
				var top = factor_v * scrollTop;
				
				if(top > thumb_max.v)
					top = thumb_max.v;
				
				top = top + 'px';
				
				var left = factor_h * scrollLeft;
				
				if(left > thumb_max.h)
					left = thumb_max.h;
				
				left = left + 'px';
				
				if(Scroll.supportsTransform)
				{
					thumb_v.style.transform = 'translate(0px, ' + top + ')';
					thumb_h.style.transform = 'translate(' + left + ', 0px)';
				}
				else
				{
					thumb_v.style.top  = top;
					thumb_h.style.left = left;
				}
			});
		}
		
		function scrollPage(v, h)
		{
			!v || (scrolling.scrollTop  += v*container.clientHeight - page_overlap);
			!h || (scrolling.scrollLeft += h*container.clientWidth  - page_overlap);
			
			syncThumbs();
		}
		
		function trackStart(thumb, event)
		{
			var dir;
			
			if(thumb === thumb_v)
				dir = 'v';
			else if(thumb === thumb_h)
				dir = 'h';
			else
				return;
			
			track = {
				thumb: thumb,
				dir: dir,
				start: event[Scroll.Prop[dir].event],
				offset: Scroll.Prop[dir].getOffset(thumb),
				max: thumb_max[dir]
			};
			
			SSP.DOM.addClass(track.thumb.parentElement, Scroll.StyleClass.bar_tracked);
			
			Scroll.trackStart(id);
		}
		
		function trackStop()
		{
			SSP.DOM.removeClass(track.thumb.parentElement, Scroll.StyleClass.bar_tracked);
			
			track.thumb = null;
			
			Scroll.trackStop(id);
		}
		
		function onmouse(event)
		{
			if(event.type === 'mousedown')
			{
				if(event.target !== bar_v && event.target !== bar_h && event.target !== thumb_v && event.target !== thumb_h)
					return;
				
				if(!Scroll.islisteningMousemove)
				{
					SSP.DOM.listen(document.body, 'mousemove', Scroll.onmouse);
					Scroll.islisteningMousemove = true;
				}
				
				SSP.Bus.cancel(event);
				
				if(event.target === bar_v)
				{
					var position = event.clientY - bar_v.getBoundingClientRect().top - Scroll.Prop.v.getOffset(thumb_v);
					
					if(position < 0)
						scrollPage(-1, 0);
					else if(position > thumb_v.offsetHeight)
						scrollPage(1, 0);
					else
						trackStart(thumb_v, event)
				}
				else if(event.target === bar_h)
				{
					var position = event.clientX - bar_h.getBoundingClientRect().left - Scroll.Prop.h.getOffset(thumb_h);
					
					if(position < 0)
						scrollPage(0, -1);
					else if(position > thumb_h.offsetWidth)
						scrollPage(0, 1);
					else
						trackStart(thumb_h, event)
				}
				else if(event.target === thumb_v || event.target === thumb_h)
					trackStart(event.target, event)
			}
			else if(event.type === 'mouseup')
			{
				if(!track.thumb)
					return;
				
				trackStop();
			}
			else if(event.type === 'mousemove')
			{
				if(!track.thumb)
					return;
				
				if(!event.isLeft)
				{
					trackStop();
					return;
				}
				
				var pos = track.offset + event[Scroll.Prop[track.dir].event] - track.start;
				
				if(pos < 0)
					pos = 0;
				if(pos > track.max)
					pos = track.max;
				
				if(Scroll.supportsTransform)
					track.thumb.style.transform = Scroll.Prop[track.dir].transform(pos + 'px');
				else
					track.thumb.style[Scroll.Prop[track.dir].style] = pos + 'px';
				
				syncScroll();
			}
		}
		
		function onwheel(event)
		{
			if(event.target !== bar_v && event.target !== bar_h && event.target !== thumb_v && event.target !== thumb_h)
				return;
			
			SSP.Bus.cancel(event);
			
			Scroll.relayEvent(event, element, {top:-20, left:-20}); // , event.target.getBoundingClientRect());
		}
	})
	
	return Scroll;
}
)(SSP || {}, window);

var App = (function(App, window, undefined)
{
	"use strict";
	
	App.Handler =
	{
		initBodyCopy: (function(copyrightOwner)
		{
			App.Handler.copyrightOwner = copyrightOwner;
			SSP.DOM.listen(document.body, 'copy', App.Handler.bodyCopy);
		})
		,
		copyrightOwner: undefined
		,
		bodyCopy: function(event)
		{
			if(!App.Handler.copyrightOwner)
				return;
			
			var target = event.explicitOriginalTarget || event.srcElement;
			
			if(target.tagName && (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA'))
				return true;
			
			var message = 'Пожалуйста, при копировании любой части материалов сайта помните, что исключительные права на них\nпринадлежат '
						+ App.Handler.copyrightOwner
						+ '.\n\nРазмещение данных материалов на других информационных ресурсах должно\nпроизводиться со ссылкой на сайт '
						+ location.hostname
			
			alert(message);
			
			return true;
		}
		,
		bodyClick: (function(event)
		{
			if(!SSP.Bus.appPath || !SSP.Bus.appPath.match(/^(?:\/+[^\/]+)?\/db\//))
			{
				var target = event.target;
				
				while(target.tagName !== 'A'
				&& target.tagName !== 'BODY'
				&& target.tagName !== 'HTML'
				&& target.parentNode)
					target = target.parentNode;
				
				if(target.tagName === 'A')
				{
					var rx = /^((?:\/*[^\/]+\/)?\/?db\/)([^\/]+)\/([^\/]+)\/(.*)$/;
					var matches;
					
					if(matches = rx.exec(target.pathname))
					{
						if(matches[2] !== 'translate'
						&& matches[2] !== 'content'
						&& (!SSP.Browser.Android && !SSP.Browser.IOS || matches[4].match(/\.html?_?$/)))
							target.href = (matches[1].charAt(0) !== '/' ? '/' : '') + matches[1] + matches[2] + '#' + matches[3] + ':' + matches[4].replace(/\/+/g, ':');
					}
				}
			}
			
			return true;
		})
		,
		accessRestrictedDropdownClick: function(event)
		{
			SSP.DOM.fixEvent(event);
			
			if(!event.isLeft)
				return true;
			
			var target = event.target;
			var accessRestricted = target.parentNode;
			
			while(accessRestricted && accessRestricted.id !== 'access_restricted')
				accessRestricted = accessRestricted.parentNode;
			
			if(accessRestricted)
			{
				if(SSP.DOM.hasClass(accessRestricted, 'collapsed'))
				{
					SSP.DOM.removeClass(accessRestricted, 'collapsed');
					SSP.DOM.addClass(accessRestricted, 'expanded');
				}
				else
				{
					SSP.DOM.removeClass(accessRestricted, 'expanded');
					SSP.DOM.addClass(accessRestricted, 'collapsed');
				}
			}
		}
	};
	
	App.User =
	{
		ping: undefined
		,
		init: (function(authorized, loginCookie, accessCookie, partwebCookie, freshCookie, rememberCookie, pingPath, pingInterval)
		{
			App.User.loginCookie = loginCookie;
			App.User.accessCookie = accessCookie;
			App.User.partwebCookie = partwebCookie;
			App.User.freshCookie = freshCookie;
			App.User.rememberCookie = rememberCookie;
			
			var container = SSP.DOM.byId('user_login') || SSP.DOM.byId('w_user_login');
			
			if(authorized)
			{
				SSP.DOM.removeClass(container, 'unauthorized');
				SSP.DOM.addClass(container, 'authorized');
				
				var login_cookie = SSP.Bus.cookie(loginCookie);
				var login = App.User.getLogin();
				
				if(login)
				{
					if(login_cookie === 'partweb' && SSP.Bus.cookie(partwebCookie))
						login = SSP.String.escapeHtml(login) + ' <i>(partweb.1c.ru)</i>';
					else
						login = SSP.String.escapeHtml(login);
				}
				
				var login_string = SSP.DOM.byId('login');
				login_string.innerHTML = login || '&nbsp;';
				login_string.style.display = 'block';
				
				var subscribe_period = SSP.Bus.cookie(accessCookie);
				var virtual = false;
				
				if(subscribe_period && subscribe_period !== 'N' && subscribe_period !== 'Y')
				{
					if(SSP.Bus.cookie(freshCookie))
					{
						SSP.DOM.addClass(SSP.DOM.byId('access_info'), 'access_info__hidden');
						SSP.DOM.byId('subscribe_period').innerHTML = '&nbsp;';
						virtual = true;
					}
					else
					{
						SSP.DOM.byId('subscribe_period').innerHTML = SSP.String.escapeHtml(subscribe_period);
						SSP.DOM.addClass(SSP.DOM.byId('access_info'), 'access_info__till');
					}
				}
				else if(login_cookie === 'partweb')
				{
					SSP.DOM.byId('subscribe_period').innerHTML = '&nbsp;';
					SSP.DOM.addClass(SSP.DOM.byId('access_info'), 'access_info__hidden');
					virtual = true;
				}
				else if(login && typeof subscribe_period === 'undefined')
					setTimeout(App.User.refresh, 0);
				else if(subscribe_period === 'Y')
				{
					SSP.DOM.byId('subscribe_period').innerHTML = '&nbsp;';
					SSP.DOM.addClass(SSP.DOM.byId('access_info'), 'access_info__hidden');
				}
				else
					SSP.DOM.addClass(SSP.DOM.byId('access_info'), 'access_info__limited');
				
				var personalInfo = SSP.DOM.byId('personal_info');
				
				if(personalInfo)
					personalInfo.style.display = 'block';
				
				if(!virtual)
					SSP.DOM.addClass(document.body, 'review');
				else
					SSP.DOM.removeClass(document.body, 'review');
				
				if(SSP.Browser.IE)
				{
					var iframe = SSP.DOM.byId('w_metadata_doc_frame');
					
					if(iframe && SSP.DOM.byId('authform_iframe', iframe.contentWindow.document))
						iframe.contentWindow.location.reload(true);
				}
				
				if(!SSP.Bus.cookie('REMEMBER') && typeof App.User.ping === 'undefined')
				{
					if(typeof pingInterval !== 'number' || pingInterval <= 0)
						pingInterval = 60 * 10;
					
					App.User.ping = setInterval(
						function()
						{
							var callback =
							{
								success: function(){},
								error: function()
								{
									clearInterval(App.User.ping);
									App.User.refresh();
								}
							};
							
							SSP.Bus.request(pingPath, callback);
						},
						pingInterval * 1000
					);
				}
			}
			else
			{
				SSP.DOM.removeClass(container, 'authorized');
				SSP.DOM.addClass(container, 'unauthorized');
				
				if(App.User.ping)
				{
					clearInterval(App.User.ping);
					App.User.ping = void 0;
				}
				
				if(SSP.Browser.IE)
				{
					var iframe = SSP.DOM.byId('auth_check');
					
					SSP.DOM.listen(iframe, 'load', (function(){
						return function(){
							try
							{
								var location = iframe.contentWindow.document.location;
								if(location.pathname.match(/^\/?login\/?$/)
								&& location.search === '?action=aftercheck&provider=login')
								{
									setTimeout(
										function(){
											SSP.DOM.destroy(iframe);
										},
										SSP.DOM.timeoutMedium
									);
								}
							}
							catch(e)
							{
								
							}
						}
					})());
				}
			}
		})
		,
		authPopup: function()
		{
			var popup = SSP.DOM.byId('login_popup');
			
			if(popup)
			{
				popup.style.display = 'block';
				
				var input = SSP.DOM.byId('login_input');
				
				if(input)
					input.focus();
			}
		}
		,
		loginCookie: undefined
		,
		accessCookie: undefined
		,
		partwebCookie: undefined
		,
		freshCookie: undefined
		,
		getLogin: (function()
		{
			var loginCookie = SSP.Bus.cookie(App.User.loginCookie);
			var login;
			
			switch(loginCookie)
			{
				case 'partweb':
				{
					login = SSP.Bus.cookie(App.User.partwebCookie);
				}
				break;
				default:
				{
					login = SSP.Bus.cookie(App.User.freshCookie) || loginCookie;
				}
			}
			
			if(login)
				return SSP.String.decodeURIComponent(login).replace(/\+/g, ' ');
			else
				return '';
		})
		,
		refresh: function()
		{
			var loginWidget = SSP.Widget('w_user_login');
			
			if(loginWidget)
				SSP.Bus.command(loginWidget, 'reload', ['/common/user/login_']);
		}
		,
		syncTemplateCookie: function()
		{
			if(!document.hidden
			&& !SSP.Browser.Android
			&& !SSP.Browser.IOS)
				SSP.Bus.cookie('TEMPLATE_NEW', window.TEMPLATE_NEW ? '1' : '0');
		}
	};
	
	App.Site =
	{
		sites: {}
		,
		pathnameRx: /^\/*([a-z][a-z])(\/|$)/i
		,
		init: function(sites)
		{
			App.Site.sites = sites;
			
			var widget = SSP.Widget('w_siteselect');
			var a = SSP.DOM.byId('selected_country');
			
			if(widget.node && a)
			{
				var code = App.Site.getCurrent();
				var country = sites[code];
				var countryClass = 'country_' + code;
				
				SSP.DOM.addClass(a, countryClass);
				a.innerHTML = country+'&#x25bc;';
				
				var ul = widget.node.getElementsByTagName('UL')[0];
				
				if(!ul.listeningEvents)
				{
					widget.listen('click', App.Site.selectClick);
					SSP.DOM.listen(ul, 'mouseover', App.Site.showSelect);
					SSP.DOM.listen(ul, 'mouseout', App.Site.hideSelect);
					ul.listeningEvents = true;
				}
				
				for(var i = 0; i < ul.children.length; i++)
					if(SSP.DOM.hasClass(ul.children[i].getElementsByTagName('A')[0], countryClass))
					{
						ul.removeChild(ul.children[i]);
						break;
					}
			}
		}
		,
		getCurrent: function()
		{
			var code = 'eu';
			var matches = window.location.pathname.match(App.Site.pathnameRx);
			
			if(matches && matches[1] in App.Site.sites)
				code = matches[1];
			
			return code;
		}
		,
		selectClick: function(event)
		{
			if(event.target.tagName === 'A')
			{
				if(event.target.id === 'selected_country')
					App.Site.showSelect();
				else if(event.target.href)
				{
					var matches = event.target.className.match(/country_([a-z][a-z])/);
					
					if(matches)
					{
						var newCode = matches[1];
						
						var code = App.Site.getCurrent();
						var location = window.location;
						var search = location.search;
						var hash = location.hash;
						var pathname = SSP.String.ltrim(location.pathname, '/');
						
						var matches = pathname.match(App.Site.pathnameRx);
						
						if(matches && matches[1] in App.Site.sites)
							pathname = pathname.replace(App.Site.pathnameRx, (newCode === 'eu' ? '' : newCode) + '$2');
						else
							pathname = newCode + '/' + pathname;
						
						var newLoc = '/' + pathname
								   + (search ? '?' + SSP.String.trim(search, '?') : '')
								   + (hash ? '#' + SSP.String.trim(hash, '#') : '');
						
						window.location = location.protocol + '//' + location.hostname + newLoc.replace(/\/{2,}/g, '/');
					}
				}
			}
		}
		,
		showSelect: function()
		{
			SSP.Widget('w_siteselect').node.getElementsByTagName('UL')[0].style.display = '';
		}
		,
		hideSelect: function()
		{
			SSP.Widget('w_siteselect').node.getElementsByTagName('UL')[0].style.display = 'none';
		}
	};
	
	App.Search =
	{
		init: (function(autocomplete, formId, inputId, autohide)
		{
			formId = formId || 'search_form';
			inputId = inputId || 'search_input';
			
			var form = SSP.DOM.byId(formId);
			
			var submitHandler = function(event)
			{
				event = event || window.event;
				if(event && event.type === 'submit')
				{
					SSP.Bus.cancel(event);
					var form = this;
				}
				else
					var form = SSP.DOM.byId(formId);
				
				var location = form.action.replace(/\/search\/([^\/]+)$/, '#search:$1') + ':' + encodeURIComponent(form.elements['query'].value.replace(/[\?&#]/g, ' '));
				
				var group = SSP.Bus.cookie('SEARCH_GROUP');
				
				if(group)
					location = location.replace(/#search:[^:]+:/, '#search:' + group + ':');
				
				if(!SSP.Browser.IE
				&& App.Search.newSearchUsed())
				{
					var tldMatches = window.location.hostname.match(/\.(kz)$/);
					var searchNick = 'morphmerged' + (tldMatches ? tldMatches[1] : '');
					
					location = location.replace(/^(https?:\/\/[^\/]+(?:\/+[^\/]+)?\/db)\/[^\/]+(\/|#)/, '$1/' + searchNick + '$2');
				}
				
				if(SSP.Bus.initialized && typeof SSP.Bus.appPath !== 'undefined' && SSP.Bus.appPath.match(/^(?:\/+[^\/]+)?\/db\//))
					SSP.Bus.navigate(location, false, 'click');
				else
					window.location = location;
				
				if(window.TEMPLATE_NEW)
					App.Sidebar.setMenu(false, false);
				
				return false;
			};
			
			SSP.DOM.listen(form, 'submit', submitHandler);
			
			var resetHandler = function(event)
			{
				var input = SSP.DOM.byId(inputId);
				
				if(autohide && !input.value)
					input.blur();
				else
				{
					input.setAttribute('data-autocomplete-nofocus-once', '');
					input.value = '';
					input.focus();
				}
				
				SSP.Form.hideAutocompleteSuggest(input);
				
				SSP.Bus.cancel(event);
			};
			
			SSP.DOM.listen(form, 'reset', resetHandler);
			
			if(autocomplete)
			{
				var id = inputId;
				var input = SSP.DOM.byId(id);
				
				if(input)
				{
					input.setAttribute('data-autocomplete-autosubmit', '');
					input.setAttribute('data-autocomplete-cache', '');
					
					SSP.Form.initAutocomplete(id, autocomplete + '?searchText={query}');
				}
			}
			
			if(autohide)
			{
				var id = inputId;
				var input = SSP.DOM.byId(id);
				
				if(input)
				{
					var keyUpHandler = function(event)
					{
						if(event.isEscape
						&& !SSP.Bus.isCanceled(event))
						{
							var input = SSP.DOM.byId(inputId);
							input.blur();
							SSP.Bus.cancel(event);
						}
					};
					
					SSP.DOM.listen(input, 'keyup', keyUpHandler);
				}
			}
			
			if(SSP.Bus.cookie('SEARCH'))
				SSP.DOM.byId('search_link').style.display = '';
		})
		,
		trackClick: function(event, queryId, itemId)
		{
			if(event.isLeft)
			{
				var href = this.href;
				
				var callback = function()
				{
					window.location = href;
				};
				
				SSP.Bus.request('/db/search/clicktrack', callback, {queryId: queryId, itemId: itemId}, 'POST');
				
				SSP.Bus.cancel(event);
			}
		}
		,
		newSearchUsed: function()
		{
			if(window.TEMPLATE_NEW)
				return true;
			else if(location.hostname.match(/\.(ru|kz|local)$/))
				return true;
			else
				return false;
		}
	};
	
	App.Popup =
	{
		layout: undefined
		,
		title: undefined
		,
		widget: undefined
		,
		wrapped: undefined
		,
		init: (function(contentDocument)
		{
			contentDocument = contentDocument || window.document;
			
			App.Popup.layout = SSP.Widget('w_popup');
			App.Popup.title = SSP.Widget('popup_title');
			App.Popup.widget = SSP.Widget('popup');
			
			if(App.Popup.layout.node && App.Popup.widget.node)
			{
				SSP.DOM.listen(contentDocument.body, 'click', App.Popup.handleDocumentClick, true);
				SSP.DOM.listen(contentDocument.body, 'keyup', App.Popup.handleDocumentKeypress);
				SSP.DOM.listen(SSP.DOM.byId('popup_close'), 'click', App.Popup.close);
			}
		})
		,
		handleDocumentClick: (function(event)
		{
			var target = SSP.DOM.findParentByTag(event.target, 'A');
			
			if(target && (SSP.DOM.hasClass(target, 'popup') || target.target === 'popup'))
			{
				SSP.Bus.cancel(event);
				
				if(SSP.DOM.hasClass(target, 'video'))
					SSP.DOM.addClass(App.Popup.layout.node, 'video');
				
				App.Popup.open(target.getAttribute('href'), target.title || target.innerText || target.textContent);
				return false;
			}
			else if(!window.TEMPLATE_NEW && (event.clientX || event.clientY) && App.Popup.layout.node.style.display === 'block')
			{
				var coords = App.Popup.layout.node.getBoundingClientRect();
				
				if(event.clientX < coords.left
				|| event.clientX > coords.right
				|| event.clientY < coords.top
				|| event.clientY > coords.bottom)
					if(SSP.DOM.findParent(event.target, App.Popup.widget.node) !== App.Popup.widget.node)
						App.Popup.close();
			}
		})
		,
		handleDocumentKeypress: (function(event)
		{
			if(event.isEscape)
				App.Popup.close();
			
			return true;
		})
		,
		open: function(url, title)
		{
			if(!SSP.DOM.isNode(url))
			{
				url = url.split('?');
				url[0] = SSP.String.rtrim(url[0], '_') + '_';
				url = url.join('?');
				
				if(App.Popup.widget.src() !== url)
				{
					App.Popup.widget.setClass('l loading');
					App.Popup.layout.addClass('loading');
					SSP.Bus.command(App.Popup.widget, 'reload', [url], undefined, function(){
						if(document.activeElement)
							document.activeElement.blur();
						App.Popup.layout.scroll();
						App.Popup.layout.removeClass('loading');
					});
					App.Popup.widget.clean();
				}
			}
			else
			{
				var node = url;
				
				App.Popup.wrapped = node;
				
				while(node.children.length)
				{
					var child = node.children[0];
					node.removeChild(child);
					App.Popup.widget.node.appendChild(child);
				}
				
				App.Popup.widget.removeClass('loading');
				App.Popup.layout.removeClass('loading');
			}
			
			App.Popup.title.html(title || '');
			App.Popup.layout.setStyle('display', 'block');
		}
		,
		close: function()
		{
			if(App.Popup.wrapped)
			{
				while(App.Popup.widget.node.children.length)
				{
					var child = App.Popup.widget.node.children[0];
					App.Popup.widget.node.removeChild(child);
					App.Popup.wrapped.appendChild(child);
				}
				
				App.Popup.wrapped = undefined;
			}
			
			App.Popup.widget.clean();
			App.Popup.widget.addClass('loading');
			App.Popup.layout.setClass('w loading');
			App.Popup.layout.hide();
			App.Popup.layout.scroll();
		}
	};
	
	App.Sidebar = (function()
	{
		var sidebar, sidebar_section_id, sidebar_subsection_id, metadata_dbsection_id;
		var level1, level2;
		var section_prefix;
		var current;
		var waiter;
		var initialized = false;
		var loading = false;
		
		function onclick(event)
		{
			if(!SSP.DOM.byId('w_sidebar_menu').contains(event.target))
			{
				if(level1)
					App.Sidebar.setMenu(false, false);
				
				return;
			}
			
			var element, ids;
			var dbsection = SSP.DOM.byId(metadata_dbsection_id);
			
			for(element = event.target; element; element = element.parentElement)
			{
				if(element.tagName === 'A' && element.href)
				{
					if(element.href.indexOf(section_prefix) === 0)
					{
						var ids = element.href.substring(section_prefix.length).split('/');
						
						if(!App.Main
						|| App.Sidebar.isLoaded())
							App.Sidebar.setMenu(ids[0], ids[1]);
						
						if(!App.Main)
							SSP.Bus.cancel(event);
					}
					else
					{
						SSP.Bus.cookie('ITS_MENU_PATH', current, undefined, '/');
						
						App.Sidebar.setMenu(false, false);
					}
					
					break;
				}
				else if(element.id === 'sidebar_close_section')
				{
					App.Sidebar.setMenu(false, false);
					SSP.Bus.cancel(event);
					break;
				}
				else if(element.id === 'sidebar_close_subsection')
				{
					App.Sidebar.setMenu(level1, false);
					SSP.Bus.cancel(event);
					break;
				}
				else if(element.id === 'sidebar_open_section'
				|| dbsection && element.id === 'w_sidebar_section' && !level1 && !SSP.DOM.hasClass(element, 'sidebar-adaptive') && !SSP.DOM.hasClass(element, 'sidebar-no-initial'))
				{
					if(dbsection)
					{
						var menuPath;
						var cookie = SSP.Bus.cookie('ITS_MENU_PATH');
						
						if(cookie)
						{
							var menuPaths = SSP.DOM.getData(dbsection, 'menu-paths');
							
							if(menuPaths
							&& menuPaths.indexOf(cookie) !== -1)
								menuPath = cookie;
						}
						
						if(!menuPath)
							menuPath = SSP.DOM.getData(dbsection, 'section');
						
						if(menuPath)
						{
							var ids = menuPath.split('/');
							App.Sidebar.setMenu(ids[0], ids[1]);
						}
					}
					
					SSP.Bus.cancel(event);
					break;
				}
			}
		}
		
		function onkeyup(event)
		{
			if(event.isEscape && level1)
			{
				App.Sidebar.setMenu(false, false);
				SSP.Bus.cancel(event);
			}
		}
		
		function onmouseover(event)
		{
			SSP.DOM.cancel(SSP.DOM.byId('w_sidebar_menu'), 'mouseover', onmouseover);
			
			if(!loading)
				App.Sidebar.load(false, false, function(){});
		}
		
		return {
		
			init: (function(sidebar_id, _sidebar_section_id, _sidebar_subsection_id, _metadata_dbsection_id, listen_mouseover)
			{
				if(initialized)
					return;
				else
				{
					sidebar = SSP.DOM.byId(sidebar_id);
					sidebar_section_id = _sidebar_section_id;
					sidebar_subsection_id = _sidebar_subsection_id;
					metadata_dbsection_id = _metadata_dbsection_id;
					
					if(typeof listen_mouseover === 'undefined')
						listen_mouseover = true;
					
					level1 = false;
					level2 = false;
					
					section_prefix = document.location.protocol+'//'+document.location.host+'/section/';
					
					if(listen_mouseover
					&& !App.Sidebar.isLoaded()
					&& !SSP.Browser.hasTouchScreen)
						SSP.DOM.listen(SSP.DOM.byId('w_sidebar_menu'), 'mouseover', onmouseover);
					
					SSP.DOM.listen(document.body, 'click', onclick);
					SSP.DOM.listen(document.body, 'keyup', onkeyup);
					
					initialized = true;
				}
			})
			,
			isLoaded: (function()
			{
				return SSP.DOM.byId('sidebar_list').children.length && SSP.DOM.byId('sidebar_sublist').children.length;
			})
			,
			load: (function(_level1, _level2, callback)
			{
				level1 = _level1 || false;
				level2 = _level2 || false;
				
				if(App.Sidebar.isLoaded())
				{
					if(callback)
						callback.call(window);
				}
				else if(!loading)
				{
					var loader = function()
					{
						delete SSP.Scroll.scrollers['sidebar_list'];
						delete SSP.Scroll.scrollers['sidebar_sublist'];
						
						loading = false;
						
						if(callback)
							callback.call(window);
						else
						{
							if(level2)
							{
								SSP.DOM.removeClass(sidebar, 'sidebar_level0');
								SSP.DOM.removeClass(sidebar, 'sidebar_level1');
								SSP.DOM.addClass   (sidebar, 'sidebar_level2');
							}
							else if(level1)
							{
								SSP.DOM.removeClass(sidebar, 'sidebar_level0');
								SSP.DOM.addClass   (sidebar, 'sidebar_level1');
								SSP.DOM.removeClass(sidebar, 'sidebar_level2');
							}
						}
					};
					
					var url = '/common/page/menu';
					
					if(level1)
					{
						url += '/' + level1;
						
						if(level2)
						{
							url += '/' + level2;
						}
					}
					
					url += '_';
					
					loading = true;
					
					SSP.Bus.command(SSP.Widget('w_sidebar_menu'), 'reload', [url], false, loader);
				}
				else if(callback && typeof waiter === 'undefined')
				{
					waiter = setInterval(
						function()
						{
							if(!loading)
							{
								clearInterval(waiter);
								waiter = void 0;
								callback.call(window);
							}
						},
						SSP.DOM.timeoutTiny
					);
				}
			})
			,
			setMenu: (function(_level1, _level2)
			{
				level1 = _level1 || false;
				level2 = _level2 || false;
				
				if(!level1 && !level2)
					App.Sidebar.doSetMenu();
				else
				{
					if(App.Sidebar.isLoaded())
						var callback = function()
						{
							App.Sidebar.doSetMenu(_level1, _level2);
						};
					else
						var callback = function()
						{
							SSP.DOM.requestAnimationFrame(function()
							{
								App.Sidebar.doSetMenu(_level1, _level2);
							});
						};
					
					App.Sidebar.load(_level1, _level2, callback);
				}
			})
			,
			doSetMenu: (function(_level1, _level2)
			{
				level1 = _level1 || false;
				level2 = _level2 || false;
				
				if(level1 && !SSP.DOM.byId('sidebar_section_' + level1))
					level1 = false;
				
				if(level2 && !SSP.DOM.byId('sidebar_subsection_' + level2))
					level2 = false;
				
				if(level1 || level2)
				{
					SSP.Scroll.mimic('sidebar_list');
					SSP.Scroll.mimic('sidebar_sublist');
				}
				
				if(!level1)
				{
					level2 = false;
					
					if(sidebar)
					{
						SSP.DOM.addClass   (sidebar, 'sidebar_level0');
						SSP.DOM.removeClass(sidebar, 'sidebar_level1');
						SSP.DOM.removeClass(sidebar, 'sidebar_level2');
					}
					
					if(current
					&& App.Main
					&& location.hash.replace(/^#/, '') === current)
						SSP.Bus.track(App.Main.Router.defaultTitle, location.toString().split('#')[0], null, null, true);
				}
				else if(!level2)
				{
					SSP.DOM.removeClass(sidebar, 'sidebar_level0');
					SSP.DOM.addClass   (sidebar, 'sidebar_level1');
					SSP.DOM.removeClass(sidebar, 'sidebar_level2');
				}
				else
				{
					SSP.DOM.removeClass(sidebar, 'sidebar_level0');
					SSP.DOM.removeClass(sidebar, 'sidebar_level1');
					SSP.DOM.addClass   (sidebar, 'sidebar_level2');
				}
				
				if(level2)
					current = level1 + '/' + level2;
				else if(level1)
					current = level1;
				else
					current = void 0;
				
				var level1Href = level1 ? section_prefix + level1 : false;
				var level2Href = level1 && level2 ? section_prefix + level1 + '/' + level2 : false;
				
				var hrefs = SSP.DOM.byTag('A', SSP.DOM.byId('w_sidebar_menu'));
				for(var idx = 0; idx < hrefs.length; idx++)
				{
					if(level2Href && hrefs[idx].href === level2Href
					|| level1Href && hrefs[idx].href === level1Href)
						SSP.DOM.addClass(hrefs[idx], 'active');
					else
						SSP.DOM.removeClass(hrefs[idx], 'active');
				}
				
				var sections = SSP.DOM.byTag('UL', SSP.DOM.byId(sidebar_section_id));
				for(var idx = 0; idx < sections.length; idx++)
				{
					var active = sections[idx].id === 'sidebar_section_' + level1;
					sections[idx].style.display = active ? 'block' : 'none';
					
					if(active)
					{
						SSP.DOM.byId('sidebar_section_header').innerHTML = SSP.String.escapeHtml(SSP.DOM.getData(sections[idx], 'name'));
						
						if(!level2)
						{
							var sidebarList = SSP.DOM.byId('sidebar_list');
							
							if(sidebarList.layoutNode)
							{
								var scrolled = SSP.Browser.IE ? sidebarList.firstChild.firstChild : sidebarList.firstElementChild.firstElementChild;
								var layout = sidebarList.layoutNode;
							}
							else
							{
								var scrolled = sidebarList;
								var layout = sidebarList.parentNode;
							}
							
							SSP.DOM.scroll(scrolled, layout, true);
						}
					}
				}
				
				var sections = SSP.DOM.byTag('UL', SSP.DOM.byId(sidebar_subsection_id));
				for(var idx = 0; idx < sections.length; idx++)
				{
					var active = sections[idx].id === 'sidebar_subsection_' + level2;
					sections[idx].style.display = active ? 'block' : 'none';
					
					if(active)
					{
						SSP.DOM.byId('sidebar_subsection_header').innerHTML = SSP.String.escapeHtml(SSP.DOM.getData(sections[idx], 'name'));
						
						var sidebarSublist = SSP.DOM.byId('sidebar_sublist');
						
						if(sidebarSublist.layoutNode)
						{
							var scrolled = SSP.Browser.IE ? sidebarSublist.firstChild.firstChild : sidebarSublist.firstElementChild.firstElementChild;
							var layout = sidebarSublist.layoutNode;
						}
						else
						{
							var scrolled = sidebarSublist;
							var layout = sidebarSublist.parentNode;
						}
						
						SSP.DOM.scroll(scrolled, layout, true);
					}
				}
				
				SSP.DOM.triggerReflow();
			})
		};
	})();
	
	App.Carousel = (function(aperture_id, ribbon_id, backward_id, forward_id, buttons_ids, _options)
	{
		var domAperture, domRibbon, domBackward, domForward;
		var options, left_prop, right_prop;
		var step, aperture_size, ribbon_size, max_position, aperture_rect, ribbon_position, ribbon_min, ribbon_max;
		var queue_mode = false;
		
		var luft = 1;
		
		function recalc()
		{
			if(!domAperture.parentNode)
				return;
			
			var client_rect = domAperture.getBoundingClientRect();
			var ribbonStyle = SSP.DOM.getComputedStyle(domRibbon);
			
			aperture_rect = {
				left:	client_rect.left,
				right:	client_rect.right,
				top:	client_rect.top,
				bottom:	client_rect.bottom
			};
			
			if(!options.bypixel)
			{
				aperture_rect.left  += SSP.Number.parseInt(ribbonStyle.borderLeftWidth)   + SSP.Number.parseInt(ribbonStyle.paddingLeft);
				aperture_rect.right -= SSP.Number.parseInt(ribbonStyle.borderRightWidth)  + SSP.Number.parseInt(ribbonStyle.paddingRight);
				aperture_rect.top   += SSP.Number.parseInt(ribbonStyle.borderTopWidth)    + SSP.Number.parseInt(ribbonStyle.paddingTop);
				aperture_rect.bottom-= SSP.Number.parseInt(ribbonStyle.borderBottomWidth) + SSP.Number.parseInt(ribbonStyle.paddingBottom);
			}
			
			if(options.vertical)
			{
				aperture_size = aperture_rect.bottom - aperture_rect.top;
				ribbon_size = domRibbon.scrollHeight - (SSP.Number.parseInt(ribbonStyle.borderTopWidth) + SSP.Number.parseInt(ribbonStyle.paddingTop));
			}
			else
			{
				aperture_size = aperture_rect.right - aperture_rect.left;
				ribbon_size = domRibbon.scrollWidth - (SSP.Number.parseInt(ribbonStyle.borderLeftWidth) + SSP.Number.parseInt(ribbonStyle.paddingLeft));
			}
			
			ribbon_min = 0;
			ribbon_max = ribbon_size - aperture_size;
			ribbon_max -= options.vertical ? 
				SSP.Number.parseInt(ribbonStyle.borderBottomWidth) + SSP.Number.parseInt(ribbonStyle.paddingBottom) :
				SSP.Number.parseInt(ribbonStyle.borderRightWidth) + SSP.Number.parseInt(ribbonStyle.paddingRight);
			
			if(options.bypixel)
			{
				max_position = ribbon_size - aperture_size;
				
				if(options.absolute)
					step = options.step || (0.5 * aperture_size);
				else
					step = (options.step || 0.5) * aperture_size;
			}
			else
			{
				max_position = domRibbon.children.length-1;
				
				if(options.absolute)
					step = options.step || 1;
				else
					step = (options.step || 0.5) * (aperture_size / (ribbon_size || 1)) * domRibbon.children.length;
				
				if(domRibbon.children.length > 0)
				{
					var childStyle = SSP.DOM.getComputedStyle(domRibbon.children[0]);
					
					ribbon_min += options.vertical ? SSP.Number.parseInt(childStyle.marginTop)    : SSP.Number.parseInt(childStyle.marginLeft);
					ribbon_max -= options.vertical ? SSP.Number.parseInt(childStyle.marginBottom) : SSP.Number.parseInt(childStyle.marginRight);
				}
			}
			
			step = Math.ceil(step);
		}
		
		function enableButtons()
		{
			var enableBackward = ribbon_position < -ribbon_min - luft;
			var enableForward = ribbon_position > -ribbon_max + luft;
			
			if(options.wrap && (enableBackward || enableForward))
				enableBackward = enableForward = true;
			
			if(enableBackward)
				SSP.DOM.removeClass(domBackward, 'disabled');
			else
				SSP.DOM.addClass(domBackward, 'disabled');
			
			if(enableForward)
				SSP.DOM.removeClass(domForward, 'disabled');
			else
				SSP.DOM.addClass(domForward, 'disabled');
		}
		
		function adjust()
		{
			recalc();
			enableButtons();
		}
		
		function setPosition()
		{
			var position = ribbon_position;
			
			if(App.Carousel.supportsTransform)
				domRibbon.style.willChange = 'transform';
			
			(queue_mode ? SSP.DOM.queueAnimationFrame : SSP.DOM.requestAnimationFrame).call(this, function()
			{
				ribbon_position = position;
				
				if(App.Carousel.supportsTransform)
				{
					if(options.vertical)
						domRibbon.style.transform = 'translate(0px, ' + ribbon_position + 'px)';
					else
						domRibbon.style.transform = 'translate(' + ribbon_position + 'px, 0px)';
					
					domRibbon.style.willChange = '';
				}
				else
					domRibbon.style[left_prop] = ribbon_position+'px';
				
				App.Carousel.positions[ribbon_id] = ribbon_position;
				
				enableButtons();
			});
		}
		
		function moveTo(position, positioning)
		{
			if(position < 0)
			{
				if(options.wrap && position <= -step)
					position = max_position;
				else
					position = 0;
			}
			else if(position > max_position)
			{
				if(options.wrap && position >= max_position + step)
					position = 0;
				else
					position = max_position;
			}
			
			if(options.bypixel)
				ribbon_position = -position;
			else
			{
				if(position < 0 || position >= domRibbon.children.length)
					return;
				
				var childRect = domRibbon.children[position].getBoundingClientRect();
				var childStyle = SSP.DOM.getComputedStyle(domRibbon.children[position]);
				var child_rect = {
					left:	childRect.left   - SSP.Number.parseInt(childStyle.marginLeft),
					right:	childRect.right  + SSP.Number.parseInt(childStyle.marginRight),
					top:	childRect.top    - SSP.Number.parseInt(childStyle.marginTop),
					bottom:	childRect.bottom + SSP.Number.parseInt(childStyle.marginBottom)
				};
				
				if(positioning === App.Carousel.MOVETO_ALIGN_LEFT)
				{
					ribbon_position += aperture_rect[left_prop] - child_rect[left_prop];
				}
				else if(positioning === App.Carousel.MOVETO_ALIGN_RIGHT)
				{
					ribbon_position += aperture_rect[right_prop] - child_rect[right_prop];
				}
				else // MOVETO_MINIMAL_SHIFT
				{
					if(child_rect[right_prop] > aperture_rect[right_prop])
						ribbon_position -= child_rect[right_prop] - aperture_rect[right_prop];
					else if(child_rect[left_prop] < aperture_rect[left_prop])
						ribbon_position -= child_rect[left_prop] - aperture_rect[left_prop];
				}
				
				if(ribbon_position > 0)
					ribbon_position = 0;
				if(ribbon_position < aperture_size - ribbon_size)
					ribbon_position = aperture_size - ribbon_size;
			}
			
			setPosition();
		}
		
		function moveBy(n)
		{
			if(n === 0)
				return;
			
			if(options.bypixel)
				moveTo(n*step - ribbon_position);
			else
			{
				var child_rect;
				
				if(n < 0)
				{
					for(var idx = 0; idx < domRibbon.children.length; idx++)
					{
						child_rect = domRibbon.children[idx].getBoundingClientRect();
						if(child_rect[left_prop] >= aperture_rect[left_prop] - luft)
							break;
					}
				}
				else
				{
					for(var idx = domRibbon.children.length-1; idx >= 0; idx--)
					{
						child_rect = domRibbon.children[idx].getBoundingClientRect();
						if(child_rect[right_prop] <= aperture_rect[right_prop] + luft)
							break;
					}
				}
				
				moveTo(n*step + idx, App.Carousel.MOVETO_MINIMAL_SHIFT);
			}
		}
		
		function onClick(event)
		{
			if(this === domBackward)
				moveBy(-1);
			else if(this === domForward)
				moveBy(1);
			
			SSP.Bus.cancel(event);
		}
		
		function init(aperture_id, ribbon_id, backward_id, forward_id, buttons_ids, _options)
		{
			var initial = false;
			var has_old_position = App.Carousel.positions.hasOwnProperty(ribbon_id);
			
			domAperture = SSP.DOM.byId(aperture_id);
			domRibbon = SSP.DOM.byId(ribbon_id);
			domBackward = backward_id ? SSP.DOM.byId(backward_id) : null;
			domForward = forward_id ? SSP.DOM.byId(forward_id) : null;
			
			options = _options || {};
			options.vertical = !!options.vertical;
			options.wrap = !!options.wrap;
			options.absolute = !!options.absolute;
			options.bypixel = !!options.bypixel;
			
			options.initial_type = false;
			options.initial_offset = options.initial_offset*1 || 0;
			
			left_prop  = options.vertical ? 'top'    : 'left';
			right_prop = options.vertical ? 'bottom' : 'right';
			
			ribbon_position = App.Carousel.positions[ribbon_id] || 0;
			
			SSP.DOM.queueAnimationFrame(recalc);
			
			if(typeof options.initial === 'string')
			{
				if(options.initial[0] === '.')
					options.initial_type = 'class';
				else if(options.initial[0] === '#')
					options.initial_type = 'id';
					
				if(options.initial_type)
				{
					options.initial = options.initial.substr(1);
					
					for(var idx = 0; idx < domRibbon.children.length; idx++)
					{
						if((options.initial_type === 'class' && SSP.DOM.hasClass(domRibbon.children[idx], options.initial))
						|| (options.initial_type === 'id' && domRibbon.children[idx].id === options.initial))
							break;
					}
					
					initial = idx < domRibbon.children.length ? idx + options.initial_offset : 0;
					
					if(options.bypixel)
					{
						var child_rect;
						child_rect = domRibbon.children[initial].getBoundingClientRect();
						
						initial = child_rect[left_prop] - aperture_rect[left_prop];
					}
				}
			}
			else if(typeof options.initial === 'number')
			{
				options.initial_type = 'index';
				initial = options.initial + options.initial_offset;
			}
			
			if(has_old_position || initial !== false)
			{
				queue_mode = true;
				
				SSP.DOM.addClass(domRibbon, 'no-transition');
				
				if(has_old_position)
					setPosition();
				else // initial !== false
				{
					SSP.DOM.queueAnimationFrame(function()
					{
						moveTo(initial, App.Carousel.MOVETO_ALIGN_LEFT);
						initial = false;
					});
				}
				
				SSP.DOM.queueAnimationFrame(function()
				{
					SSP.DOM.removeClass(domRibbon, 'no-transition');
					
					if(initial !== false)
					{
						SSP.DOM.queueAnimationFrame(function()
						{
							moveTo(initial, App.Carousel.MOVETO_ALIGN_LEFT);
							queue_mode = false;
						});
						
						SSP.DOM.processAnimationFrames();
					}
					else
						queue_mode = false;
				});
			}
			else
				SSP.DOM.queueAnimationFrame(enableButtons);
			
			SSP.DOM.processAnimationFrames();
			
			if(domBackward)
			{
				SSP.DOM.listen(domBackward, 'click', onClick);
				SSP.DOM.listen(domBackward, 'mousedown', function(event) { SSP.Bus.cancel(event); });
			}
			if(domForward)
			{
				SSP.DOM.listen(domForward, 'click', onClick);
				SSP.DOM.listen(domForward, 'mousedown', function(event) { SSP.Bus.cancel(event); });
			}
			SSP.DOM.listen(window, 'resize', adjust, false, true);
		}
		
		init(aperture_id, ribbon_id, backward_id, forward_id, buttons_ids, _options);
		
		this.adjust = adjust;
		this.moveTo = moveTo;
		this.moveBy = moveBy;
	});
	
	try
	{
		App.Carousel.supportsTransform = window.CSS ? CSS.supports('transform: translate(0px, 0px)') : false;
	}
	catch(e)
	{
		App.Carousel.supportsTransform = false;
	}
	
	App.Carousel.MOVETO_ALIGN_LEFT = -1;
	App.Carousel.MOVETO_ALIGN_RIGHT = 1;
	App.Carousel.MOVETO_MINIMAL_SHIFT = 0;
	
	App.Carousel.positions = [];
	
	App.Stat =
	{
		vars:
		{
			utm_source:		'Источник *',
			utm_medium:		'Канал *',
			utm_campaign:	'Кампания *',
			utm_content:	'Содержание объявления *',
			landing_page:	'Целевая страница *',
			user_type:		'Тип пользователя *'
		}
		,
		slots:
		{
			utm_source:		1,
			utm_medium:		2,
			utm_campaign:	3,
			utm_content:	4,
			landing_page:	5,
			user_type:		6
		}
		,
		init: function(gaCode, ymCode, ywCode, paramsCookie, userTypeCookie, intranet)
		{
			if(SSP.Bus.canUseStat() && (!intranet || window != window.top))
			{
				var plugins = {};
				
				plugins.li = true;
				
				if(ymCode)
					plugins.ym = ymCode;
				
				if(gaCode)
				{
					plugins.ga = gaCode;
					
					SSP.Bus.statPlugins.ga.vars = App.Stat.vars;
					SSP.Bus.statPlugins.ga.slots = App.Stat.slots;
				}
				
				var params = {};
				
				if(paramsCookie)
				{
					var cookieParams = SSP.Bus.cookie(paramsCookie);
					
					if(cookieParams)
					{
						cookieParams = SSP.String.parseStr(cookieParams);
						
						if(typeof cookieParams.scope === 'undefined')
							var scope = 'request';
						else
						{
							var scope = cookieParams.scope;
							delete cookieParams.scope;
						}
						
						if(scope === 'request')
							SSP.Bus.deleteCookie(paramsCookie);
						
						var page;
						
						if(cookieParams.page)
						{
							page = cookieParams.page;
							delete cookieParams.page;
						}
						
						if(page)
							params.landing_page = {value: page, scope: scope};
						else
							SSP.Bus.pendingCustomLandingPage = {param: 'landing_page', scope: scope};
						
						for(var param in cookieParams)
							if(Object.prototype.hasOwnProperty.call(cookieParams, param))
								params[param] = {value: cookieParams[param], scope: scope};
					}
				}
				
				if(typeof userTypeCookie === 'undefined')
					userTypeCookie = 'USER_TYPE';
				
				var userType = SSP.Bus.cookie(userTypeCookie);
				
				if(userType)
					params.user_type = {value: userType, scope: 'page'};
				
				SSP.Bus.initStat(plugins, params);
				
				if(SSP.Browser.IE)
					window.onerror = null;
			}
			else
				SSP.Bus.useStat = false;
			
			setTimeout(function()
			{
				if(typeof navigator.serviceWorker !== 'undefined'
				&& App.SWDB.available())
					App.SWDB.connect(function(event)
					{
						var db = event.target.result;
						var writeTransaction = db.transaction(App.SWDB.storeName, 'readwrite');
						var subscriptionStore = writeTransaction.objectStore(App.SWDB.storeName);
						var writeTidQuery = subscriptionStore.put({key: 'gatid', value: SSP.Bus.useStat ? gaCode : null});
						
						writeTransaction.oncomplete = function(event)
						{
							db.close();
						};
					});
			},
			0);
			
			var resetCookieName = 'STORAGE_RESET';
			
			if(!SSP.Bus.cookie(resetCookieName))
			{
				if(ymCode
				&& !SSP.Browser.Android
				&& !SSP.Browser.IOS
				&& SSP.Bus.canUseStat()
				&& !intranet)
					var whitelist = [
						'_ym_uid',
						'_ym_retryReqs',
						'_ym' + ymCode + '_lsid',
						'_ym' + ymCode + '_reqNum',
						'_ym' + ymCode + '_lastHit',
						'_ym' + ymCode + '_visorbuff',
						'__vw_tab_guid',
					];
				else
					var whitelist = null;
				
				var storages = ['localStorage', 'sessionStorage'];
				
				for(var i = 0; i < storages.length; i++)
				{
					var storage = window[storages[i]];
					
					if(storage)
					{
						if(whitelist)
						{
							var keep = {};
							
							if(storage.length)
								for(var j = 0; j < whitelist.length; j++)
								{
									var key = whitelist[j];
									var value = storage.getItem(key);
									
									if(value !== null)
										keep[key] = value;
								}
						}
						
						storage.clear();
						
						if(whitelist)
							for(var key in keep)
								if(Object.prototype.hasOwnProperty.call(keep, key))
									storage.setItem(key, keep[key]);
					}
				}
				
				SSP.Bus.cookie(resetCookieName, 'Y');
			}
		}
	};
	
	App.SWDB =
	{
		available: function()
		{
			if(typeof App.SWDB.isAvailable === 'undefined')
			{
				if('indexedDB' in window
				&& !SSP.Browser.Safari
				&& App.SWDB.connect())
					App.SWDB.isAvailable = true;
				else
					App.SWDB.isAvailable = false;
			}
			
			return App.SWDB.isAvailable;
		}
		,
		isAvailable: void 0
		,
		name: 'SW'
		,
		version: 1
		,
		storeName: 'pushsubscription'
		,
		keyPath: 'key'
		,
		corrupt: false
		,
		getConnection: function()
		{
			var connection = indexedDB.open(App.SWDB.name, App.SWDB.version);
			
			connection.onupgradeneeded = function(event)
			{
				var db = event.target.result || connection.result;
				db.createObjectStore(App.SWDB.storeName, {keyPath: App.SWDB.keyPath});
			};
			
			return connection;
		}
		,
		connect: function(onsuccess, onerror)
		{
			try
			{
				var connection = App.SWDB.getConnection();
			}
			catch(e) // seems uncatchable in Firefox
			{
				return;
			}
			
			connection.onsuccess = function(event)
			{
				var db = event.target.result;
				
				try
				{
					db.transaction(App.SWDB.storeName, 'readwrite');
				}
				catch(e) // db out of sync, recreating
				{
					if(App.SWDB.corrupt)
						throw e;
					else
					{
						App.SWDB.corrupt = true;
						db.close();
						var deletion = indexedDB.deleteDatabase(App.SWDB.name);
						
						deletion.onsuccess = function()
						{
							App.SWDB.connect(onsuccess, onerror);
						};
						
						return;
					}
				}
				
				if(onsuccess)
					onsuccess.call(this, event);
			};
			
			if(onerror)
				connection.onerror = onerror;
			else
				connection.onerror = function(event)
				{
					event.preventDefault();
					console.log(connection.error);
				};
			
			return connection;
		}
	};
	
	App.initServiceWorker = function()
	{
		return navigator.serviceWorker.register('/sw.js');
	};
	
	App.WebPush =
	{
		available: function()
		{
			if('serviceWorker' in navigator
			&& 'PushManager' in window
			&& 'postMessage' in window.ServiceWorker.prototype
			&& (!SSP.Browser.Chrome || SSP.Browser.Chrome >= 67 || SSP.Browser.OperaWebkit || SSP.Browser.Yandex)
			&& (!SSP.Browser.Firefox || SSP.Browser.Firefox >= 56)
			&& typeof navigator.serviceWorker !== 'undefined'
			&& App.SWDB.available())
				return true;
			else
				return false;
		}
		,
		init: function(callback)
		{
			SSP.Bus.deleteCookie('WEBPUSH');
			
			if(App.WebPush.available())
			{
				navigator.serviceWorker.ready.then(
					function(registration)
					{
						return new Promise(function(resolve, reject)
						{
							var permissionResult = Notification.requestPermission(function(result)
							{
								resolve(result);
							});
							
							if(permissionResult)
								permissionResult.then(resolve, reject);
						})
						.then(function(permissionResult)
						{
							if(permissionResult === 'granted'
							&& navigator.serviceWorker.controller)
							{
								var cookieSubscriptionIds = (SSP.Bus.cookie('WEBPUSH_IDS') || '').split(':');
								
								var continueRegistration = function(subscriptionMismatch, userMismatch)
								{
									registration.pushManager.getSubscription().then(function(pushSubscription)
									{
										if(subscriptionMismatch
										|| userMismatch
										|| !pushSubscription
										|| pushSubscription.expirationTime && pushSubscription.expirationTime <= (new Date).getTime())
										{
											var postSyncMessage = function()
											{
												navigator.serviceWorker.controller.postMessage({name: 'syncPushSubscription'});
											};
											
											if(subscriptionMismatch
											&& pushSubscription
											&& (!cookieSubscriptionIds.length || cookieSubscriptionIds.length === 1 && cookieSubscriptionIds[0] === '0'))
												pushSubscription.unsubscribe().then(postSyncMessage);
											else
												postSyncMessage.call(window);
										}
										
										if(callback
										&& typeof callback === 'function')
										{
											if(pushSubscription)
												callback.call(window);
											else
												var interval = setInterval(function()
												{
													registration.pushManager.getSubscription().then(function(pushSubscription)
													{
														if(pushSubscription)
														{
															clearInterval(interval);
															callback.call(window);
														}
													});
												},
												SSP.DOM.timeoutMedium);
										}
									});
								};
								
								var onsuccess = function(event)
								{
									var db = event.target.result;
									var readTransaction = db.transaction(App.SWDB.storeName, 'readonly');
									var subscriptionStore = readTransaction.objectStore(App.SWDB.storeName);
									var readIdQuery = subscriptionStore.get('id');
									var readUserQuery = subscriptionStore.get('user');
									var userType = SSP.Bus.cookie('USER_TYPE');
									var userAuthorized = userType && userType.indexOf(':0:') === -1;
									
									readTransaction.oncomplete = function(event)
									{
										var subscriptionId = readIdQuery.result ? readIdQuery.result.value : null;
										var subscriptionMismatch = false;
										
										if(!subscriptionId
										|| userAuthorized && cookieSubscriptionIds.indexOf(subscriptionId) === -1)
											subscriptionMismatch = true;
										
										var userId = readUserQuery.result ? readUserQuery.result.value : null;
										var userMismatch = false;
										
										if(!userId && userAuthorized)
											userMismatch = true;
										
										continueRegistration(subscriptionMismatch, userMismatch);
										db.close();
									};
									
									readTransaction.onerror = function(event)
									{
										try
										{
											var subscriptionId = readIdQuery.result ? readIdQuery.result.value : null;
											var subscriptionMismatch = false;
											
											if(!subscriptionId
											|| userAuthorized && cookieSubscriptionIds.indexOf(subscriptionId) === -1)
												subscriptionMismatch = true;
											
											continueRegistration(subscriptionMismatch, true);
										}
										catch(e)
										{
											continueRegistration(true, true);
										}
										
										db.close();
									};
								};
								
								var onerror = function(event)
								{
									continueRegistration(true, true);
								};
								
								App.SWDB.connect(onsuccess, onerror);
							}
							else if(callback
							&& typeof callback === 'function')
								callback.call(window);
						});
					},
					function(error)
					{
						console.log(error);
					}
				);
			}
		}
		,
		unsubscribe: function(callback)
		{
			navigator.serviceWorker.ready.then(function(registration)
			{
				registration.pushManager.getSubscription().then(function(pushSubscription)
				{
					if(pushSubscription)
						pushSubscription.unsubscribe().then(function()
						{
							SSP.Bus.cookie('WEBPUSH', 0, undefined, '/', window.location.hostname);
							
							if(callback)
								callback.call(window);
						});
					else if(callback)
						callback.call(window);
				});
			});
		}
	};
	
	App.Share =
	{
		shareClick: function(event)
		{
			if(!event.isLeft && !event.isMiddle)
				return true;
			
			var target = event.target;
			
			if(target.tagName === 'A' && SSP.DOM.hasClass(target, 'share'))
			{
				var url = window.location.toString();
				
				url = App.Share.replaceShareUrl(url);
				App.Share.doShare(url, target);
				
				return false;
			}
		}
		,
		replaceShareUrl: function(url)
		{
			if(App.Its)
				return url.replace(/=http%3A[^&]+/, '=' + encodeURIComponent(App.Its.Router.toInternal(SSP.Bus.windowLocation())));
			else
				return url;
		}
		,
		shareProceed: function(url)
		{
			return function(data)
			{
				if(data.url || !App.Its)
					url = url.replace(/=http%3A[^&]+/, '=' + encodeURIComponent(data.url));
				else
					url = App.Its.Handler.replaceShareUrl(url);
				
				App.Share.doShare(url);
			};
		}
		,
		doShare: function(url, target)
		{
			if(target)
			{
				if(SSP.DOM.hasClass(target, 'fb'))
					url = 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(url);
				else if(SSP.DOM.hasClass(target, 'twitter'))
					url = 'https://twitter.com/intent/tweet?url=' + encodeURIComponent(url);
				else if(SSP.DOM.hasClass(target, 'vk'))
					url = 'https://vk.com/share.php?url=' + encodeURIComponent(url);
			}
			
			window.open(url, '_blank');
		}
	};
	
	App.requireJsForApp = function(app, callback, module)
	{
		var id = app.toUpperCase() + '_JS';
		var timestamp = SSP.Bus.cookie(id);
		var url = '/common/page/js/' + app + '.js_';
		
		if(timestamp)
			url += '?_=' + timestamp;
		
		register(module || id, url);
		require(module || id, callback);
	}
	
	return App;
}
)(App || {}, window);
var jsAjaxUtil = (function(jsAjaxUtil, window, undefined)
{
	"use strict";
	
	jsAjaxUtil.requests = {}
	;
	jsAjaxUtil.LoadData = function(url, callback)
	{
		var request = SSP.Bus.request(url, callback, null, 'GET', true, null, undefined, false);
		
		jsAjaxUtil.requests[request.tid] = request;
		
		return request.tid;
	}
	;
	jsAjaxUtil.PostData = function(url, data, callback)
	{
		var request = SSP.Bus.request(url, callback, data, 'POST', true, null, undefined, false);
		
		jsAjaxUtil.requests[request.tid] = request;
		
		return request.tid;
	}
	;
	
	return jsAjaxUtil;
}
)(jsAjaxUtil || {}, window);

var jsAjax = (function(jsAjax, window, undefined)
{
	"use strict";
	
	jsAjax.GetThread = function(tid)
	{
		if(jsAjaxUtil.requests[tid])
			return {httpRequest: jsAjaxUtil.requests[tid]};
	}
	;
	
	return jsAjax;
}
)(jsAjax || {}, window);

